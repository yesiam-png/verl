+ export HYDRA_FULL_ERROR=1
+ HYDRA_FULL_ERROR=1
+ ulimit -n 65535
++ pwd
+ PROJECT_DIR=/mnt/task_runtime/verl
+ CONFIG_PATH=/mnt/task_runtime/verl/examples/sglang_multiturn/config
+ python3 -m verl.trainer.main_ppo --config-path=/mnt/task_runtime/verl/examples/sglang_multiturn/config --config-name=gsm8k_multiturn_grpo algorithm.adv_estimator=grpo data.train_batch_size=1024 data.max_prompt_length=128 data.filter_overlong_prompts=True data.truncation=error data.return_raw_chat=True data.filter_overlong_prompts_workers=40 actor_rollout_ref.model.path=/root/.cache/huggingface/hub/models--allenai--OLMo-2-0425-1B/snapshots/a1847dff35000b4271fa70afc5db10fd29fedbdf +actor_rollout_ref.actor.ntp_coeff=1.0 actor_rollout_ref.actor.optim.lr=2e-6 actor_rollout_ref.model.use_remove_padding=True actor_rollout_ref.actor.ppo_mini_batch_size=256 +actor_rollout_ref.actor.ntp_mini_batch_size=512 actor_rollout_ref.actor.ppo_micro_batch_size_per_gpu=32 +actor_rollout_ref.actor.ntp_micro_batch_size_per_gpu=64 actor_rollout_ref.actor.use_kl_loss=False actor_rollout_ref.actor.kl_loss_coef=0.0 actor_rollout_ref.actor.entropy_coeff=0.0005 actor_rollout_ref.model.enable_gradient_checkpointing=True actor_rollout_ref.actor.fsdp_config.param_offload=False actor_rollout_ref.actor.fsdp_config.optimizer_offload=False actor_rollout_ref.rollout.log_prob_micro_batch_size_per_gpu=80 actor_rollout_ref.ref.log_prob_micro_batch_size_per_gpu=80 actor_rollout_ref.rollout.tensor_model_parallel_size=1 actor_rollout_ref.rollout.name=sglang actor_rollout_ref.rollout.gpu_memory_utilization=0.8 actor_rollout_ref.rollout.n=3 actor_rollout_ref.rollout.temperature=1.0 +actor_rollout_ref.rollout.per_turn_response_length=16 +actor_rollout_ref.rollout.max_code_lines=32 actor_rollout_ref.rollout.response_length=1024 algorithm.use_kl_in_reward=False trainer.critic_warmup=0 'trainer.logger=["console","wandb"]' trainer.project_name=em-new trainer.experiment_name=openandsyn-ours-80-200-olmo-nowarmup-window3-std-0005entropy-12lenpenalty-nopenalty-alreadynextline-mustsharp trainer.n_gpus_per_node=8 trainer.nnodes=1 trainer.val_before_train=False trainer.save_freq=100 trainer.test_freq=-1 trainer.total_epochs=1 +trainer.q_steps=80 +trainer.ref_update_freq=200 data.train_files=/mnt/task_runtime/opencoder_post.parquet data.val_files=/root/data/real_code/test.parquet actor_rollout_ref.rollout.multi_turn.interaction_config_path=/mnt/task_runtime/verl/examples/sglang_multiturn/config/interaction_config/gsm8k_interaction_config.yaml actor_rollout_ref.rollout.multi_turn.max_user_turns=1
2025-08-23 21:15:40,607	INFO worker.py:1918 -- Started a local Ray instance. View the dashboard at [1m[32m127.0.0.1:8265 [39m[22m
[36m(TaskRunner pid=3022421)[0m TaskRunner hostname: bolt-f4pdfx26wb-c5cg2sruft, PID: 3022421
[36m(TaskRunner pid=3022421)[0m {'actor_rollout_ref': {'actor': {'checkpoint': {'load_contents': ['hf_model',
[36m(TaskRunner pid=3022421)[0m                                                                   'model',
[36m(TaskRunner pid=3022421)[0m                                                                   'optimizer',
[36m(TaskRunner pid=3022421)[0m                                                                   'extra'],
[36m(TaskRunner pid=3022421)[0m                                                 'save_contents': ['hf_model',
[36m(TaskRunner pid=3022421)[0m                                                                   'model',
[36m(TaskRunner pid=3022421)[0m                                                                   'optimizer',
[36m(TaskRunner pid=3022421)[0m                                                                   'extra']},
[36m(TaskRunner pid=3022421)[0m                                  'clip_ratio': 0.2,
[36m(TaskRunner pid=3022421)[0m                                  'clip_ratio_c': 3.0,
[36m(TaskRunner pid=3022421)[0m                                  'clip_ratio_high': 0.2,
[36m(TaskRunner pid=3022421)[0m                                  'clip_ratio_low': 0.2,
[36m(TaskRunner pid=3022421)[0m                                  'entropy_checkpointing': False,
[36m(TaskRunner pid=3022421)[0m                                  'entropy_coeff': 0.0005,
[36m(TaskRunner pid=3022421)[0m                                  'entropy_from_logits_with_chunking': False,
[36m(TaskRunner pid=3022421)[0m                                  'fsdp_config': {'forward_prefetch': False,
[36m(TaskRunner pid=3022421)[0m                                                  'fsdp_size': -1,
[36m(TaskRunner pid=3022421)[0m                                                  'offload_policy': False,
[36m(TaskRunner pid=3022421)[0m                                                  'optimizer_offload': False,
[36m(TaskRunner pid=3022421)[0m                                                  'param_offload': False,
[36m(TaskRunner pid=3022421)[0m                                                  'reshard_after_forward': True,
[36m(TaskRunner pid=3022421)[0m                                                  'wrap_policy': {'min_num_params': 0}},
[36m(TaskRunner pid=3022421)[0m                                  'grad_clip': 1.0,
[36m(TaskRunner pid=3022421)[0m                                  'kl_loss_coef': 0.0,
[36m(TaskRunner pid=3022421)[0m                                  'kl_loss_type': 'low_var_kl',
[36m(TaskRunner pid=3022421)[0m                                  'loss_agg_mode': 'token-mean',
[36m(TaskRunner pid=3022421)[0m                                  'ntp_coeff': 1.0,
[36m(TaskRunner pid=3022421)[0m                                  'ntp_micro_batch_size_per_gpu': 64,
[36m(TaskRunner pid=3022421)[0m                                  'ntp_mini_batch_size': 512,
[36m(TaskRunner pid=3022421)[0m                                  'optim': {'lr': 2e-06,
[36m(TaskRunner pid=3022421)[0m                                            'lr_warmup_steps': -1,
[36m(TaskRunner pid=3022421)[0m                                            'lr_warmup_steps_ratio': 0.0,
[36m(TaskRunner pid=3022421)[0m                                            'min_lr_ratio': 0.0,
[36m(TaskRunner pid=3022421)[0m                                            'num_cycles': 0.5,
[36m(TaskRunner pid=3022421)[0m                                            'total_training_steps': -1,
[36m(TaskRunner pid=3022421)[0m                                            'warmup_style': 'constant',
[36m(TaskRunner pid=3022421)[0m                                            'weight_decay': 0.01},
[36m(TaskRunner pid=3022421)[0m                                  'policy_loss': {'clip_cov_lb': 1.0,
[36m(TaskRunner pid=3022421)[0m                                                  'clip_cov_ratio': 0.0002,
[36m(TaskRunner pid=3022421)[0m                                                  'clip_cov_ub': 5.0,
[36m(TaskRunner pid=3022421)[0m                                                  'kl_cov_ratio': 0.0002,
[36m(TaskRunner pid=3022421)[0m                                                  'loss_mode': 'vanilla',
[36m(TaskRunner pid=3022421)[0m                                                  'ppo_kl_coef': 0.1},
[36m(TaskRunner pid=3022421)[0m                                  'ppo_epochs': 1,
[36m(TaskRunner pid=3022421)[0m                                  'ppo_max_token_len_per_gpu': 16384,
[36m(TaskRunner pid=3022421)[0m                                  'ppo_micro_batch_size': None,
[36m(TaskRunner pid=3022421)[0m                                  'ppo_micro_batch_size_per_gpu': 32,
[36m(TaskRunner pid=3022421)[0m                                  'ppo_mini_batch_size': 256,
[36m(TaskRunner pid=3022421)[0m                                  'shuffle': False,
[36m(TaskRunner pid=3022421)[0m                                  'strategy': 'fsdp',
[36m(TaskRunner pid=3022421)[0m                                  'ulysses_sequence_parallel_size': 1,
[36m(TaskRunner pid=3022421)[0m                                  'use_dynamic_bsz': False,
[36m(TaskRunner pid=3022421)[0m                                  'use_kl_loss': False,
[36m(TaskRunner pid=3022421)[0m                                  'use_torch_compile': True},
[36m(TaskRunner pid=3022421)[0m                        'hybrid_engine': True,
[36m(TaskRunner pid=3022421)[0m                        'model': {'custom_chat_template': None,
[36m(TaskRunner pid=3022421)[0m                                  'enable_activation_offload': False,
[36m(TaskRunner pid=3022421)[0m                                  'enable_gradient_checkpointing': True,
[36m(TaskRunner pid=3022421)[0m                                  'exclude_modules': None,
[36m(TaskRunner pid=3022421)[0m                                  'external_lib': None,
[36m(TaskRunner pid=3022421)[0m                                  'fused_kernel_options': {'impl_backend': 'torch'},
[36m(TaskRunner pid=3022421)[0m                                  'lora_alpha': 16,
[36m(TaskRunner pid=3022421)[0m                                  'lora_rank': 0,
[36m(TaskRunner pid=3022421)[0m                                  'override_config': {},
[36m(TaskRunner pid=3022421)[0m                                  'path': '/root/.cache/huggingface/hub/models--allenai--OLMo-2-0425-1B/snapshots/a1847dff35000b4271fa70afc5db10fd29fedbdf',
[36m(TaskRunner pid=3022421)[0m                                  'target_modules': 'all-linear',
[36m(TaskRunner pid=3022421)[0m                                  'trust_remote_code': False,
[36m(TaskRunner pid=3022421)[0m                                  'use_fused_kernels': False,
[36m(TaskRunner pid=3022421)[0m                                  'use_liger': False,
[36m(TaskRunner pid=3022421)[0m                                  'use_remove_padding': True,
[36m(TaskRunner pid=3022421)[0m                                  'use_shm': False},
[36m(TaskRunner pid=3022421)[0m                        'profiler': {'_target_': 'verl.utils.profiler.ProfilerConfig',
[36m(TaskRunner pid=3022421)[0m                                     'all_ranks': False,
[36m(TaskRunner pid=3022421)[0m                                     'discrete': False,
[36m(TaskRunner pid=3022421)[0m                                     'ranks': []},
[36m(TaskRunner pid=3022421)[0m                        'ref': {'entropy_checkpointing': False,
[36m(TaskRunner pid=3022421)[0m                                'entropy_from_logits_with_chunking': False,
[36m(TaskRunner pid=3022421)[0m                                'fsdp_config': {'forward_prefetch': False,
[36m(TaskRunner pid=3022421)[0m                                                'param_offload': False,
[36m(TaskRunner pid=3022421)[0m                                                'reshard_after_forward': True,
[36m(TaskRunner pid=3022421)[0m                                                'wrap_policy': {'min_num_params': 0}},
[36m(TaskRunner pid=3022421)[0m                                'log_prob_max_token_len_per_gpu': 16384,
[36m(TaskRunner pid=3022421)[0m                                'log_prob_micro_batch_size': None,
[36m(TaskRunner pid=3022421)[0m                                'log_prob_micro_batch_size_per_gpu': 80,
[36m(TaskRunner pid=3022421)[0m                                'log_prob_use_dynamic_bsz': False,
[36m(TaskRunner pid=3022421)[0m                                'strategy': 'fsdp',
[36m(TaskRunner pid=3022421)[0m                                'ulysses_sequence_parallel_size': 1,
[36m(TaskRunner pid=3022421)[0m                                'use_torch_compile': True},
[36m(TaskRunner pid=3022421)[0m                        'rollout': {'agent': {'agent_loop_config_path': None,
[36m(TaskRunner pid=3022421)[0m                                              'custom_async_server': {'name': None,
[36m(TaskRunner pid=3022421)[0m                                                                      'path': None},
[36m(TaskRunner pid=3022421)[0m                                              'num_workers': 8},
[36m(TaskRunner pid=3022421)[0m                                    'calculate_log_probs': False,
[36m(TaskRunner pid=3022421)[0m                                    'disable_log_stats': True,
[36m(TaskRunner pid=3022421)[0m                                    'do_sample': True,
[36m(TaskRunner pid=3022421)[0m                                    'dtype': 'bfloat16',
[36m(TaskRunner pid=3022421)[0m                                    'enable_chunked_prefill': True,
[36m(TaskRunner pid=3022421)[0m                                    'enforce_eager': True,
[36m(TaskRunner pid=3022421)[0m                                    'engine_kwargs': {'sglang': {'attention_backend': None},
[36m(TaskRunner pid=3022421)[0m                                                      'vllm': {'disable_mm_preprocessor_cache': False,
[36m(TaskRunner pid=3022421)[0m                                                               'swap_space': None}},
[36m(TaskRunner pid=3022421)[0m                                    'free_cache_engine': True,
[36m(TaskRunner pid=3022421)[0m                                    'gpu_memory_utilization': 0.8,
[36m(TaskRunner pid=3022421)[0m                                    'ignore_eos': False,
[36m(TaskRunner pid=3022421)[0m                                    'layered_summon': False,
[36m(TaskRunner pid=3022421)[0m                                    'load_format': 'dummy_dtensor',
[36m(TaskRunner pid=3022421)[0m                                    'log_prob_max_token_len_per_gpu': 16384,
[36m(TaskRunner pid=3022421)[0m                                    'log_prob_micro_batch_size': None,
[36m(TaskRunner pid=3022421)[0m                                    'log_prob_micro_batch_size_per_gpu': 80,
[36m(TaskRunner pid=3022421)[0m                                    'log_prob_use_dynamic_bsz': False,
[36m(TaskRunner pid=3022421)[0m                                    'max_code_lines': 32,
[36m(TaskRunner pid=3022421)[0m                                    'max_model_len': None,
[36m(TaskRunner pid=3022421)[0m                                    'max_num_batched_tokens': 8192,
[36m(TaskRunner pid=3022421)[0m                                    'max_num_seqs': 1024,
[36m(TaskRunner pid=3022421)[0m                                    'mode': 'sync',
[36m(TaskRunner pid=3022421)[0m                                    'multi_stage_wake_up': False,
[36m(TaskRunner pid=3022421)[0m                                    'multi_turn': {'completion_callback': None,
[36m(TaskRunner pid=3022421)[0m                                                   'enable': True,
[36m(TaskRunner pid=3022421)[0m                                                   'format': 'hermes',
[36m(TaskRunner pid=3022421)[0m                                                   'interaction_config_path': '/mnt/task_runtime/verl/examples/sglang_multiturn/config/interaction_config/gsm8k_interaction_config.yaml',
[36m(TaskRunner pid=3022421)[0m                                                   'max_assistant_turns': 100000,
[36m(TaskRunner pid=3022421)[0m                                                   'max_parallel_calls': 1,
[36m(TaskRunner pid=3022421)[0m                                                   'max_tool_response_length': 256,
[36m(TaskRunner pid=3022421)[0m                                                   'max_user_turns': 1,
[36m(TaskRunner pid=3022421)[0m                                                   'tokenization_sanity_check_mode': 'strict',
[36m(TaskRunner pid=3022421)[0m                                                   'tool_config_path': None,
[36m(TaskRunner pid=3022421)[0m                                                   'tool_response_truncate_side': 'middle',
[36m(TaskRunner pid=3022421)[0m                                                   'use_inference_chat_template': False},
[36m(TaskRunner pid=3022421)[0m                                    'n': 3,
[36m(TaskRunner pid=3022421)[0m                                    'name': 'sglang',
[36m(TaskRunner pid=3022421)[0m                                    'per_turn_response_length': 16,
[36m(TaskRunner pid=3022421)[0m                                    'prompt_length': 128,
[36m(TaskRunner pid=3022421)[0m                                    'response_length': 1024,
[36m(TaskRunner pid=3022421)[0m                                    'temperature': 1.0,
[36m(TaskRunner pid=3022421)[0m                                    'tensor_model_parallel_size': 1,
[36m(TaskRunner pid=3022421)[0m                                    'top_k': -1,
[36m(TaskRunner pid=3022421)[0m                                    'top_p': 1,
[36m(TaskRunner pid=3022421)[0m                                    'trace': {'backend': None,
[36m(TaskRunner pid=3022421)[0m                                              'token2text': False},
[36m(TaskRunner pid=3022421)[0m                                    'update_weights_bucket_megabytes': 512,
[36m(TaskRunner pid=3022421)[0m                                    'val_kwargs': {'do_sample': False,
[36m(TaskRunner pid=3022421)[0m                                                   'n': 1,
[36m(TaskRunner pid=3022421)[0m                                                   'temperature': 0,
[36m(TaskRunner pid=3022421)[0m                                                   'top_k': -1,
[36m(TaskRunner pid=3022421)[0m                                                   'top_p': 1.0}}},
[36m(TaskRunner pid=3022421)[0m  'algorithm': {'_target_': 'verl.trainer.config.AlgoConfig',
[36m(TaskRunner pid=3022421)[0m                'adv_estimator': 'grpo',
[36m(TaskRunner pid=3022421)[0m                'gamma': 1.0,
[36m(TaskRunner pid=3022421)[0m                'kl_ctrl': {'_target_': 'verl.trainer.config.KLControlConfig',
[36m(TaskRunner pid=3022421)[0m                            'horizon': 10000,
[36m(TaskRunner pid=3022421)[0m                            'kl_coef': 0.001,
[36m(TaskRunner pid=3022421)[0m                            'target_kl': 0.1,
[36m(TaskRunner pid=3022421)[0m                            'type': 'fixed'},
[36m(TaskRunner pid=3022421)[0m                'kl_penalty': 'kl',
[36m(TaskRunner pid=3022421)[0m                'lam': 1.0,
[36m(TaskRunner pid=3022421)[0m                'norm_adv_by_std_in_grpo': True,
[36m(TaskRunner pid=3022421)[0m                'pf_ppo': {'_target_': 'verl.trainer.config.PFPPOConfig',
[36m(TaskRunner pid=3022421)[0m                           'reweight_method': 'pow',
[36m(TaskRunner pid=3022421)[0m                           'weight_pow': 2.0},
[36m(TaskRunner pid=3022421)[0m                'use_kl_in_reward': False,
[36m(TaskRunner pid=3022421)[0m                'use_pf_ppo': False},
[36m(TaskRunner pid=3022421)[0m  'critic': {'_target_': 'verl.trainer.config.FSDPCriticConfig',
[36m(TaskRunner pid=3022421)[0m             'checkpoint': {'load_contents': ['model', 'optimizer', 'extra'],
[36m(TaskRunner pid=3022421)[0m                            'save_contents': ['model', 'optimizer', 'extra']},
[36m(TaskRunner pid=3022421)[0m             'cliprange_value': 0.5,
[36m(TaskRunner pid=3022421)[0m             'forward_max_token_len_per_gpu': 32768,
[36m(TaskRunner pid=3022421)[0m             'forward_micro_batch_size': None,
[36m(TaskRunner pid=3022421)[0m             'forward_micro_batch_size_per_gpu': None,
[36m(TaskRunner pid=3022421)[0m             'grad_clip': 1.0,
[36m(TaskRunner pid=3022421)[0m             'loss_agg_mode': 'token-mean',
[36m(TaskRunner pid=3022421)[0m             'model': {'enable_activation_offload': False,
[36m(TaskRunner pid=3022421)[0m                       'enable_gradient_checkpointing': True,
[36m(TaskRunner pid=3022421)[0m                       'external_lib': None,
[36m(TaskRunner pid=3022421)[0m                       'fsdp_config': {'forward_prefetch': False,
[36m(TaskRunner pid=3022421)[0m                                       'fsdp_size': -1,
[36m(TaskRunner pid=3022421)[0m                                       'offload_policy': False,
[36m(TaskRunner pid=3022421)[0m                                       'optimizer_offload': False,
[36m(TaskRunner pid=3022421)[0m                                       'param_offload': False,
[36m(TaskRunner pid=3022421)[0m                                       'reshard_after_forward': True,
[36m(TaskRunner pid=3022421)[0m                                       'wrap_policy': {'min_num_params': 0}},
[36m(TaskRunner pid=3022421)[0m                       'lora_alpha': 16,
[36m(TaskRunner pid=3022421)[0m                       'lora_rank': 0,
[36m(TaskRunner pid=3022421)[0m                       'override_config': {},
[36m(TaskRunner pid=3022421)[0m                       'path': '~/models/deepseek-llm-7b-chat',
[36m(TaskRunner pid=3022421)[0m                       'target_modules': 'all-linear',
[36m(TaskRunner pid=3022421)[0m                       'tokenizer_path': '/root/.cache/huggingface/hub/models--allenai--OLMo-2-0425-1B/snapshots/a1847dff35000b4271fa70afc5db10fd29fedbdf',
[36m(TaskRunner pid=3022421)[0m                       'trust_remote_code': False,
[36m(TaskRunner pid=3022421)[0m                       'use_remove_padding': False,
[36m(TaskRunner pid=3022421)[0m                       'use_shm': False},
[36m(TaskRunner pid=3022421)[0m             'optim': {'lr': 1e-05,
[36m(TaskRunner pid=3022421)[0m                       'lr_warmup_steps_ratio': 0.0,
[36m(TaskRunner pid=3022421)[0m                       'min_lr_ratio': None,
[36m(TaskRunner pid=3022421)[0m                       'total_training_steps': -1,
[36m(TaskRunner pid=3022421)[0m                       'warmup_style': 'constant',
[36m(TaskRunner pid=3022421)[0m                       'weight_decay': 0.01},
[36m(TaskRunner pid=3022421)[0m             'ppo_epochs': 1,
[36m(TaskRunner pid=3022421)[0m             'ppo_max_token_len_per_gpu': 32768,
[36m(TaskRunner pid=3022421)[0m             'ppo_micro_batch_size': None,
[36m(TaskRunner pid=3022421)[0m             'ppo_micro_batch_size_per_gpu': None,
[36m(TaskRunner pid=3022421)[0m             'ppo_mini_batch_size': 256,
[36m(TaskRunner pid=3022421)[0m             'profiler': {'_target_': 'verl.utils.profiler.ProfilerConfig',
[36m(TaskRunner pid=3022421)[0m                          'all_ranks': False,
[36m(TaskRunner pid=3022421)[0m                          'discrete': False,
[36m(TaskRunner pid=3022421)[0m                          'ranks': []},
[36m(TaskRunner pid=3022421)[0m             'rollout_n': 3,
[36m(TaskRunner pid=3022421)[0m             'shuffle': False,
[36m(TaskRunner pid=3022421)[0m             'strategy': 'fsdp',
[36m(TaskRunner pid=3022421)[0m             'ulysses_sequence_parallel_size': 1,
[36m(TaskRunner pid=3022421)[0m             'use_dynamic_bsz': False},
[36m(TaskRunner pid=3022421)[0m  'custom_reward_function': {'name': 'compute_score', 'path': None},
[36m(TaskRunner pid=3022421)[0m  'data': {'custom_cls': {'name': None, 'path': None},
[36m(TaskRunner pid=3022421)[0m           'datagen': {'name': None, 'path': None},
[36m(TaskRunner pid=3022421)[0m           'dataloader_num_workers': 8,
[36m(TaskRunner pid=3022421)[0m           'filter_overlong_prompts': True,
[36m(TaskRunner pid=3022421)[0m           'filter_overlong_prompts_workers': 40,
[36m(TaskRunner pid=3022421)[0m           'image_key': 'images',
[36m(TaskRunner pid=3022421)[0m           'max_prompt_length': 128,
[36m(TaskRunner pid=3022421)[0m           'max_response_length': 1024,
[36m(TaskRunner pid=3022421)[0m           'prompt_key': 'prompt',
[36m(TaskRunner pid=3022421)[0m           'return_full_prompt': False,
[36m(TaskRunner pid=3022421)[0m           'return_multi_modal_inputs': True,
[36m(TaskRunner pid=3022421)[0m           'return_raw_chat': True,
[36m(TaskRunner pid=3022421)[0m           'return_raw_input_ids': False,
[36m(TaskRunner pid=3022421)[0m           'reward_fn_key': 'data_source',
[36m(TaskRunner pid=3022421)[0m           'sampler': {'class_name': None, 'class_path': None},
[36m(TaskRunner pid=3022421)[0m           'shuffle': True,
[36m(TaskRunner pid=3022421)[0m           'tokenizer': None,
[36m(TaskRunner pid=3022421)[0m           'train_batch_size': 1024,
[36m(TaskRunner pid=3022421)[0m           'train_files': '/mnt/task_runtime/opencoder_post.parquet',
[36m(TaskRunner pid=3022421)[0m           'truncation': 'error',
[36m(TaskRunner pid=3022421)[0m           'trust_remote_code': False,
[36m(TaskRunner pid=3022421)[0m           'use_shm': False,
[36m(TaskRunner pid=3022421)[0m           'val_batch_size': None,
[36m(TaskRunner pid=3022421)[0m           'val_files': '/root/data/real_code/test.parquet',
[36m(TaskRunner pid=3022421)[0m           'validation_shuffle': False,
[36m(TaskRunner pid=3022421)[0m           'video_key': 'videos'},
[36m(TaskRunner pid=3022421)[0m  'ray_init': {'num_cpus': None, 'timeline_json_file': None},
[36m(TaskRunner pid=3022421)[0m  'reward_model': {'enable': False,
[36m(TaskRunner pid=3022421)[0m                   'forward_max_token_len_per_gpu': 32768,
[36m(TaskRunner pid=3022421)[0m                   'launch_reward_fn_async': False,
[36m(TaskRunner pid=3022421)[0m                   'max_length': None,
[36m(TaskRunner pid=3022421)[0m                   'micro_batch_size': None,
[36m(TaskRunner pid=3022421)[0m                   'micro_batch_size_per_gpu': None,
[36m(TaskRunner pid=3022421)[0m                   'model': {'external_lib': None,
[36m(TaskRunner pid=3022421)[0m                             'fsdp_config': {'forward_prefetch': False,
[36m(TaskRunner pid=3022421)[0m                                             'fsdp_size': -1,
[36m(TaskRunner pid=3022421)[0m                                             'param_offload': False,
[36m(TaskRunner pid=3022421)[0m                                             'reshard_after_forward': True,
[36m(TaskRunner pid=3022421)[0m                                             'wrap_policy': {'min_num_params': 0}},
[36m(TaskRunner pid=3022421)[0m                             'input_tokenizer': '/root/.cache/huggingface/hub/models--allenai--OLMo-2-0425-1B/snapshots/a1847dff35000b4271fa70afc5db10fd29fedbdf',
[36m(TaskRunner pid=3022421)[0m                             'path': '~/models/FsfairX-LLaMA3-RM-v0.1',
[36m(TaskRunner pid=3022421)[0m                             'trust_remote_code': False,
[36m(TaskRunner pid=3022421)[0m                             'use_fused_kernels': False,
[36m(TaskRunner pid=3022421)[0m                             'use_remove_padding': False,
[36m(TaskRunner pid=3022421)[0m                             'use_shm': False},
[36m(TaskRunner pid=3022421)[0m                   'profiler': {'_target_': 'verl.utils.profiler.ProfilerConfig',
[36m(TaskRunner pid=3022421)[0m                                'all_ranks': False,
[36m(TaskRunner pid=3022421)[0m                                'discrete': False,
[36m(TaskRunner pid=3022421)[0m                                'ranks': []},
[36m(TaskRunner pid=3022421)[0m                   'reward_manager': 'naive',
[36m(TaskRunner pid=3022421)[0m                   'sandbox_fusion': {'max_concurrent': 64,
[36m(TaskRunner pid=3022421)[0m                                      'memory_limit_mb': 1024,
[36m(TaskRunner pid=3022421)[0m                                      'url': None},
[36m(TaskRunner pid=3022421)[0m                   'strategy': 'fsdp',
[36m(TaskRunner pid=3022421)[0m                   'ulysses_sequence_parallel_size': 1,
[36m(TaskRunner pid=3022421)[0m                   'use_dynamic_bsz': False},
[36m(TaskRunner pid=3022421)[0m  'trainer': {'balance_batch': True,
[36m(TaskRunner pid=3022421)[0m              'controller_nsight_options': {'cuda-graph-trace': 'graph',
[36m(TaskRunner pid=3022421)[0m                                            'cuda-memory-usage': 'true',
[36m(TaskRunner pid=3022421)[0m                                            'trace': 'cuda,nvtx,cublas,ucx'},
[36m(TaskRunner pid=3022421)[0m              'critic_warmup': 0,
[36m(TaskRunner pid=3022421)[0m              'default_hdfs_dir': None,
[36m(TaskRunner pid=3022421)[0m              'default_local_dir': '/mnt/task_wrapper/user_output/artifacts/checkpoints/em-new/openandsyn-ours-80-200-olmo-nowarmup-window3-std-0005entropy-12lenpenalty-nopenalty-alreadynextline-mustsharp',
[36m(TaskRunner pid=3022421)[0m              'del_local_ckpt_after_load': False,
[36m(TaskRunner pid=3022421)[0m              'device': 'cuda',
[36m(TaskRunner pid=3022421)[0m              'esi_redundant_time': 0,
[36m(TaskRunner pid=3022421)[0m              'experiment_name': 'openandsyn-ours-80-200-olmo-nowarmup-window3-std-0005entropy-12lenpenalty-nopenalty-alreadynextline-mustsharp',
[36m(TaskRunner pid=3022421)[0m              'log_val_generations': 0,
[36m(TaskRunner pid=3022421)[0m              'logger': ['console', 'wandb'],
[36m(TaskRunner pid=3022421)[0m              'max_actor_ckpt_to_keep': None,
[36m(TaskRunner pid=3022421)[0m              'max_critic_ckpt_to_keep': None,
[36m(TaskRunner pid=3022421)[0m              'n_gpus_per_node': 8,
[36m(TaskRunner pid=3022421)[0m              'nnodes': 1,
[36m(TaskRunner pid=3022421)[0m              'npu_profile': {'options': {'analysis': True,
[36m(TaskRunner pid=3022421)[0m                                          'level': 'level1',
[36m(TaskRunner pid=3022421)[0m                                          'record_shapes': False,
[36m(TaskRunner pid=3022421)[0m                                          'save_path': './profiler_data',
[36m(TaskRunner pid=3022421)[0m                                          'with_cpu': True,
[36m(TaskRunner pid=3022421)[0m                                          'with_memory': False,
[36m(TaskRunner pid=3022421)[0m                                          'with_module': False,
[36m(TaskRunner pid=3022421)[0m                                          'with_npu': True,
[36m(TaskRunner pid=3022421)[0m                                          'with_stack': False}},
[36m(TaskRunner pid=3022421)[0m              'profile_steps': None,
[36m(TaskRunner pid=3022421)[0m              'project_name': 'em-new',
[36m(TaskRunner pid=3022421)[0m              'q_steps': 80,
[36m(TaskRunner pid=3022421)[0m              'ray_wait_register_center_timeout': 300,
[36m(TaskRunner pid=3022421)[0m              'ref_update_freq': 200,
[36m(TaskRunner pid=3022421)[0m              'resume_from_path': None,
[36m(TaskRunner pid=3022421)[0m              'resume_mode': 'auto',
[36m(TaskRunner pid=3022421)[0m              'rollout_data_dir': None,
[36m(TaskRunner pid=3022421)[0m              'save_freq': 100,
[36m(TaskRunner pid=3022421)[0m              'test_freq': -1,
[36m(TaskRunner pid=3022421)[0m              'total_epochs': 1,
[36m(TaskRunner pid=3022421)[0m              'total_training_steps': None,
[36m(TaskRunner pid=3022421)[0m              'use_legacy_worker_impl': 'auto',
[36m(TaskRunner pid=3022421)[0m              'val_before_train': False,
[36m(TaskRunner pid=3022421)[0m              'val_only': False,
[36m(TaskRunner pid=3022421)[0m              'validation_data_dir': None,
[36m(TaskRunner pid=3022421)[0m              'worker_nsight_options': {'capture-range': 'cudaProfilerApi',
[36m(TaskRunner pid=3022421)[0m                                        'capture-range-end': None,
[36m(TaskRunner pid=3022421)[0m                                        'cuda-graph-trace': 'graph',
[36m(TaskRunner pid=3022421)[0m                                        'cuda-memory-usage': 'true',
[36m(TaskRunner pid=3022421)[0m                                        'kill': 'none',
[36m(TaskRunner pid=3022421)[0m                                        'trace': 'cuda,nvtx,cublas,ucx'}}}
[36m(TaskRunner pid=3022421)[0m 2025-08-23 21:15:48.287126: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
[36m(TaskRunner pid=3022421)[0m 2025-08-23 21:15:48.303779: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:485] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered
[36m(TaskRunner pid=3022421)[0m 2025-08-23 21:15:48.320149: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:8454] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered
[36m(TaskRunner pid=3022421)[0m 2025-08-23 21:15:48.324146: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1452] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered
[36m(TaskRunner pid=3022421)[0m 2025-08-23 21:15:48.335703: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
[36m(TaskRunner pid=3022421)[0m To enable the following instructions: AVX2 AVX512F AVX512_VNNI AVX512_BF16 AVX512_FP16 AVX_VNNI AMX_TILE AMX_INT8 AMX_BF16 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
[36m(TaskRunner pid=3022421)[0m 2025-08-23 21:15:49.216160: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT
[36m(TaskRunner pid=3022421)[0m Using dataset class: RLHFDataset
[36m(TaskRunner pid=3022421)[0m Setting TOKENIZERS_PARALLELISM=false for forked processes.
[36m(TaskRunner pid=3022421)[0m WARNING:2025-08-23 21:15:53,021:Setting TOKENIZERS_PARALLELISM=false for forked processes.
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):   0%|          | 0/1914690 [00:00<?, ? examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):   0%|          | 1000/1914690 [00:01<35:46, 891.42 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):   0%|          | 3000/1914690 [00:01<10:58, 2904.99 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):   0%|          | 7000/1914690 [00:01<04:26, 7151.25 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):   1%|          | 13000/1914690 [00:01<02:11, 14444.05 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):   1%|          | 18000/1914690 [00:01<01:39, 19129.25 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):   1%|▏         | 27000/1914690 [00:01<01:07, 28111.57 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):   2%|▏         | 37000/1914690 [00:02<00:46, 40190.01 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):   2%|▏         | 43000/1914690 [00:02<00:42, 44017.59 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):   3%|▎         | 53000/1914690 [00:02<00:35, 51910.18 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):   3%|▎         | 67000/1914690 [00:02<00:26, 70241.30 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):   4%|▍         | 76000/1914690 [00:02<00:24, 73858.65 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):   5%|▍         | 87000/1914690 [00:02<00:24, 75826.33 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):   5%|▌         | 105000/1914690 [00:02<00:18, 99987.92 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):   6%|▌         | 116000/1914690 [00:02<00:20, 88986.20 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):   7%|▋         | 134000/1914690 [00:02<00:16, 108946.15 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):   8%|▊         | 151000/1914690 [00:03<00:16, 109061.12 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):   9%|▉         | 174000/1914690 [00:03<00:13, 133173.36 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  10%|▉         | 191000/1914690 [00:03<00:12, 142231.75 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  11%|█         | 206000/1914690 [00:03<00:13, 128828.34 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  12%|█▏        | 232000/1914690 [00:03<00:10, 156472.60 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  13%|█▎        | 252000/1914690 [00:03<00:11, 145881.89 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  15%|█▍        | 283000/1914690 [00:03<00:09, 179558.96 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  16%|█▌        | 304000/1914690 [00:03<00:08, 185191.49 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  17%|█▋        | 324000/1914690 [00:04<00:09, 168664.65 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  19%|█▊        | 355000/1914690 [00:04<00:07, 202694.16 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  20%|█▉        | 381000/1914690 [00:04<00:07, 209258.16 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  21%|██▏       | 407000/1914690 [00:04<00:06, 222452.27 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  22%|██▏       | 430000/1914690 [00:04<00:06, 220002.65 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  24%|██▎       | 453000/1914690 [00:04<00:06, 219137.82 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  25%|██▌       | 481000/1914690 [00:04<00:06, 235608.36 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  26%|██▋       | 505000/1914690 [00:04<00:06, 220421.71 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  28%|██▊       | 532000/1914690 [00:05<00:06, 215828.84 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  30%|██▉       | 565000/1914690 [00:05<00:05, 235962.92 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  31%|███       | 589000/1914690 [00:05<00:05, 229883.45 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  32%|███▏      | 613000/1914690 [00:05<00:05, 225311.38 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  33%|███▎      | 640000/1914690 [00:05<00:05, 235473.70 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  35%|███▍      | 664000/1914690 [00:05<00:05, 227537.54 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  36%|███▌      | 687000/1914690 [00:05<00:05, 215932.26 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  37%|███▋      | 714000/1914690 [00:05<00:05, 227974.11 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  39%|███▊      | 738000/1914690 [00:05<00:05, 229733.62 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  40%|███▉      | 762000/1914690 [00:06<00:05, 221851.39 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  41%|████      | 789000/1914690 [00:06<00:04, 228824.07 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  43%|████▎     | 815000/1914690 [00:06<00:04, 236897.83 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  44%|████▍     | 839000/1914690 [00:06<00:04, 232017.76 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  45%|████▌     | 863000/1914690 [00:06<00:04, 230886.38 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  46%|████▋     | 890000/1914690 [00:06<00:04, 237119.99 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  48%|████▊     | 914000/1914690 [00:06<00:04, 235645.70 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  49%|████▉     | 938000/1914690 [00:06<00:04, 226809.06 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  50%|█████     | 966000/1914690 [00:06<00:04, 235393.08 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  52%|█████▏    | 992000/1914690 [00:06<00:03, 240270.18 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  53%|█████▎    | 1017000/1914690 [00:07<00:03, 231726.74 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  54%|█████▍    | 1041000/1914690 [00:07<00:03, 227361.27 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  56%|█████▌    | 1066000/1914690 [00:07<00:03, 233073.21 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  57%|█████▋    | 1090000/1914690 [00:07<00:03, 234930.09 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  58%|█████▊    | 1114000/1914690 [00:07<00:03, 223722.12 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  59%|█████▉    | 1139000/1914690 [00:07<00:03, 227178.35 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  61%|██████    | 1162000/1914690 [00:07<00:03, 226535.81 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  62%|██████▏   | 1190000/1914690 [00:07<00:03, 233661.47 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  64%|██████▎   | 1216000/1914690 [00:07<00:02, 239303.15 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  65%|██████▍   | 1240000/1914690 [00:08<00:02, 233454.01 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  66%|██████▌   | 1267000/1914690 [00:08<00:02, 241262.81 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  67%|██████▋   | 1292000/1914690 [00:08<00:02, 231776.28 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  69%|██████▉   | 1318000/1914690 [00:08<00:02, 235940.54 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  70%|███████   | 1343000/1914690 [00:08<00:02, 232786.17 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  71%|███████▏  | 1369000/1914690 [00:08<00:02, 236512.80 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  73%|███████▎  | 1393000/1914690 [00:08<00:02, 236382.52 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  74%|███████▍  | 1417000/1914690 [00:08<00:02, 235198.63 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  75%|███████▌  | 1443000/1914690 [00:08<00:02, 234116.46 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  77%|███████▋  | 1468000/1914690 [00:09<00:01, 237800.28 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  78%|███████▊  | 1491868/1914690 [00:09<00:01, 231437.13 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  79%|███████▉  | 1517604/1914690 [00:09<00:01, 238658.05 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  81%|████████  | 1542340/1914690 [00:09<00:01, 239951.75 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  82%|████████▏ | 1567340/1914690 [00:09<00:01, 220088.32 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  83%|████████▎ | 1590340/1914690 [00:09<00:01, 216781.25 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  84%|████████▍ | 1612340/1914690 [00:09<00:01, 214945.34 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  85%|████████▌ | 1634208/1914690 [00:09<00:01, 211410.89 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  86%|████████▋ | 1655679/1914690 [00:09<00:01, 203088.36 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  88%|████████▊ | 1676147/1914690 [00:10<00:01, 196227.51 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  89%|████████▊ | 1696147/1914690 [00:10<00:01, 180945.44 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  90%|████████▉ | 1715014/1914690 [00:10<00:01, 177498.06 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  91%|█████████ | 1733881/1914690 [00:10<00:01, 166855.25 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  91%|█████████▏| 1750748/1914690 [00:10<00:01, 158245.85 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  92%|█████████▏| 1766748/1914690 [00:10<00:00, 155132.24 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  93%|█████████▎| 1782615/1914690 [00:10<00:00, 154240.19 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  94%|█████████▍| 1798482/1914690 [00:10<00:00, 141153.53 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  95%|█████████▍| 1813083/1914690 [00:11<00:00, 132614.67 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  95%|█████████▌| 1826552/1914690 [00:11<00:00, 133005.68 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  96%|█████████▌| 1840286/1914690 [00:11<00:00, 118909.50 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  97%|█████████▋| 1853153/1914690 [00:11<00:00, 100178.92 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  97%|█████████▋| 1863887/1914690 [00:11<00:00, 90632.94 examples/s] 
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  98%|█████████▊| 1873754/1914690 [00:11<00:00, 80648.26 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  98%|█████████▊| 1882754/1914690 [00:11<00:00, 70670.61 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  99%|█████████▊| 1890754/1914690 [00:12<00:00, 63773.80 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  99%|█████████▉| 1897754/1914690 [00:12<00:00, 59231.62 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  99%|█████████▉| 1904355/1914690 [00:12<00:00, 57968.49 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40): 100%|█████████▉| 1911222/1914690 [00:12<00:00, 49876.53 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40): 100%|██████████| 1914690/1914690 [00:12<00:00, 149031.10 examples/s]
[36m(TaskRunner pid=3022421)[0m Setting TOKENIZERS_PARALLELISM=false for forked processes.
[36m(TaskRunner pid=3022421)[0m WARNING:2025-08-23 21:16:06,484:Setting TOKENIZERS_PARALLELISM=false for forked processes.
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):   0%|          | 0/629183 [00:00<?, ? examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):   0%|          | 1000/629183 [00:01<11:35, 903.48 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):   0%|          | 3000/629183 [00:01<03:24, 3054.88 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):   1%|          | 6000/629183 [00:01<01:35, 6523.16 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):   2%|▏         | 11000/629183 [00:01<00:46, 13337.10 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):   2%|▏         | 15000/629183 [00:01<00:36, 16937.97 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):   4%|▍         | 25000/629183 [00:01<00:18, 32079.57 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):   5%|▌         | 32000/629183 [00:01<00:16, 37126.27 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):   7%|▋         | 45000/629183 [00:01<00:10, 55723.04 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):   9%|▊         | 55000/629183 [00:02<00:09, 59844.10 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  11%|█▏        | 71000/629183 [00:02<00:06, 80854.02 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  13%|█▎        | 84000/629183 [00:02<00:06, 83057.60 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  17%|█▋        | 104000/629183 [00:02<00:05, 104475.90 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  19%|█▉        | 119000/629183 [00:02<00:04, 105918.97 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  21%|██▏       | 134000/629183 [00:02<00:04, 106722.86 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  24%|██▍       | 154000/629183 [00:02<00:03, 120964.17 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  30%|██▉       | 187000/629183 [00:03<00:02, 165553.91 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  32%|███▏      | 204460/629183 [00:03<00:02, 148414.15 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  37%|███▋      | 231920/629183 [00:03<00:02, 177078.94 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  40%|███▉      | 251650/629183 [00:03<00:02, 156383.83 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  44%|████▍     | 278110/629183 [00:03<00:01, 181666.42 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  47%|████▋     | 297840/629183 [00:03<00:02, 157687.39 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  51%|█████▏    | 323570/629183 [00:03<00:01, 176088.57 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  55%|█████▍    | 343030/629183 [00:03<00:01, 158658.26 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  58%|█████▊    | 367490/629183 [00:04<00:01, 150627.65 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  63%|██████▎   | 396220/629183 [00:04<00:01, 179592.19 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  66%|██████▌   | 416680/629183 [00:04<00:01, 181946.19 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  69%|██████▉   | 436410/629183 [00:04<00:01, 173518.39 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  72%|███████▏  | 455140/629183 [00:04<00:00, 175443.28 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  75%|███████▌  | 473600/629183 [00:04<00:00, 171007.65 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  78%|███████▊  | 491600/629183 [00:04<00:00, 162548.89 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  81%|████████  | 509060/629183 [00:04<00:00, 163178.08 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  84%|████████▎ | 526519/629183 [00:05<00:00, 152981.88 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  86%|████████▌ | 542248/629183 [00:05<00:00, 143553.48 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  89%|████████▊ | 556977/629183 [00:05<00:00, 131932.55 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  91%|█████████ | 570435/629183 [00:05<00:00, 122713.67 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  93%|█████████▎| 583164/629183 [00:05<00:00, 114298.69 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  95%|█████████▍| 594893/629183 [00:05<00:00, 98615.16 examples/s] 
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  96%|█████████▌| 605351/629183 [00:05<00:00, 93688.68 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  98%|█████████▊| 615809/629183 [00:06<00:00, 80767.09 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40):  99%|█████████▉| 624725/629183 [00:06<00:00, 60564.68 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=40): 100%|██████████| 629183/629183 [00:06<00:00, 93143.56 examples/s]
[36m(TaskRunner pid=3022421)[0m dataset len: 2271293
[36m(TaskRunner pid=3022421)[0m Using dataset class: RLHFDataset
[36m(TaskRunner pid=3022421)[0m num_proc must be <= 10. Reducing num_proc to 10 for dataset of size 10.
[36m(TaskRunner pid=3022421)[0m WARNING:2025-08-23 21:16:13,828:num_proc must be <= 10. Reducing num_proc to 10 for dataset of size 10.
[36m(TaskRunner pid=3022421)[0m Setting TOKENIZERS_PARALLELISM=false for forked processes.
[36m(TaskRunner pid=3022421)[0m WARNING:2025-08-23 21:16:13,829:Setting TOKENIZERS_PARALLELISM=false for forked processes.
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=10):   0%|          | 0/10 [00:00<?, ? examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=10):  10%|█         | 1/10 [00:00<00:05,  1.79 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=10):  30%|███       | 3/10 [00:00<00:01,  5.34 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=10):  50%|█████     | 5/10 [00:00<00:00,  7.45 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=10):  70%|███████   | 7/10 [00:01<00:00,  8.90 examples/s]
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=10):  90%|█████████ | 9/10 [00:01<00:00, 10.01 examples/s]
[36m(TaskRunner pid=3022421)[0m dataset len: 9
[36m(TaskRunner pid=3022421)[0m [validate_config] All configuration checks passed successfully!
[36m(TaskRunner pid=3022421)[0m Filter (num_proc=10): 100%|██████████| 10/10 [00:01<00:00,  7.25 examples/s]
[36m(TaskRunner pid=3022421)[0m Size of train dataloader: 2218, Size of val dataloader: 1
[36m(TaskRunner pid=3022421)[0m Total training steps: 2218
[36m(TaskRunner pid=3022421)[0m colocated worker base class <class 'verl.single_controller.base.worker.Worker'>
[36m(TaskRunner pid=3022421)[0m DeprecationWarning: `ray.state.available_resources_per_node` is a private attribute and access will be removed in a future Ray version.
[36m(TaskRunner pid=3022421)[0m WARNING:2025-08-23 21:16:16,069:Waiting for register center actor 3LGhYn_register_center to be ready. Elapsed time: 0 seconds out of 300 seconds.
[36m(pid=3034355)[0m 2025-08-23 21:16:22.264814: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
[36m(pid=3034355)[0m 2025-08-23 21:16:22.280167: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:485] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered
[36m(pid=3034355)[0m 2025-08-23 21:16:22.297612: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:8454] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered
[36m(pid=3034355)[0m 2025-08-23 21:16:22.302668: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1452] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered
[36m(pid=3034355)[0m 2025-08-23 21:16:22.316255: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
[36m(pid=3034355)[0m To enable the following instructions: AVX2 AVX512F AVX512_VNNI AVX512_BF16 AVX512_FP16 AVX_VNNI AMX_TILE AMX_INT8 AMX_BF16 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
[36m(pid=3034355)[0m 2025-08-23 21:16:23.258139: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT
[36m(pid=3034696)[0m 2025-08-23 21:16:34.459825: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
[36m(pid=3034696)[0m 2025-08-23 21:16:34.475184: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:485] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered
[36m(pid=3034696)[0m 2025-08-23 21:16:34.492576: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:8454] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered
[36m(pid=3034696)[0m 2025-08-23 21:16:34.497664: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1452] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered
[36m(pid=3034696)[0m 2025-08-23 21:16:34.510971: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
[36m(pid=3034696)[0m To enable the following instructions: AVX2 AVX512F AVX512_VNNI AVX512_BF16 AVX512_FP16 AVX_VNNI AMX_TILE AMX_INT8 AMX_BF16 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
[36m(pid=3034693)[0m 2025-08-23 21:16:34.933251: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
[36m(pid=3034693)[0m 2025-08-23 21:16:34.948464: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:485] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered
[36m(pid=3034693)[0m 2025-08-23 21:16:34.965766: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:8454] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered
[36m(pid=3034693)[0m 2025-08-23 21:16:34.970772: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1452] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered
[36m(pid=3034696)[0m 2025-08-23 21:16:35.485917: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT
[36m(WorkerDict pid=3034698)[0m You are attempting to use Flash Attention 2.0 with a model not initialized on GPU. Make sure to move the model to GPU after initializing it on CPU with `model.to('cuda')`.
[36m(WorkerDict pid=3034698)[0m Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s]
[36m(WorkerDict pid=3034355)[0m Model config after override: Olmo2Config {
[36m(WorkerDict pid=3034355)[0m   "architectures": [
[36m(WorkerDict pid=3034355)[0m     "Olmo2ForCausalLM"
[36m(WorkerDict pid=3034355)[0m   ],
[36m(WorkerDict pid=3034355)[0m   "attention_bias": false,
[36m(WorkerDict pid=3034355)[0m   "attention_dropout": 0.0,
[36m(WorkerDict pid=3034355)[0m   "bos_token_id": 100257,
[36m(WorkerDict pid=3034355)[0m   "eos_token_id": 100257,
[36m(WorkerDict pid=3034355)[0m   "hidden_act": "silu",
[36m(WorkerDict pid=3034355)[0m   "hidden_size": 2048,
[36m(WorkerDict pid=3034355)[0m   "initializer_range": 0.02,
[36m(WorkerDict pid=3034355)[0m   "intermediate_size": 8192,
[36m(WorkerDict pid=3034355)[0m   "max_position_embeddings": 4096,
[36m(WorkerDict pid=3034355)[0m   "model_type": "olmo2",
[36m(WorkerDict pid=3034355)[0m   "num_attention_heads": 16,
[36m(WorkerDict pid=3034355)[0m   "num_hidden_layers": 16,
[36m(WorkerDict pid=3034355)[0m   "num_key_value_heads": 16,
[36m(WorkerDict pid=3034355)[0m   "pad_token_id": 100277,
[36m(WorkerDict pid=3034355)[0m   "rms_norm_eps": 1e-06,
[36m(WorkerDict pid=3034355)[0m   "rope_scaling": null,
[36m(WorkerDict pid=3034355)[0m   "rope_theta": 500000,
[36m(WorkerDict pid=3034355)[0m   "tie_word_embeddings": false,
[36m(WorkerDict pid=3034355)[0m   "torch_dtype": "float32",
[36m(WorkerDict pid=3034355)[0m   "transformers_version": "4.51.1",
[36m(WorkerDict pid=3034355)[0m   "use_cache": true,
[36m(WorkerDict pid=3034355)[0m   "vocab_size": 100352
[36m(WorkerDict pid=3034355)[0m }
[36m(WorkerDict pid=3034355)[0m 
[36m(pid=3034697)[0m 2025-08-23 21:16:36.107567: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.[32m [repeated 6x across cluster] (Ray deduplicates logs by default. Set RAY_DEDUP_LOGS=0 to disable log deduplication, or see https://docs.ray.io/en/master/ray-observability/user-guides/configure-logging.html#log-deduplication for more options.)[0m
[36m(pid=3034697)[0m To enable the following instructions: AVX2 AVX512F AVX512_VNNI AVX512_BF16 AVX512_FP16 AVX_VNNI AMX_TILE AMX_INT8 AMX_BF16 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.[32m [repeated 6x across cluster][0m
[36m(pid=3034697)[0m 2025-08-23 21:16:36.055776: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.[32m [repeated 5x across cluster][0m
[36m(pid=3034697)[0m 2025-08-23 21:16:36.071557: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:485] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered[32m [repeated 5x across cluster][0m
[36m(pid=3034697)[0m 2025-08-23 21:16:36.088809: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:8454] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered[32m [repeated 5x across cluster][0m
[36m(pid=3034697)[0m 2025-08-23 21:16:36.093805: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1452] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered[32m [repeated 5x across cluster][0m
[36m(pid=3034697)[0m 2025-08-23 21:16:37.099560: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT[32m [repeated 6x across cluster][0m
[36m(WorkerDict pid=3034698)[0m Loading checkpoint shards:  50%|█████     | 1/2 [00:01<00:01,  1.92s/it]
[36m(WorkerDict pid=3034698)[0m Monkey patch _flash_attention_forward in transformers.integrations.flash_attention
[36m(WorkerDict pid=3034698)[0m Skipping monkey patch for Olmo2ForCausalLM as use_fused_kernels is False or fused_kernels_backend is torch
[36m(WorkerDict pid=3034698)[0m Loading checkpoint shards: 100%|██████████| 2/2 [00:02<00:00,  1.02s/it]Loading checkpoint shards: 100%|██████████| 2/2 [00:02<00:00,  1.15s/it]
[36m(WorkerDict pid=3034355)[0m Olmo2ForCausalLM contains 1.48B parameters
[36m(WorkerDict pid=3034355)[0m wrap_policy: functools.partial(<function _or_policy at 0x7bd6d63d2b90>, policies=[functools.partial(<function transformer_auto_wrap_policy at 0x7bd6d63d2a70>, transformer_layer_cls={<class 'transformers.models.olmo2.modeling_olmo2.Olmo2DecoderLayer'>})])
[36m(WorkerDict pid=3034355)[0m NCCL version 2.21.5+cuda12.4
[36m(WorkerDict pid=3034355)[0m 
[36m(WorkerDict pid=3034355)[0m bolt-f4pdfx26wb-c5cg2sruft:3034355:3036108 [0] /nccl-shim-net/src/guest_config_checker.cc:101 NCCL WARN NCCL/NET (shim) mismatch recommended: NCCL_FASTRAK_LLCM_DEVICE_DIRECTORY=/dev/aperture_devices (expected unset)
[36m(WorkerDict pid=3034355)[0m 
[36m(WorkerDict pid=3034355)[0m bolt-f4pdfx26wb-c5cg2sruft:3034355:3036108 [0] /nccl-shim-net/src/guest_config_checker.cc:101 NCCL WARN NCCL/NET (shim) mismatch recommended: NCCL_LIB_DIR=/usr/local/nvidia/lib64 (expected unset)
[36m(WorkerDict pid=3034355)[0m 
[36m(WorkerDict pid=3034355)[0m bolt-f4pdfx26wb-c5cg2sruft:3034355:3036108 [0] /nccl-shim-net/src/guest_config_checker.cc:101 NCCL WARN NCCL/NET (shim) mismatch recommended: NCCL_DYNAMIC_CHUNK_SIZE=524288 (expected unset)
[36m(WorkerDict pid=3034355)[0m 
[36m(WorkerDict pid=3034355)[0m bolt-f4pdfx26wb-c5cg2sruft:3034355:3036108 [0] /nccl-shim-net/src/guest_config_checker.cc:101 NCCL WARN NCCL/NET (shim) mismatch recommended: NCCL_TESTS_VERSION=2.13.6 (expected unset)
[36m(WorkerDict pid=3034355)[0m 
[36m(WorkerDict pid=3034355)[0m bolt-f4pdfx26wb-c5cg2sruft:3034355:3036108 [0] /nccl-shim-net/src/guest_config_checker.cc:101 NCCL WARN NCCL/NET (shim) mismatch recommended: cpu affinity settings not subset, curr=0xffff,ffffffff,ffffffff,ffffffff,ffffffff,ffffffff,ffffffff (expected 0xffffffff,00000000)
[36m(WorkerDict pid=3034698)[0m 
[36m(WorkerDict pid=3034698)[0m 
[36m(WorkerDict pid=3034698)[0m 
[36m(WorkerDict pid=3034698)[0m 
[36m(WorkerDict pid=3034698)[0m 
[36m(WorkerDict pid=3034697)[0m 
[36m(WorkerDict pid=3034697)[0m 
[36m(WorkerDict pid=3034697)[0m 
[36m(WorkerDict pid=3034697)[0m 
[36m(WorkerDict pid=3034697)[0m 
[36m(WorkerDict pid=3034693)[0m 
[36m(WorkerDict pid=3034693)[0m 
[36m(WorkerDict pid=3034693)[0m 
[36m(WorkerDict pid=3034693)[0m 
[36m(WorkerDict pid=3034693)[0m 
[36m(WorkerDict pid=3034696)[0m 
[36m(WorkerDict pid=3034696)[0m 
[36m(WorkerDict pid=3034696)[0m 
[36m(WorkerDict pid=3034696)[0m 
[36m(WorkerDict pid=3034696)[0m 
[36m(WorkerDict pid=3034695)[0m 
[36m(WorkerDict pid=3034695)[0m 
[36m(WorkerDict pid=3034695)[0m 
[36m(WorkerDict pid=3034695)[0m 
[36m(WorkerDict pid=3034695)[0m 
[36m(WorkerDict pid=3034699)[0m 
[36m(WorkerDict pid=3034699)[0m 
[36m(WorkerDict pid=3034699)[0m 
[36m(WorkerDict pid=3034699)[0m 
[36m(WorkerDict pid=3034699)[0m 
[36m(WorkerDict pid=3034694)[0m 
[36m(WorkerDict pid=3034694)[0m 
[36m(WorkerDict pid=3034694)[0m 
[36m(WorkerDict pid=3034694)[0m 
[36m(WorkerDict pid=3034694)[0m 
[36m(WorkerDict pid=3034355)[0m 
[36m(WorkerDict pid=3034355)[0m bolt-f4pdfx26wb-c5cg2sruft:3034355:3036108 [0] /nccl-tuner-config-based/src/config_based_tuner.cc:155 NCCL WARN Cannot find communicatorTunerConfig for communicator(num_node:1, num_rank:8) with config:communicator_configs {
[36m(WorkerDict pid=3034355)[0m   node_range {
[36m(WorkerDict pid=3034355)[0m     min: 2
[36m(WorkerDict pid=3034355)[0m     max: 3
[36m(WorkerDict pid=3034355)[0m   }
[36m(WorkerDict pid=3034355)[0m   rank_per_node_range {
[36m(WorkerDict pid=3034355)[0m     min: 1
[36m(WorkerDict pid=3034355)[0m     max: 2
[36m(WorkerDict pid=3034355)[0m   }
[36m(WorkerDict pid=3034355)[0m   coll_configs {
[36m(WorkerDict pid=3034355)[0m     coll_type: COLL_ALL_REDUCE
[36m(WorkerDict pid=3034355)[0m     msg_size_tuning_rules {
[36m(WorkerDict pid=3034355)[0m       per_rank_message_size {
[36m(WorkerDict pid=3034355)[0m         min: 0
[36m(WorkerDict pid=3034355)[0m       }
[36m(WorkerDict pid=3034355)[0m       coll_tuning_spec {
[36m(WorkerDict pid=3034355)[0m         num_channel: 2
[36m(WorkerDict pid=3034355)[0m         protocol: PROTO_SIMPLE
[36m(WorkerDict pid=3034355)[0m         algorithm: ALGO_TREE
[36m(WorkerDict pid=3034355)[0m       }
[36m(WorkerDict pid=3034355)[0m     }
[36m(WorkerDict pid=3034355)[0m   }
[36m(WorkerDict pid=3034355)[0m   coll_configs {
[36m(WorkerDict pid=3034355)[0m     coll_type: COLL_DEFAULT
[36m(WorkerDict pid=3034355)[0m     msg_size_tuning_rules {
[36m(WorkerDict pid=3034355)[0m       per_rank_message_size {
[36m(WorkerDict pid=3034355)[0m         min: 0
[36m(WorkerDict pid=3034355)[0m         max: 65536
[36m(WorkerDict pid=3034355)[0m       }
[36m(WorkerDict pid=3034355)[0m       coll_tuning_spec {
[36m(WorkerDict pid=3034355)[0m         num_channel: 2
[36m(WorkerDict pid=3034355)[0m         protocol: PROTO_SIMPLE
[36m(WorkerDict pid=3034355)[0m         algorithm: ALGO_RING
[36m(WorkerDict pid=3034355)[0m       }
[36m(WorkerDict pid=3034355)[0m     }
[36m(WorkerDict pid=3034355)[0m     msg_size_tuning_rules {
[36m(WorkerDict pid=3034355)[0m       per_rank_message_size {
[36m(WorkerDict pid=3034355)[0m         min: 65536
[36m(WorkerDict pid=3034355)[0m       }
[36m(WorkerDict pid=3034355)[0m       coll_tuning_spec {
[36m(WorkerDict pid=3034355)[0m         num_channel: 4
[36m(WorkerDict pid=3034355)[0m         protocol: PROTO_SIMPLE
[36m(WorkerDict pid=3034355)[0m         algorithm: AL
[36m(WorkerDict pid=3034355)[0m 
[36m(WorkerDict pid=3034355)[0m bolt-f4pdfx26wb-c5cg2sruft:3034355:3036108 [0] /nccl-tuner-config-based/src/config_based_tuner.cc:271 NCCL WARN No communicator config selected from config:communicator_configs {
[36m(WorkerDict pid=3034355)[0m   node_range {
[36m(WorkerDict pid=3034355)[0m     min: 2
[36m(WorkerDict pid=3034355)[0m     max: 3
[36m(WorkerDict pid=3034355)[0m   }
[36m(WorkerDict pid=3034355)[0m   rank_per_node_range {
[36m(WorkerDict pid=3034355)[0m     min: 1
[36m(WorkerDict pid=3034355)[0m     max: 2
[36m(WorkerDict pid=3034355)[0m   }
[36m(WorkerDict pid=3034355)[0m   coll_configs {
[36m(WorkerDict pid=3034355)[0m     coll_type: COLL_ALL_REDUCE
[36m(WorkerDict pid=3034355)[0m     msg_size_tuning_rules {
[36m(WorkerDict pid=3034355)[0m       per_rank_message_size {
[36m(WorkerDict pid=3034355)[0m         min: 0
[36m(WorkerDict pid=3034355)[0m       }
[36m(WorkerDict pid=3034355)[0m       coll_tuning_spec {
[36m(WorkerDict pid=3034355)[0m         num_channel: 2
[36m(WorkerDict pid=3034355)[0m         protocol: PROTO_SIMPLE
[36m(WorkerDict pid=3034355)[0m         algorithm: ALGO_TREE
[36m(WorkerDict pid=3034355)[0m       }
[36m(WorkerDict pid=3034355)[0m     }
[36m(WorkerDict pid=3034355)[0m   }
[36m(WorkerDict pid=3034355)[0m   coll_configs {
[36m(WorkerDict pid=3034355)[0m     coll_type: COLL_DEFAULT
[36m(WorkerDict pid=3034355)[0m     msg_size_tuning_rules {
[36m(WorkerDict pid=3034355)[0m       per_rank_message_size {
[36m(WorkerDict pid=3034355)[0m         min: 0
[36m(WorkerDict pid=3034355)[0m         max: 65536
[36m(WorkerDict pid=3034355)[0m       }
[36m(WorkerDict pid=3034355)[0m       coll_tuning_spec {
[36m(WorkerDict pid=3034355)[0m         num_channel: 2
[36m(WorkerDict pid=3034355)[0m         protocol: PROTO_SIMPLE
[36m(WorkerDict pid=3034355)[0m         algorithm: ALGO_RING
[36m(WorkerDict pid=3034355)[0m       }
[36m(WorkerDict pid=3034355)[0m     }
[36m(WorkerDict pid=3034355)[0m     msg_size_tuning_rules {
[36m(WorkerDict pid=3034355)[0m       per_rank_message_size {
[36m(WorkerDict pid=3034355)[0m         min: 65536
[36m(WorkerDict pid=3034355)[0m       }
[36m(WorkerDict pid=3034355)[0m       coll_tuning_spec {
[36m(WorkerDict pid=3034355)[0m         num_channel: 4
[36m(WorkerDict pid=3034355)[0m         protocol: PROTO_SIMPLE
[36m(WorkerDict pid=3034355)[0m         algorithm: ALGO_RING
[36m(WorkerDict pid=3034355)[0m       }
[36m(WorkerDict pid=3034355)[0m     }
[36m(WorkerDict pid=3034355)[0m   }
[36m(WorkerDict pid=3034355)[0m }
[36m(WorkerDict pid=3034355)[0m communicator_conf
[36m(WorkerDict pid=3034355)[0m 
[36m(WorkerDict pid=3034355)[0m bolt-f4pdfx26wb-c5cg2sruft:3034355:3036108 [0] /nccl-tuner-config-based/src/tuner_tcpx.cc:70 NCCL WARN No communicator found for nRanks:8, nNodes:1 from config_path:/usr/local/nvidia/lib64/a3plus_tuner_config.textproto
[36m(WorkerDict pid=3034355)[0m Monkey patch _flash_attention_forward in transformers.integrations.flash_attention[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=3034355)[0m Skipping monkey patch for Olmo2ForCausalLM as use_fused_kernels is False or fused_kernels_backend is torch[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=3034694)[0m bolt-f4pdfx26wb-c5cg2sruft:3034694:3036118 [0] /nccl-shim-net/src/guest_config_checker.cc:101 NCCL WARN NCCL/NET (shim) mismatch recommended: NCCL_FASTRAK_LLCM_DEVICE_DIRECTORY=/dev/aperture_devices (expected unset)[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=3034694)[0m bolt-f4pdfx26wb-c5cg2sruft:3034694:3036118 [0] /nccl-shim-net/src/guest_config_checker.cc:101 NCCL WARN NCCL/NET (shim) mismatch recommended: NCCL_TESTS_VERSION=2.13.6 (expected unset)[32m [repeated 21x across cluster][0m
[36m(WorkerDict pid=3034694)[0m bolt-f4pdfx26wb-c5cg2sruft:3034694:3036118 [0] /nccl-shim-net/src/guest_config_checker.cc:101 NCCL WARN NCCL/NET (shim) mismatch recommended: cpu affinity settings not subset, curr=0xffff,ffffffff,ffffffff,ffffffff,ffffffff,ffffffff,ffffffff (expected 0xffffffff,00000000)[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=3034694)[0m 
[36m(WorkerDict pid=3034694)[0m   }
[36m(WorkerDict pid=3034694)[0m   }
[36m(WorkerDict pid=3034694)[0m       }
[36m(WorkerDict pid=3034694)[0m       }
[36m(WorkerDict pid=3034694)[0m     }
[36m(WorkerDict pid=3034694)[0m   }
[36m(WorkerDict pid=3034694)[0m       }
[36m(WorkerDict pid=3034694)[0m       }
[36m(WorkerDict pid=3034694)[0m     }
[36m(WorkerDict pid=3034694)[0m       }
[36m(WorkerDict pid=3034694)[0m 
[36m(WorkerDict pid=3034694)[0m   }
[36m(WorkerDict pid=3034694)[0m   }
[36m(WorkerDict pid=3034694)[0m       }
[36m(WorkerDict pid=3034694)[0m       }
[36m(WorkerDict pid=3034694)[0m     }
[36m(WorkerDict pid=3034694)[0m   }
[36m(WorkerDict pid=3034694)[0m       }
[36m(WorkerDict pid=3034694)[0m       }
[36m(WorkerDict pid=3034694)[0m     }
[36m(WorkerDict pid=3034694)[0m       }
[36m(WorkerDict pid=3034694)[0m       }
[36m(WorkerDict pid=3034694)[0m     }
[36m(WorkerDict pid=3034694)[0m   }
[36m(WorkerDict pid=3034694)[0m }
[36m(WorkerDict pid=3034694)[0m 
[36m(WorkerDict pid=3034698)[0m 
[36m(WorkerDict pid=3034698)[0m 
[36m(WorkerDict pid=3034698)[0m 
[36m(WorkerDict pid=3034693)[0m 
[36m(WorkerDict pid=3034693)[0m 
[36m(WorkerDict pid=3034693)[0m 
[36m(WorkerDict pid=3034696)[0m 
[36m(WorkerDict pid=3034696)[0m 
[36m(WorkerDict pid=3034696)[0m 
[36m(WorkerDict pid=3034697)[0m 
[36m(WorkerDict pid=3034697)[0m 
[36m(WorkerDict pid=3034697)[0m 
[36m(WorkerDict pid=3034695)[0m 
[36m(WorkerDict pid=3034695)[0m 
[36m(WorkerDict pid=3034695)[0m 
[36m(WorkerDict pid=3034699)[0m 
[36m(WorkerDict pid=3034699)[0m 
[36m(WorkerDict pid=3034699)[0m 
[36m(WorkerDict pid=3034355)[0m Actor use_remove_padding=True
[36m(WorkerDict pid=3034355)[0m Actor use_fused_kernels=False
[36m(WorkerDict pid=3034355)[0m Model config after override: Olmo2Config {
[36m(WorkerDict pid=3034355)[0m   "architectures": [
[36m(WorkerDict pid=3034355)[0m     "Olmo2ForCausalLM"
[36m(WorkerDict pid=3034355)[0m   ],
[36m(WorkerDict pid=3034355)[0m   "attention_bias": false,
[36m(WorkerDict pid=3034355)[0m   "attention_dropout": 0.0,
[36m(WorkerDict pid=3034355)[0m   "bos_token_id": 100257,
[36m(WorkerDict pid=3034355)[0m   "eos_token_id": 100257,
[36m(WorkerDict pid=3034355)[0m   "hidden_act": "silu",
[36m(WorkerDict pid=3034355)[0m   "hidden_size": 2048,
[36m(WorkerDict pid=3034355)[0m   "initializer_range": 0.02,
[36m(WorkerDict pid=3034355)[0m   "intermediate_size": 8192,
[36m(WorkerDict pid=3034355)[0m   "max_position_embeddings": 4096,
[36m(WorkerDict pid=3034355)[0m   "model_type": "olmo2",
[36m(WorkerDict pid=3034355)[0m   "num_attention_heads": 16,
[36m(WorkerDict pid=3034355)[0m   "num_hidden_layers": 16,
[36m(WorkerDict pid=3034355)[0m   "num_key_value_heads": 16,
[36m(WorkerDict pid=3034355)[0m   "pad_token_id": 100277,
[36m(WorkerDict pid=3034355)[0m   "rms_norm_eps": 1e-06,
[36m(WorkerDict pid=3034355)[0m   "rope_scaling": null,
[36m(WorkerDict pid=3034355)[0m   "rope_theta": 500000,
[36m(WorkerDict pid=3034355)[0m   "tie_word_embeddings": false,
[36m(WorkerDict pid=3034355)[0m   "torch_dtype": "float32",
[36m(WorkerDict pid=3034355)[0m   "transformers_version": "4.51.1",
[36m(WorkerDict pid=3034355)[0m   "use_cache": true,
[36m(WorkerDict pid=3034355)[0m   "vocab_size": 100352
[36m(WorkerDict pid=3034355)[0m 
[36m(WorkerDict pid=3034355)[0m Flash Attention 2.0 only supports torch.float16 and torch.bfloat16 dtypes, but the current dype in Olmo2ForCausalLM is torch.float32. You should run training or inference using Automatic Mixed-Precision via the `with torch.autocast(device_type='torch_device'):` decorator, or load the model with the `torch_dtype` argument. Example: `model = AutoModel.from_pretrained("openai/whisper-tiny", attn_implementation="flash_attention_2", torch_dtype=torch.float16)`
[36m(WorkerDict pid=3034355)[0m You are attempting to use Flash Attention 2.0 with a model not initialized on GPU. Make sure to move the model to GPU after initializing it on CPU with `model.to('cuda')`.[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=3034355)[0m Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s][32m [repeated 8x across cluster][0m
[36m(WorkerDict pid=3034355)[0m Loading checkpoint shards:  50%|█████     | 1/2 [00:02<00:02,  2.09s/it][32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=3034355)[0m Loading checkpoint shards: 100%|██████████| 2/2 [00:02<00:00,  1.09s/it]Loading checkpoint shards: 100%|██████████| 2/2 [00:02<00:00,  1.24s/it][32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=3034698)[0m Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s]Loading checkpoint shards: 100%|██████████| 2/2 [00:00<00:00, 53.48it/s]
[36m(WorkerDict pid=3034693)[0m Loading checkpoint shards: 100%|██████████| 2/2 [00:00<00:00, 47.19it/s]
[36m(WorkerDict pid=3034355)[0m Olmo2ForCausalLM contains 1.48B parameters
[36m(WorkerDict pid=3034355)[0m wrap_policy: functools.partial(<function _or_policy at 0x7bd6d63d2b90>, policies=[functools.partial(<function transformer_auto_wrap_policy at 0x7bd6d63d2a70>, transformer_layer_cls={<class 'transformers.models.olmo2.modeling_olmo2.Olmo2DecoderLayer'>})])
[36m(WorkerDict pid=3034355)[0m Total steps: 2218, num_warmup_steps: 0
[36m(WorkerDict pid=3034355)[0m Actor use_remove_padding=True
[36m(WorkerDict pid=3034355)[0m Actor use_fused_kernels=False
[36m(WorkerDict pid=3034697)[0m   0%|          | 0/23 [00:00<?, ?it/s]Capturing batches (avail_mem=13.93 GB):   0%|          | 0/23 [00:00<?, ?it/s]
[36m(WorkerDict pid=3034695)[0m Flash Attention 2.0 only supports torch.float16 and torch.bfloat16 dtypes, but the current dype in Olmo2ForCausalLM is torch.float32. You should run training or inference using Automatic Mixed-Precision via the `with torch.autocast(device_type='torch_device'):` decorator, or load the model with the `torch_dtype` argument. Example: `model = AutoModel.from_pretrained("openai/whisper-tiny", attn_implementation="flash_attention_2", torch_dtype=torch.float16)`[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=3034699)[0m Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s][32m [repeated 3x across cluster][0m
[36m(WorkerDict pid=3034695)[0m Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s]Loading checkpoint shards: 100%|██████████| 2/2 [00:00<00:00, 52.06it/s][32m [repeated 3x across cluster][0m
[36m(WorkerDict pid=3034699)[0m Loading checkpoint shards: 100%|██████████| 2/2 [00:00<00:00, 47.74it/s][32m [repeated 3x across cluster][0m
[36m(WorkerDict pid=3034694)[0m [2025-08-23 21:17:35] Scheduler hit an exception: Traceback (most recent call last):
[36m(WorkerDict pid=3034694)[0m   File "/usr/local/lib/python3.10/dist-packages/sglang/srt/managers/scheduler.py", line 2230, in run_scheduler_process
[36m(WorkerDict pid=3034694)[0m     scheduler = Scheduler(server_args, port_args, gpu_id, tp_rank, pp_rank, dp_rank)
[36m(WorkerDict pid=3034694)[0m   File "/usr/local/lib/python3.10/dist-packages/sglang/srt/managers/scheduler.py", line 274, in __init__
[36m(WorkerDict pid=3034694)[0m     self.tp_worker = TpWorkerClass(
[36m(WorkerDict pid=3034694)[0m   File "/usr/local/lib/python3.10/dist-packages/sglang/srt/managers/tp_worker_overlap_thread.py", line 64, in __init__
[36m(WorkerDict pid=3034694)[0m     self.worker = TpModelWorker(
[36m(WorkerDict pid=3034694)[0m   File "/usr/local/lib/python3.10/dist-packages/sglang/srt/managers/tp_worker.py", line 78, in __init__
[36m(WorkerDict pid=3034694)[0m     self.model_runner = ModelRunner(
[36m(WorkerDict pid=3034694)[0m   File "/usr/local/lib/python3.10/dist-packages/sglang/srt/model_executor/model_runner.py", line 184, in __init__
[36m(WorkerDict pid=3034694)[0m     min_per_gpu_memory = self.init_torch_distributed()
[36m(WorkerDict pid=3034694)[0m   File "/usr/local/lib/python3.10/dist-packages/sglang/srt/model_executor/model_runner.py", line 386, in init_torch_distributed
[36m(WorkerDict pid=3034694)[0m     init_distributed_environment(
[36m(WorkerDict pid=3034694)[0m   File "/usr/local/lib/python3.10/dist-packages/sglang/srt/distributed/parallel_state.py", line 1073, in init_distributed_environment
[36m(WorkerDict pid=3034694)[0m     torch.distributed.init_process_group(
[36m(WorkerDict pid=3034694)[0m   File "/usr/local/lib/python3.10/dist-packages/torch/distributed/c10d_logger.py", line 81, in wrapper
[36m(WorkerDict pid=3034694)[0m     return func(*args, **kwargs)
[36m(WorkerDict pid=3034694)[0m   File "/usr/local/lib/python3.10/dist-packages/torch/distributed/c10d_logger.py", line 95, in wrapper
[36m(WorkerDict pid=3034694)[0m     func_return = func(*args, **kwargs)
[36m(WorkerDict pid=3034694)[0m   File "/usr/local/lib/python3.10/dist-packages/torch/distributed/distributed_c10d.py", line 1714, in init_process_group
[36m(WorkerDict pid=3034694)[0m     store, rank, world_size = next(rendezvous_iterator)
[36m(WorkerDict pid=3034694)[0m   File "/usr/local/lib/python3.10/dist-packages/torch/distributed/rendezvous.py", line 226, in _tcp_rendezvous_handler
[36m(WorkerDict pid=3034694)[0m     store = _create_c10d_store(
[36m(WorkerDict pid=3034694)[0m   File "/usr/local/lib/python3.10/dist-packages/torch/distributed/rendezvous.py", line 194, in _create_c10d_store
[36m(WorkerDict pid=3034694)[0m     return TCPStore(
[36m(WorkerDict pid=3034694)[0m RuntimeError: The server socket has failed to listen on any local network address. port: 30129, useIpv6: 0, code: -98, name: EADDRINUSE, message: address already in use
[36m(WorkerDict pid=3034694)[0m 
[36m(WorkerDict pid=3034697)[0m Capturing batches (avail_mem=13.93 GB):   4%|▍         | 1/23 [00:00<00:21,  1.04it/s]Capturing batches (avail_mem=13.68 GB):   4%|▍         | 1/23 [00:00<00:21,  1.04it/s]
[36m(WorkerDict pid=3034697)[0m Capturing batches (avail_mem=13.68 GB):   9%|▊         | 2/23 [00:01<00:14,  1.45it/s]Capturing batches (avail_mem=13.57 GB):   9%|▊         | 2/23 [00:01<00:14,  1.45it/s]
[33m(raylet)[0m A worker died or was killed while executing a task by an unexpected system error. To troubleshoot the problem, check the logs for the dead worker. RayTask ID: ffffffffffffffffdaaeae55501736c31e76508201000000 Worker ID: 2c53b2ec437ad1e941e253b17e13fdc37280aafcc0bccb41959d9674 Node ID: 0606408d7328e88c9260a1548c64b46983a155961f6964faa090acbb Worker IP address: 240.18.169.16 Worker port: 39521 Worker PID: 3034694 Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.
[36m(WorkerDict pid=3034699)[0m bolt-f4pdfx26wb-c5cg2sruft:3034699:3036117 [0] /nccl-tuner-config-based/src/config_based_tuner.cc:155 NCCL WARN Cannot find communicatorTunerConfig for communicator(num_node:1, num_rank:8) with config:communicator_configs {[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=3034699)[0m   node_range {[32m [repeated 14x across cluster][0m
[36m(WorkerDict pid=3034699)[0m         min: 65536[32m [repeated 70x across cluster][0m
[36m(WorkerDict pid=3034699)[0m         max: 65536[32m [repeated 42x across cluster][0m
[36m(WorkerDict pid=3034699)[0m   rank_per_node_range {[32m [repeated 14x across cluster][0m
[36m(WorkerDict pid=3034699)[0m   coll_configs {[32m [repeated 28x across cluster][0m
[36m(WorkerDict pid=3034699)[0m     coll_type: COLL_ALL_REDUCE[32m [repeated 14x across cluster][0m
[36m(WorkerDict pid=3034699)[0m     msg_size_tuning_rules {[32m [repeated 42x across cluster][0m
[36m(WorkerDict pid=3034699)[0m       per_rank_message_size {[32m [repeated 42x across cluster][0m
[36m(WorkerDict pid=3034699)[0m       coll_tuning_spec {[32m [repeated 42x across cluster][0m
[36m(WorkerDict pid=3034699)[0m         num_channel: 4[32m [repeated 42x across cluster][0m
[36m(WorkerDict pid=3034699)[0m         protocol: PROTO_SIMPLE[32m [repeated 42x across cluster][0m
[36m(WorkerDict pid=3034699)[0m         algorithm: ALGO_TREE[32m [repeated 14x across cluster][0m
[36m(WorkerDict pid=3034699)[0m     coll_type: COLL_DEFAULT[32m [repeated 14x across cluster][0m
[36m(WorkerDict pid=3034699)[0m         algorithm: ALGO_RING[32m [repeated 21x across cluster][0m
[36m(WorkerDict pid=3034699)[0m         algorithm: AL[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=3034699)[0m bolt-f4pdfx26wb-c5cg2sruft:3034699:3036117 [0] /nccl-tuner-config-based/src/config_based_tuner.cc:271 NCCL WARN No communicator config selected from config:communicator_configs {[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=3034699)[0m communicator_conf[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=3034699)[0m bolt-f4pdfx26wb-c5cg2sruft:3034699:3036117 [0] /nccl-tuner-config-based/src/tuner_tcpx.cc:70 NCCL WARN No communicator found for nRanks:8, nNodes:1 from config_path:/usr/local/nvidia/lib64/a3plus_tuner_config.textproto[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=3034699)[0m Monkey patch _flash_attention_forward in transformers.integrations.flash_attention[32m [repeated 8x across cluster][0m
[36m(WorkerDict pid=3034699)[0m Skipping monkey patch for Olmo2ForCausalLM as use_fused_kernels is False or fused_kernels_backend is torch[32m [repeated 8x across cluster][0m
[36m(WorkerDict pid=3034355)[0m }[32m [repeated 145x across cluster][0m
Error executing job with overrides: ['algorithm.adv_estimator=grpo', 'data.train_batch_size=1024', 'data.max_prompt_length=128', 'data.filter_overlong_prompts=True', 'data.truncation=error', 'data.return_raw_chat=True', 'data.filter_overlong_prompts_workers=40', 'actor_rollout_ref.model.path=/root/.cache/huggingface/hub/models--allenai--OLMo-2-0425-1B/snapshots/a1847dff35000b4271fa70afc5db10fd29fedbdf', '+actor_rollout_ref.actor.ntp_coeff=1.0', 'actor_rollout_ref.actor.optim.lr=2e-6', 'actor_rollout_ref.model.use_remove_padding=True', 'actor_rollout_ref.actor.ppo_mini_batch_size=256', '+actor_rollout_ref.actor.ntp_mini_batch_size=512', 'actor_rollout_ref.actor.ppo_micro_batch_size_per_gpu=32', '+actor_rollout_ref.actor.ntp_micro_batch_size_per_gpu=64', 'actor_rollout_ref.actor.use_kl_loss=False', 'actor_rollout_ref.actor.kl_loss_coef=0.0', 'actor_rollout_ref.actor.entropy_coeff=0.0005', 'actor_rollout_ref.model.enable_gradient_checkpointing=True', 'actor_rollout_ref.actor.fsdp_config.param_offload=False', 'actor_rollout_ref.actor.fsdp_config.optimizer_offload=False', 'actor_rollout_ref.rollout.log_prob_micro_batch_size_per_gpu=80', 'actor_rollout_ref.ref.log_prob_micro_batch_size_per_gpu=80', 'actor_rollout_ref.rollout.tensor_model_parallel_size=1', 'actor_rollout_ref.rollout.name=sglang', 'actor_rollout_ref.rollout.gpu_memory_utilization=0.8', 'actor_rollout_ref.rollout.n=3', 'actor_rollout_ref.rollout.temperature=1.0', '+actor_rollout_ref.rollout.per_turn_response_length=16', '+actor_rollout_ref.rollout.max_code_lines=32', 'actor_rollout_ref.rollout.response_length=1024', 'algorithm.use_kl_in_reward=False', 'trainer.critic_warmup=0', 'trainer.logger=["console","wandb"]', 'trainer.project_name=em-new', 'trainer.experiment_name=openandsyn-ours-80-200-olmo-nowarmup-window3-std-0005entropy-12lenpenalty-nopenalty-alreadynextline-mustsharp', 'trainer.n_gpus_per_node=8', 'trainer.nnodes=1', 'trainer.val_before_train=False', 'trainer.save_freq=100', 'trainer.test_freq=-1', 'trainer.total_epochs=1', '+trainer.q_steps=80', '+trainer.ref_update_freq=200', 'data.train_files=/mnt/task_runtime/opencoder_post.parquet', 'data.val_files=/root/data/real_code/test.parquet', 'actor_rollout_ref.rollout.multi_turn.interaction_config_path=/mnt/task_runtime/verl/examples/sglang_multiturn/config/interaction_config/gsm8k_interaction_config.yaml', 'actor_rollout_ref.rollout.multi_turn.max_user_turns=1']
Traceback (most recent call last):
  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
  File "/mnt/task_runtime/verl/verl/trainer/main_ppo.py", line 344, in <module>
    main()
  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 223, in run_and_report
    raise ex
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 132, in run
    _ = ret.return_value
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 260, in return_value
    raise self._return_value
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
  File "/mnt/task_runtime/verl/verl/trainer/main_ppo.py", line 40, in main
    run_ppo(config)
  File "/mnt/task_runtime/verl/verl/trainer/main_ppo.py", line 74, in run_ppo
    ray.get(runner.run.remote(config))
  File "/usr/local/lib/python3.10/dist-packages/ray/_private/auto_init_hook.py", line 22, in auto_init_wrapper
    return fn(*args, **kwargs)
  File "/usr/local/lib/python3.10/dist-packages/ray/_private/client_mode_hook.py", line 104, in wrapper
    return func(*args, **kwargs)
  File "/usr/local/lib/python3.10/dist-packages/ray/_private/worker.py", line 2858, in get
    values, debugger_breakpoint = worker.get_objects(object_refs, timeout=timeout)
  File "/usr/local/lib/python3.10/dist-packages/ray/_private/worker.py", line 958, in get_objects
    raise value.as_instanceof_cause()
ray.exceptions.RayTaskError(ActorDiedError): [36mray::TaskRunner.run()[39m (pid=3022421, ip=240.18.169.16, actor_id=facf12f7afe7e8cb77382bc401000000, repr=<main_ppo.TaskRunner object at 0x7e4fec49d9f0>)
  File "/mnt/task_runtime/verl/verl/trainer/main_ppo.py", line 246, in run
    trainer.init_workers()
  File "/mnt/task_runtime/verl/verl/trainer/ppo/ray_trainer.py", line 917, in init_workers
    self.actor_rollout_wg.init_model()
  File "/mnt/task_runtime/verl/verl/single_controller/ray/base.py", line 50, in __call__
    output = ray.get(output)
ray.exceptions.ActorDiedError: The actor died unexpectedly before finishing this task.
	class_name: create_colocated_worker_cls.<locals>.WorkerDict
	actor_id: daaeae55501736c31e76508201000000
	pid: 3034694
	name: 3LGhYnWorkerDict_0:2
	namespace: b7f376d2-162d-451a-bb9f-d210f2af3183
	ip: 240.18.169.16
The actor is dead because its worker process has died. Worker exit type: SYSTEM_ERROR Worker exit detail: Worker unexpectedly exits with a connection error code 2. End of file. There are some potential root causes. (1) The process is killed by SIGKILL by OOM killer due to high memory usage. (2) ray stop --force is called. (3) The worker is crashed unexpectedly due to SIGSEGV or other unexpected errors.
[36m(WorkerDict pid=3034697)[0m Capturing batches (avail_mem=13.57 GB):  13%|█▎        | 3/23 [00:01<00:11,  1.68it/s]Capturing batches (avail_mem=13.47 GB):  13%|█▎        | 3/23 [00:01<00:11,  1.68it/s]
+ export HYDRA_FULL_ERROR=1
+ HYDRA_FULL_ERROR=1
+ ulimit -n 65535
++ pwd
+ PROJECT_DIR=/mnt/task_runtime/verl
+ CONFIG_PATH=/mnt/task_runtime/verl/examples/sglang_multiturn/config
+ python3 -m verl.trainer.main_ppo --config-path=/mnt/task_runtime/verl/examples/sglang_multiturn/config --config-name=gsm8k_multiturn_grpo algorithm.adv_estimator=grpo data.train_batch_size=1024 data.max_prompt_length=128 data.filter_overlong_prompts=True data.truncation=error data.return_raw_chat=True data.filter_overlong_prompts_workers=40 actor_rollout_ref.model.path=/root/.cache/huggingface/hub/models--allenai--OLMo-2-0425-1B/snapshots/a1847dff35000b4271fa70afc5db10fd29fedbdf +actor_rollout_ref.actor.ntp_coeff=1.0 actor_rollout_ref.actor.optim.lr=2e-6 actor_rollout_ref.model.use_remove_padding=True actor_rollout_ref.actor.ppo_mini_batch_size=256 +actor_rollout_ref.actor.ntp_mini_batch_size=512 actor_rollout_ref.actor.ppo_micro_batch_size_per_gpu=32 +actor_rollout_ref.actor.ntp_micro_batch_size_per_gpu=64 actor_rollout_ref.actor.use_kl_loss=False actor_rollout_ref.actor.kl_loss_coef=0.0 actor_rollout_ref.actor.entropy_coeff=0.0005 actor_rollout_ref.model.enable_gradient_checkpointing=True actor_rollout_ref.actor.fsdp_config.param_offload=False actor_rollout_ref.actor.fsdp_config.optimizer_offload=False actor_rollout_ref.rollout.log_prob_micro_batch_size_per_gpu=80 actor_rollout_ref.ref.log_prob_micro_batch_size_per_gpu=80 actor_rollout_ref.rollout.tensor_model_parallel_size=1 actor_rollout_ref.rollout.name=sglang actor_rollout_ref.rollout.gpu_memory_utilization=0.8 actor_rollout_ref.rollout.n=3 actor_rollout_ref.rollout.temperature=1.0 +actor_rollout_ref.rollout.per_turn_response_length=16 +actor_rollout_ref.rollout.max_code_lines=32 actor_rollout_ref.rollout.response_length=1024 algorithm.use_kl_in_reward=False trainer.critic_warmup=0 'trainer.logger=["console","wandb"]' trainer.project_name=em-new trainer.experiment_name=openandsyn-ours-80-200-olmo-nowarmup-window3-std-0005entropy-12lenpenalty-nopenalty-alreadynextline-mustsharp trainer.n_gpus_per_node=8 trainer.nnodes=1 trainer.val_before_train=False trainer.save_freq=100 trainer.test_freq=-1 trainer.total_epochs=1 +trainer.q_steps=80 +trainer.ref_update_freq=200 data.train_files=/mnt/task_runtime/opencoder_post.parquet data.val_files=/root/data/real_code/test.parquet actor_rollout_ref.rollout.multi_turn.interaction_config_path=/mnt/task_runtime/verl/examples/sglang_multiturn/config/interaction_config/gsm8k_interaction_config.yaml actor_rollout_ref.rollout.multi_turn.max_user_turns=1
2025-08-23 21:25:07,925	INFO worker.py:1918 -- Started a local Ray instance. View the dashboard at [1m[32m127.0.0.1:8265 [39m[22m
[36m(TaskRunner pid=3050306)[0m TaskRunner hostname: bolt-f4pdfx26wb-c5cg2sruft, PID: 3050306
[36m(TaskRunner pid=3050306)[0m {'actor_rollout_ref': {'actor': {'checkpoint': {'load_contents': ['hf_model',
[36m(TaskRunner pid=3050306)[0m                                                                   'model',
[36m(TaskRunner pid=3050306)[0m                                                                   'optimizer',
[36m(TaskRunner pid=3050306)[0m                                                                   'extra'],
[36m(TaskRunner pid=3050306)[0m                                                 'save_contents': ['hf_model',
[36m(TaskRunner pid=3050306)[0m                                                                   'model',
[36m(TaskRunner pid=3050306)[0m                                                                   'optimizer',
[36m(TaskRunner pid=3050306)[0m                                                                   'extra']},
[36m(TaskRunner pid=3050306)[0m                                  'clip_ratio': 0.2,
[36m(TaskRunner pid=3050306)[0m                                  'clip_ratio_c': 3.0,
[36m(TaskRunner pid=3050306)[0m                                  'clip_ratio_high': 0.2,
[36m(TaskRunner pid=3050306)[0m                                  'clip_ratio_low': 0.2,
[36m(TaskRunner pid=3050306)[0m                                  'entropy_checkpointing': False,
[36m(TaskRunner pid=3050306)[0m                                  'entropy_coeff': 0.0005,
[36m(TaskRunner pid=3050306)[0m                                  'entropy_from_logits_with_chunking': False,
[36m(TaskRunner pid=3050306)[0m                                  'fsdp_config': {'forward_prefetch': False,
[36m(TaskRunner pid=3050306)[0m                                                  'fsdp_size': -1,
[36m(TaskRunner pid=3050306)[0m                                                  'offload_policy': False,
[36m(TaskRunner pid=3050306)[0m                                                  'optimizer_offload': False,
[36m(TaskRunner pid=3050306)[0m                                                  'param_offload': False,
[36m(TaskRunner pid=3050306)[0m                                                  'reshard_after_forward': True,
[36m(TaskRunner pid=3050306)[0m                                                  'wrap_policy': {'min_num_params': 0}},
[36m(TaskRunner pid=3050306)[0m                                  'grad_clip': 1.0,
[36m(TaskRunner pid=3050306)[0m                                  'kl_loss_coef': 0.0,
[36m(TaskRunner pid=3050306)[0m                                  'kl_loss_type': 'low_var_kl',
[36m(TaskRunner pid=3050306)[0m                                  'loss_agg_mode': 'token-mean',
[36m(TaskRunner pid=3050306)[0m                                  'ntp_coeff': 1.0,
[36m(TaskRunner pid=3050306)[0m                                  'ntp_micro_batch_size_per_gpu': 64,
[36m(TaskRunner pid=3050306)[0m                                  'ntp_mini_batch_size': 512,
[36m(TaskRunner pid=3050306)[0m                                  'optim': {'lr': 2e-06,
[36m(TaskRunner pid=3050306)[0m                                            'lr_warmup_steps': -1,
[36m(TaskRunner pid=3050306)[0m                                            'lr_warmup_steps_ratio': 0.0,
[36m(TaskRunner pid=3050306)[0m                                            'min_lr_ratio': 0.0,
[36m(TaskRunner pid=3050306)[0m                                            'num_cycles': 0.5,
[36m(TaskRunner pid=3050306)[0m                                            'total_training_steps': -1,
[36m(TaskRunner pid=3050306)[0m                                            'warmup_style': 'constant',
[36m(TaskRunner pid=3050306)[0m                                            'weight_decay': 0.01},
[36m(TaskRunner pid=3050306)[0m                                  'policy_loss': {'clip_cov_lb': 1.0,
[36m(TaskRunner pid=3050306)[0m                                                  'clip_cov_ratio': 0.0002,
[36m(TaskRunner pid=3050306)[0m                                                  'clip_cov_ub': 5.0,
[36m(TaskRunner pid=3050306)[0m                                                  'kl_cov_ratio': 0.0002,
[36m(TaskRunner pid=3050306)[0m                                                  'loss_mode': 'vanilla',
[36m(TaskRunner pid=3050306)[0m                                                  'ppo_kl_coef': 0.1},
[36m(TaskRunner pid=3050306)[0m                                  'ppo_epochs': 1,
[36m(TaskRunner pid=3050306)[0m                                  'ppo_max_token_len_per_gpu': 16384,
[36m(TaskRunner pid=3050306)[0m                                  'ppo_micro_batch_size': None,
[36m(TaskRunner pid=3050306)[0m                                  'ppo_micro_batch_size_per_gpu': 32,
[36m(TaskRunner pid=3050306)[0m                                  'ppo_mini_batch_size': 256,
[36m(TaskRunner pid=3050306)[0m                                  'shuffle': False,
[36m(TaskRunner pid=3050306)[0m                                  'strategy': 'fsdp',
[36m(TaskRunner pid=3050306)[0m                                  'ulysses_sequence_parallel_size': 1,
[36m(TaskRunner pid=3050306)[0m                                  'use_dynamic_bsz': False,
[36m(TaskRunner pid=3050306)[0m                                  'use_kl_loss': False,
[36m(TaskRunner pid=3050306)[0m                                  'use_torch_compile': True},
[36m(TaskRunner pid=3050306)[0m                        'hybrid_engine': True,
[36m(TaskRunner pid=3050306)[0m                        'model': {'custom_chat_template': None,
[36m(TaskRunner pid=3050306)[0m                                  'enable_activation_offload': False,
[36m(TaskRunner pid=3050306)[0m                                  'enable_gradient_checkpointing': True,
[36m(TaskRunner pid=3050306)[0m                                  'exclude_modules': None,
[36m(TaskRunner pid=3050306)[0m                                  'external_lib': None,
[36m(TaskRunner pid=3050306)[0m                                  'fused_kernel_options': {'impl_backend': 'torch'},
[36m(TaskRunner pid=3050306)[0m                                  'lora_alpha': 16,
[36m(TaskRunner pid=3050306)[0m                                  'lora_rank': 0,
[36m(TaskRunner pid=3050306)[0m                                  'override_config': {},
[36m(TaskRunner pid=3050306)[0m                                  'path': '/root/.cache/huggingface/hub/models--allenai--OLMo-2-0425-1B/snapshots/a1847dff35000b4271fa70afc5db10fd29fedbdf',
[36m(TaskRunner pid=3050306)[0m                                  'target_modules': 'all-linear',
[36m(TaskRunner pid=3050306)[0m                                  'trust_remote_code': False,
[36m(TaskRunner pid=3050306)[0m                                  'use_fused_kernels': False,
[36m(TaskRunner pid=3050306)[0m                                  'use_liger': False,
[36m(TaskRunner pid=3050306)[0m                                  'use_remove_padding': True,
[36m(TaskRunner pid=3050306)[0m                                  'use_shm': False},
[36m(TaskRunner pid=3050306)[0m                        'profiler': {'_target_': 'verl.utils.profiler.ProfilerConfig',
[36m(TaskRunner pid=3050306)[0m                                     'all_ranks': False,
[36m(TaskRunner pid=3050306)[0m                                     'discrete': False,
[36m(TaskRunner pid=3050306)[0m                                     'ranks': []},
[36m(TaskRunner pid=3050306)[0m                        'ref': {'entropy_checkpointing': False,
[36m(TaskRunner pid=3050306)[0m                                'entropy_from_logits_with_chunking': False,
[36m(TaskRunner pid=3050306)[0m                                'fsdp_config': {'forward_prefetch': False,
[36m(TaskRunner pid=3050306)[0m                                                'param_offload': False,
[36m(TaskRunner pid=3050306)[0m                                                'reshard_after_forward': True,
[36m(TaskRunner pid=3050306)[0m                                                'wrap_policy': {'min_num_params': 0}},
[36m(TaskRunner pid=3050306)[0m                                'log_prob_max_token_len_per_gpu': 16384,
[36m(TaskRunner pid=3050306)[0m                                'log_prob_micro_batch_size': None,
[36m(TaskRunner pid=3050306)[0m                                'log_prob_micro_batch_size_per_gpu': 80,
[36m(TaskRunner pid=3050306)[0m                                'log_prob_use_dynamic_bsz': False,
[36m(TaskRunner pid=3050306)[0m                                'strategy': 'fsdp',
[36m(TaskRunner pid=3050306)[0m                                'ulysses_sequence_parallel_size': 1,
[36m(TaskRunner pid=3050306)[0m                                'use_torch_compile': True},
[36m(TaskRunner pid=3050306)[0m                        'rollout': {'agent': {'agent_loop_config_path': None,
[36m(TaskRunner pid=3050306)[0m                                              'custom_async_server': {'name': None,
[36m(TaskRunner pid=3050306)[0m                                                                      'path': None},
[36m(TaskRunner pid=3050306)[0m                                              'num_workers': 8},
[36m(TaskRunner pid=3050306)[0m                                    'calculate_log_probs': False,
[36m(TaskRunner pid=3050306)[0m                                    'disable_log_stats': True,
[36m(TaskRunner pid=3050306)[0m                                    'do_sample': True,
[36m(TaskRunner pid=3050306)[0m                                    'dtype': 'bfloat16',
[36m(TaskRunner pid=3050306)[0m                                    'enable_chunked_prefill': True,
[36m(TaskRunner pid=3050306)[0m                                    'enforce_eager': True,
[36m(TaskRunner pid=3050306)[0m                                    'engine_kwargs': {'sglang': {'attention_backend': None},
[36m(TaskRunner pid=3050306)[0m                                                      'vllm': {'disable_mm_preprocessor_cache': False,
[36m(TaskRunner pid=3050306)[0m                                                               'swap_space': None}},
[36m(TaskRunner pid=3050306)[0m                                    'free_cache_engine': True,
[36m(TaskRunner pid=3050306)[0m                                    'gpu_memory_utilization': 0.8,
[36m(TaskRunner pid=3050306)[0m                                    'ignore_eos': False,
[36m(TaskRunner pid=3050306)[0m                                    'layered_summon': False,
[36m(TaskRunner pid=3050306)[0m                                    'load_format': 'dummy_dtensor',
[36m(TaskRunner pid=3050306)[0m                                    'log_prob_max_token_len_per_gpu': 16384,
[36m(TaskRunner pid=3050306)[0m                                    'log_prob_micro_batch_size': None,
[36m(TaskRunner pid=3050306)[0m                                    'log_prob_micro_batch_size_per_gpu': 80,
[36m(TaskRunner pid=3050306)[0m                                    'log_prob_use_dynamic_bsz': False,
[36m(TaskRunner pid=3050306)[0m                                    'max_code_lines': 32,
[36m(TaskRunner pid=3050306)[0m                                    'max_model_len': None,
[36m(TaskRunner pid=3050306)[0m                                    'max_num_batched_tokens': 8192,
[36m(TaskRunner pid=3050306)[0m                                    'max_num_seqs': 1024,
[36m(TaskRunner pid=3050306)[0m                                    'mode': 'sync',
[36m(TaskRunner pid=3050306)[0m                                    'multi_stage_wake_up': False,
[36m(TaskRunner pid=3050306)[0m                                    'multi_turn': {'completion_callback': None,
[36m(TaskRunner pid=3050306)[0m                                                   'enable': True,
[36m(TaskRunner pid=3050306)[0m                                                   'format': 'hermes',
[36m(TaskRunner pid=3050306)[0m                                                   'interaction_config_path': '/mnt/task_runtime/verl/examples/sglang_multiturn/config/interaction_config/gsm8k_interaction_config.yaml',
[36m(TaskRunner pid=3050306)[0m                                                   'max_assistant_turns': 100000,
[36m(TaskRunner pid=3050306)[0m                                                   'max_parallel_calls': 1,
[36m(TaskRunner pid=3050306)[0m                                                   'max_tool_response_length': 256,
[36m(TaskRunner pid=3050306)[0m                                                   'max_user_turns': 1,
[36m(TaskRunner pid=3050306)[0m                                                   'tokenization_sanity_check_mode': 'strict',
[36m(TaskRunner pid=3050306)[0m                                                   'tool_config_path': None,
[36m(TaskRunner pid=3050306)[0m                                                   'tool_response_truncate_side': 'middle',
[36m(TaskRunner pid=3050306)[0m                                                   'use_inference_chat_template': False},
[36m(TaskRunner pid=3050306)[0m                                    'n': 3,
[36m(TaskRunner pid=3050306)[0m                                    'name': 'sglang',
[36m(TaskRunner pid=3050306)[0m                                    'per_turn_response_length': 16,
[36m(TaskRunner pid=3050306)[0m                                    'prompt_length': 128,
[36m(TaskRunner pid=3050306)[0m                                    'response_length': 1024,
[36m(TaskRunner pid=3050306)[0m                                    'temperature': 1.0,
[36m(TaskRunner pid=3050306)[0m                                    'tensor_model_parallel_size': 1,
[36m(TaskRunner pid=3050306)[0m                                    'top_k': -1,
[36m(TaskRunner pid=3050306)[0m                                    'top_p': 1,
[36m(TaskRunner pid=3050306)[0m                                    'trace': {'backend': None,
[36m(TaskRunner pid=3050306)[0m                                              'token2text': False},
[36m(TaskRunner pid=3050306)[0m                                    'update_weights_bucket_megabytes': 512,
[36m(TaskRunner pid=3050306)[0m                                    'val_kwargs': {'do_sample': False,
[36m(TaskRunner pid=3050306)[0m                                                   'n': 1,
[36m(TaskRunner pid=3050306)[0m                                                   'temperature': 0,
[36m(TaskRunner pid=3050306)[0m                                                   'top_k': -1,
[36m(TaskRunner pid=3050306)[0m                                                   'top_p': 1.0}}},
[36m(TaskRunner pid=3050306)[0m  'algorithm': {'_target_': 'verl.trainer.config.AlgoConfig',
[36m(TaskRunner pid=3050306)[0m                'adv_estimator': 'grpo',
[36m(TaskRunner pid=3050306)[0m                'gamma': 1.0,
[36m(TaskRunner pid=3050306)[0m                'kl_ctrl': {'_target_': 'verl.trainer.config.KLControlConfig',
[36m(TaskRunner pid=3050306)[0m                            'horizon': 10000,
[36m(TaskRunner pid=3050306)[0m                            'kl_coef': 0.001,
[36m(TaskRunner pid=3050306)[0m                            'target_kl': 0.1,
[36m(TaskRunner pid=3050306)[0m                            'type': 'fixed'},
[36m(TaskRunner pid=3050306)[0m                'kl_penalty': 'kl',
[36m(TaskRunner pid=3050306)[0m                'lam': 1.0,
[36m(TaskRunner pid=3050306)[0m                'norm_adv_by_std_in_grpo': True,
[36m(TaskRunner pid=3050306)[0m                'pf_ppo': {'_target_': 'verl.trainer.config.PFPPOConfig',
[36m(TaskRunner pid=3050306)[0m                           'reweight_method': 'pow',
[36m(TaskRunner pid=3050306)[0m                           'weight_pow': 2.0},
[36m(TaskRunner pid=3050306)[0m                'use_kl_in_reward': False,
[36m(TaskRunner pid=3050306)[0m                'use_pf_ppo': False},
[36m(TaskRunner pid=3050306)[0m  'critic': {'_target_': 'verl.trainer.config.FSDPCriticConfig',
[36m(TaskRunner pid=3050306)[0m             'checkpoint': {'load_contents': ['model', 'optimizer', 'extra'],
[36m(TaskRunner pid=3050306)[0m                            'save_contents': ['model', 'optimizer', 'extra']},
[36m(TaskRunner pid=3050306)[0m             'cliprange_value': 0.5,
[36m(TaskRunner pid=3050306)[0m             'forward_max_token_len_per_gpu': 32768,
[36m(TaskRunner pid=3050306)[0m             'forward_micro_batch_size': None,
[36m(TaskRunner pid=3050306)[0m             'forward_micro_batch_size_per_gpu': None,
[36m(TaskRunner pid=3050306)[0m             'grad_clip': 1.0,
[36m(TaskRunner pid=3050306)[0m             'loss_agg_mode': 'token-mean',
[36m(TaskRunner pid=3050306)[0m             'model': {'enable_activation_offload': False,
[36m(TaskRunner pid=3050306)[0m                       'enable_gradient_checkpointing': True,
[36m(TaskRunner pid=3050306)[0m                       'external_lib': None,
[36m(TaskRunner pid=3050306)[0m                       'fsdp_config': {'forward_prefetch': False,
[36m(TaskRunner pid=3050306)[0m                                       'fsdp_size': -1,
[36m(TaskRunner pid=3050306)[0m                                       'offload_policy': False,
[36m(TaskRunner pid=3050306)[0m                                       'optimizer_offload': False,
[36m(TaskRunner pid=3050306)[0m                                       'param_offload': False,
[36m(TaskRunner pid=3050306)[0m                                       'reshard_after_forward': True,
[36m(TaskRunner pid=3050306)[0m                                       'wrap_policy': {'min_num_params': 0}},
[36m(TaskRunner pid=3050306)[0m                       'lora_alpha': 16,
[36m(TaskRunner pid=3050306)[0m                       'lora_rank': 0,
[36m(TaskRunner pid=3050306)[0m                       'override_config': {},
[36m(TaskRunner pid=3050306)[0m                       'path': '~/models/deepseek-llm-7b-chat',
[36m(TaskRunner pid=3050306)[0m                       'target_modules': 'all-linear',
[36m(TaskRunner pid=3050306)[0m                       'tokenizer_path': '/root/.cache/huggingface/hub/models--allenai--OLMo-2-0425-1B/snapshots/a1847dff35000b4271fa70afc5db10fd29fedbdf',
[36m(TaskRunner pid=3050306)[0m                       'trust_remote_code': False,
[36m(TaskRunner pid=3050306)[0m                       'use_remove_padding': False,
[36m(TaskRunner pid=3050306)[0m                       'use_shm': False},
[36m(TaskRunner pid=3050306)[0m             'optim': {'lr': 1e-05,
[36m(TaskRunner pid=3050306)[0m                       'lr_warmup_steps_ratio': 0.0,
[36m(TaskRunner pid=3050306)[0m                       'min_lr_ratio': None,
[36m(TaskRunner pid=3050306)[0m                       'total_training_steps': -1,
[36m(TaskRunner pid=3050306)[0m                       'warmup_style': 'constant',
[36m(TaskRunner pid=3050306)[0m                       'weight_decay': 0.01},
[36m(TaskRunner pid=3050306)[0m             'ppo_epochs': 1,
[36m(TaskRunner pid=3050306)[0m             'ppo_max_token_len_per_gpu': 32768,
[36m(TaskRunner pid=3050306)[0m             'ppo_micro_batch_size': None,
[36m(TaskRunner pid=3050306)[0m             'ppo_micro_batch_size_per_gpu': None,
[36m(TaskRunner pid=3050306)[0m             'ppo_mini_batch_size': 256,
[36m(TaskRunner pid=3050306)[0m             'profiler': {'_target_': 'verl.utils.profiler.ProfilerConfig',
[36m(TaskRunner pid=3050306)[0m                          'all_ranks': False,
[36m(TaskRunner pid=3050306)[0m                          'discrete': False,
[36m(TaskRunner pid=3050306)[0m                          'ranks': []},
[36m(TaskRunner pid=3050306)[0m             'rollout_n': 3,
[36m(TaskRunner pid=3050306)[0m             'shuffle': False,
[36m(TaskRunner pid=3050306)[0m             'strategy': 'fsdp',
[36m(TaskRunner pid=3050306)[0m             'ulysses_sequence_parallel_size': 1,
[36m(TaskRunner pid=3050306)[0m             'use_dynamic_bsz': False},
[36m(TaskRunner pid=3050306)[0m  'custom_reward_function': {'name': 'compute_score', 'path': None},
[36m(TaskRunner pid=3050306)[0m  'data': {'custom_cls': {'name': None, 'path': None},
[36m(TaskRunner pid=3050306)[0m           'datagen': {'name': None, 'path': None},
[36m(TaskRunner pid=3050306)[0m           'dataloader_num_workers': 8,
[36m(TaskRunner pid=3050306)[0m           'filter_overlong_prompts': True,
[36m(TaskRunner pid=3050306)[0m           'filter_overlong_prompts_workers': 40,
[36m(TaskRunner pid=3050306)[0m           'image_key': 'images',
[36m(TaskRunner pid=3050306)[0m           'max_prompt_length': 128,
[36m(TaskRunner pid=3050306)[0m           'max_response_length': 1024,
[36m(TaskRunner pid=3050306)[0m           'prompt_key': 'prompt',
[36m(TaskRunner pid=3050306)[0m           'return_full_prompt': False,
[36m(TaskRunner pid=3050306)[0m           'return_multi_modal_inputs': True,
[36m(TaskRunner pid=3050306)[0m           'return_raw_chat': True,
[36m(TaskRunner pid=3050306)[0m           'return_raw_input_ids': False,
[36m(TaskRunner pid=3050306)[0m           'reward_fn_key': 'data_source',
[36m(TaskRunner pid=3050306)[0m           'sampler': {'class_name': None, 'class_path': None},
[36m(TaskRunner pid=3050306)[0m           'shuffle': True,
[36m(TaskRunner pid=3050306)[0m           'tokenizer': None,
[36m(TaskRunner pid=3050306)[0m           'train_batch_size': 1024,
[36m(TaskRunner pid=3050306)[0m           'train_files': '/mnt/task_runtime/opencoder_post.parquet',
[36m(TaskRunner pid=3050306)[0m           'truncation': 'error',
[36m(TaskRunner pid=3050306)[0m           'trust_remote_code': False,
[36m(TaskRunner pid=3050306)[0m           'use_shm': False,
[36m(TaskRunner pid=3050306)[0m           'val_batch_size': None,
[36m(TaskRunner pid=3050306)[0m           'val_files': '/root/data/real_code/test.parquet',
[36m(TaskRunner pid=3050306)[0m           'validation_shuffle': False,
[36m(TaskRunner pid=3050306)[0m           'video_key': 'videos'},
[36m(TaskRunner pid=3050306)[0m  'ray_init': {'num_cpus': None, 'timeline_json_file': None},
[36m(TaskRunner pid=3050306)[0m  'reward_model': {'enable': False,
[36m(TaskRunner pid=3050306)[0m                   'forward_max_token_len_per_gpu': 32768,
[36m(TaskRunner pid=3050306)[0m                   'launch_reward_fn_async': False,
[36m(TaskRunner pid=3050306)[0m                   'max_length': None,
[36m(TaskRunner pid=3050306)[0m                   'micro_batch_size': None,
[36m(TaskRunner pid=3050306)[0m                   'micro_batch_size_per_gpu': None,
[36m(TaskRunner pid=3050306)[0m                   'model': {'external_lib': None,
[36m(TaskRunner pid=3050306)[0m                             'fsdp_config': {'forward_prefetch': False,
[36m(TaskRunner pid=3050306)[0m                                             'fsdp_size': -1,
[36m(TaskRunner pid=3050306)[0m                                             'param_offload': False,
[36m(TaskRunner pid=3050306)[0m                                             'reshard_after_forward': True,
[36m(TaskRunner pid=3050306)[0m                                             'wrap_policy': {'min_num_params': 0}},
[36m(TaskRunner pid=3050306)[0m                             'input_tokenizer': '/root/.cache/huggingface/hub/models--allenai--OLMo-2-0425-1B/snapshots/a1847dff35000b4271fa70afc5db10fd29fedbdf',
[36m(TaskRunner pid=3050306)[0m                             'path': '~/models/FsfairX-LLaMA3-RM-v0.1',
[36m(TaskRunner pid=3050306)[0m                             'trust_remote_code': False,
[36m(TaskRunner pid=3050306)[0m                             'use_fused_kernels': False,
[36m(TaskRunner pid=3050306)[0m                             'use_remove_padding': False,
[36m(TaskRunner pid=3050306)[0m                             'use_shm': False},
[36m(TaskRunner pid=3050306)[0m                   'profiler': {'_target_': 'verl.utils.profiler.ProfilerConfig',
[36m(TaskRunner pid=3050306)[0m                                'all_ranks': False,
[36m(TaskRunner pid=3050306)[0m                                'discrete': False,
[36m(TaskRunner pid=3050306)[0m                                'ranks': []},
[36m(TaskRunner pid=3050306)[0m                   'reward_manager': 'naive',
[36m(TaskRunner pid=3050306)[0m                   'sandbox_fusion': {'max_concurrent': 64,
[36m(TaskRunner pid=3050306)[0m                                      'memory_limit_mb': 1024,
[36m(TaskRunner pid=3050306)[0m                                      'url': None},
[36m(TaskRunner pid=3050306)[0m                   'strategy': 'fsdp',
[36m(TaskRunner pid=3050306)[0m                   'ulysses_sequence_parallel_size': 1,
[36m(TaskRunner pid=3050306)[0m                   'use_dynamic_bsz': False},
[36m(TaskRunner pid=3050306)[0m  'trainer': {'balance_batch': True,
[36m(TaskRunner pid=3050306)[0m              'controller_nsight_options': {'cuda-graph-trace': 'graph',
[36m(TaskRunner pid=3050306)[0m                                            'cuda-memory-usage': 'true',
[36m(TaskRunner pid=3050306)[0m                                            'trace': 'cuda,nvtx,cublas,ucx'},
[36m(TaskRunner pid=3050306)[0m              'critic_warmup': 0,
[36m(TaskRunner pid=3050306)[0m              'default_hdfs_dir': None,
[36m(TaskRunner pid=3050306)[0m              'default_local_dir': '/mnt/task_wrapper/user_output/artifacts/checkpoints/em-new/openandsyn-ours-80-200-olmo-nowarmup-window3-std-0005entropy-12lenpenalty-nopenalty-alreadynextline-mustsharp',
[36m(TaskRunner pid=3050306)[0m              'del_local_ckpt_after_load': False,
[36m(TaskRunner pid=3050306)[0m              'device': 'cuda',
[36m(TaskRunner pid=3050306)[0m              'esi_redundant_time': 0,
[36m(TaskRunner pid=3050306)[0m              'experiment_name': 'openandsyn-ours-80-200-olmo-nowarmup-window3-std-0005entropy-12lenpenalty-nopenalty-alreadynextline-mustsharp',
[36m(TaskRunner pid=3050306)[0m              'log_val_generations': 0,
[36m(TaskRunner pid=3050306)[0m              'logger': ['console', 'wandb'],
[36m(TaskRunner pid=3050306)[0m              'max_actor_ckpt_to_keep': None,
[36m(TaskRunner pid=3050306)[0m              'max_critic_ckpt_to_keep': None,
[36m(TaskRunner pid=3050306)[0m              'n_gpus_per_node': 8,
[36m(TaskRunner pid=3050306)[0m              'nnodes': 1,
[36m(TaskRunner pid=3050306)[0m              'npu_profile': {'options': {'analysis': True,
[36m(TaskRunner pid=3050306)[0m                                          'level': 'level1',
[36m(TaskRunner pid=3050306)[0m                                          'record_shapes': False,
[36m(TaskRunner pid=3050306)[0m                                          'save_path': './profiler_data',
[36m(TaskRunner pid=3050306)[0m                                          'with_cpu': True,
[36m(TaskRunner pid=3050306)[0m                                          'with_memory': False,
[36m(TaskRunner pid=3050306)[0m                                          'with_module': False,
[36m(TaskRunner pid=3050306)[0m                                          'with_npu': True,
[36m(TaskRunner pid=3050306)[0m                                          'with_stack': False}},
[36m(TaskRunner pid=3050306)[0m              'profile_steps': None,
[36m(TaskRunner pid=3050306)[0m              'project_name': 'em-new',
[36m(TaskRunner pid=3050306)[0m              'q_steps': 80,
[36m(TaskRunner pid=3050306)[0m              'ray_wait_register_center_timeout': 300,
[36m(TaskRunner pid=3050306)[0m              'ref_update_freq': 200,
[36m(TaskRunner pid=3050306)[0m              'resume_from_path': None,
[36m(TaskRunner pid=3050306)[0m              'resume_mode': 'auto',
[36m(TaskRunner pid=3050306)[0m              'rollout_data_dir': None,
[36m(TaskRunner pid=3050306)[0m              'save_freq': 100,
[36m(TaskRunner pid=3050306)[0m              'test_freq': -1,
[36m(TaskRunner pid=3050306)[0m              'total_epochs': 1,
[36m(TaskRunner pid=3050306)[0m              'total_training_steps': None,
[36m(TaskRunner pid=3050306)[0m              'use_legacy_worker_impl': 'auto',
[36m(TaskRunner pid=3050306)[0m              'val_before_train': False,
[36m(TaskRunner pid=3050306)[0m              'val_only': False,
[36m(TaskRunner pid=3050306)[0m              'validation_data_dir': None,
[36m(TaskRunner pid=3050306)[0m              'worker_nsight_options': {'capture-range': 'cudaProfilerApi',
[36m(TaskRunner pid=3050306)[0m                                        'capture-range-end': None,
[36m(TaskRunner pid=3050306)[0m                                        'cuda-graph-trace': 'graph',
[36m(TaskRunner pid=3050306)[0m                                        'cuda-memory-usage': 'true',
[36m(TaskRunner pid=3050306)[0m                                        'kill': 'none',
[36m(TaskRunner pid=3050306)[0m                                        'trace': 'cuda,nvtx,cublas,ucx'}}}
[36m(TaskRunner pid=3050306)[0m 2025-08-23 21:25:15.570073: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
[36m(TaskRunner pid=3050306)[0m 2025-08-23 21:25:15.587055: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:485] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered
[36m(TaskRunner pid=3050306)[0m 2025-08-23 21:25:15.603629: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:8454] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered
[36m(TaskRunner pid=3050306)[0m 2025-08-23 21:25:15.607703: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1452] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered
[36m(TaskRunner pid=3050306)[0m 2025-08-23 21:25:15.619279: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
[36m(TaskRunner pid=3050306)[0m To enable the following instructions: AVX2 AVX512F AVX512_VNNI AVX512_BF16 AVX512_FP16 AVX_VNNI AMX_TILE AMX_INT8 AMX_BF16 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
[36m(TaskRunner pid=3050306)[0m 2025-08-23 21:25:16.492220: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT
[36m(TaskRunner pid=3050306)[0m Using dataset class: RLHFDataset
[36m(TaskRunner pid=3050306)[0m Setting TOKENIZERS_PARALLELISM=false for forked processes.
[36m(TaskRunner pid=3050306)[0m WARNING:2025-08-23 21:25:20,179:Setting TOKENIZERS_PARALLELISM=false for forked processes.
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):   0%|          | 0/1914690 [00:00<?, ? examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):   0%|          | 1000/1914690 [00:01<34:53, 913.98 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):   0%|          | 3000/1914690 [00:01<10:27, 3047.47 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):   0%|          | 7000/1914690 [00:01<04:15, 7474.35 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):   1%|          | 11000/1914690 [00:01<02:33, 12418.52 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):   1%|          | 14000/1914690 [00:01<02:02, 15504.24 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):   1%|          | 19000/1914690 [00:01<01:28, 21390.87 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):   1%|▏         | 26000/1914690 [00:01<01:00, 31092.39 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):   2%|▏         | 32000/1914690 [00:01<00:50, 37340.35 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):   2%|▏         | 38000/1914690 [00:02<00:46, 40098.07 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):   3%|▎         | 48000/1914690 [00:02<00:34, 53952.79 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):   3%|▎         | 58000/1914690 [00:02<00:31, 58310.43 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):   4%|▍         | 73000/1914690 [00:02<00:23, 78865.68 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):   4%|▍         | 82000/1914690 [00:02<00:24, 74368.87 examples/s]Filter (num_proc=40):   5%|▌         | 96000/1914690 [00:02<00:20, 90024.08 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):   6%|▌         | 110000/1914690 [00:02<00:17, 102256.09 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):   6%|▋         | 121000/1914690 [00:02<00:18, 95993.28 examples/s] 
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):   7%|▋         | 140000/1914690 [00:03<00:14, 119256.99 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):   8%|▊         | 155000/1914690 [00:03<00:13, 127552.50 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):   9%|▉         | 169000/1914690 [00:03<00:14, 118848.41 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  10%|█         | 192000/1914690 [00:03<00:11, 147923.42 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  11%|█         | 208000/1914690 [00:03<00:11, 148403.24 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  12%|█▏        | 226000/1914690 [00:03<00:11, 144775.27 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  13%|█▎        | 254000/1914690 [00:03<00:09, 172413.67 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  14%|█▍        | 272000/1914690 [00:03<00:09, 172738.67 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  15%|█▌        | 290000/1914690 [00:03<00:10, 161970.06 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  17%|█▋        | 320000/1914690 [00:04<00:08, 197401.49 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  18%|█▊        | 345000/1914690 [00:04<00:07, 210473.87 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  19%|█▉        | 367000/1914690 [00:04<00:07, 209960.10 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  20%|██        | 389000/1914690 [00:04<00:07, 208507.84 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  22%|██▏       | 416000/1914690 [00:04<00:06, 223602.68 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  23%|██▎       | 439000/1914690 [00:04<00:06, 221683.64 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  24%|██▍       | 464000/1914690 [00:04<00:06, 229602.56 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  25%|██▌       | 488000/1914690 [00:04<00:06, 228793.53 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  27%|██▋       | 511000/1914690 [00:04<00:06, 226299.48 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  28%|██▊       | 535000/1914690 [00:04<00:06, 229360.38 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  29%|██▉       | 560000/1914690 [00:05<00:06, 224829.27 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  31%|███       | 585000/1914690 [00:05<00:05, 226628.74 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  32%|███▏      | 610000/1914690 [00:05<00:05, 233062.62 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  33%|███▎      | 634000/1914690 [00:05<00:05, 229813.39 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  34%|███▍      | 658000/1914690 [00:05<00:05, 230693.74 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  36%|███▌      | 682000/1914690 [00:05<00:05, 230154.64 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  37%|███▋      | 706000/1914690 [00:05<00:05, 216690.59 examples/s]Filter (num_proc=40):  38%|███▊      | 731000/1914690 [00:05<00:05, 224214.51 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  40%|███▉      | 758000/1914690 [00:05<00:04, 233797.79 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  41%|████      | 782000/1914690 [00:06<00:05, 223937.70 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  42%|████▏     | 808000/1914690 [00:06<00:04, 228913.66 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  43%|████▎     | 832000/1914690 [00:06<00:04, 231595.11 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  45%|████▍     | 857000/1914690 [00:06<00:04, 235938.03 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  46%|████▌     | 881000/1914690 [00:06<00:04, 237054.50 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  47%|████▋     | 905000/1914690 [00:06<00:04, 235785.58 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  49%|████▊     | 932000/1914690 [00:06<00:04, 243831.77 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  50%|████▉     | 957000/1914690 [00:06<00:04, 226060.89 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  51%|█████▏    | 985000/1914690 [00:06<00:03, 240404.59 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  53%|█████▎    | 1010000/1914690 [00:07<00:03, 238964.04 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  54%|█████▍    | 1035000/1914690 [00:07<00:04, 219524.51 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  56%|█████▌    | 1064000/1914690 [00:07<00:03, 238440.16 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  57%|█████▋    | 1091000/1914690 [00:07<00:03, 246796.10 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  58%|█████▊    | 1117000/1914690 [00:07<00:03, 228070.82 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  60%|█████▉    | 1143000/1914690 [00:07<00:03, 235015.42 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  61%|██████    | 1171000/1914690 [00:07<00:03, 243601.55 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  62%|██████▏   | 1196000/1914690 [00:07<00:03, 232251.00 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  64%|██████▎   | 1220000/1914690 [00:07<00:02, 233614.76 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  65%|██████▌   | 1247000/1914690 [00:08<00:02, 239946.73 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  66%|██████▋   | 1272000/1914690 [00:08<00:02, 230811.02 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  68%|██████▊   | 1297000/1914690 [00:08<00:02, 231537.56 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  69%|██████▉   | 1325000/1914690 [00:08<00:02, 243994.62 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  71%|███████   | 1350000/1914690 [00:08<00:02, 241367.20 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  72%|███████▏  | 1375000/1914690 [00:08<00:02, 234027.40 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  73%|███████▎  | 1402000/1914690 [00:08<00:02, 244026.97 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  75%|███████▍  | 1427000/1914690 [00:08<00:02, 235756.27 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  76%|███████▌  | 1451000/1914690 [00:08<00:02, 230145.08 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  77%|███████▋  | 1478868/1914690 [00:09<00:01, 242962.15 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  79%|███████▊  | 1503868/1914690 [00:09<00:01, 228991.88 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  80%|███████▉  | 1528472/1914690 [00:09<00:01, 232120.59 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  81%|████████  | 1552340/1914690 [00:09<00:01, 221854.31 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  82%|████████▏ | 1575208/1914690 [00:09<00:01, 221156.75 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  83%|████████▎ | 1598208/1914690 [00:09<00:01, 218896.78 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  85%|████████▍ | 1620208/1914690 [00:09<00:01, 202379.64 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  86%|████████▌ | 1642810/1914690 [00:09<00:01, 202713.06 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  87%|████████▋ | 1664677/1914690 [00:09<00:01, 206634.35 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  88%|████████▊ | 1686411/1914690 [00:10<00:01, 195305.55 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  89%|████████▉ | 1706411/1914690 [00:10<00:01, 178497.47 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  90%|█████████ | 1728146/1914690 [00:10<00:01, 186526.41 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  91%|█████████▏| 1747748/1914690 [00:10<00:00, 178527.64 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  92%|█████████▏| 1766615/1914690 [00:10<00:00, 160743.99 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  93%|█████████▎| 1783615/1914690 [00:10<00:00, 151826.98 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  94%|█████████▍| 1799482/1914690 [00:10<00:00, 147454.62 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  95%|█████████▍| 1814482/1914690 [00:10<00:00, 135413.95 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  96%|█████████▌| 1829349/1914690 [00:11<00:00, 135620.76 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  96%|█████████▋| 1844685/1914690 [00:11<00:00, 135036.51 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  97%|█████████▋| 1858685/1914690 [00:11<00:00, 118355.86 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  98%|█████████▊| 1871419/1914690 [00:11<00:00, 110764.29 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  98%|█████████▊| 1882887/1914690 [00:11<00:00, 99474.86 examples/s] 
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  99%|█████████▉| 1893754/1914690 [00:11<00:00, 88877.70 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  99%|█████████▉| 1903488/1914690 [00:11<00:00, 76989.40 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40): 100%|█████████▉| 1911823/1914690 [00:12<00:00, 62607.11 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40): 100%|██████████| 1914690/1914690 [00:12<00:00, 151061.73 examples/s]
[36m(TaskRunner pid=3050306)[0m Setting TOKENIZERS_PARALLELISM=false for forked processes.
[36m(TaskRunner pid=3050306)[0m WARNING:2025-08-23 21:25:33,438:Setting TOKENIZERS_PARALLELISM=false for forked processes.
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):   0%|          | 0/629183 [00:00<?, ? examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):   0%|          | 1000/629183 [00:01<11:18, 926.39 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):   0%|          | 3000/629183 [00:01<03:20, 3119.03 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):   1%|          | 6000/629183 [00:01<01:35, 6545.41 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):   2%|▏         | 12000/629183 [00:01<00:42, 14613.12 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):   3%|▎         | 17000/629183 [00:01<00:30, 19811.30 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):   4%|▍         | 25000/629183 [00:01<00:19, 31321.78 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):   5%|▌         | 34000/629183 [00:01<00:15, 39677.45 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):   7%|▋         | 45000/629183 [00:01<00:10, 54353.41 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):   9%|▉         | 56000/629183 [00:02<00:08, 66954.77 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  10%|█         | 66000/629183 [00:02<00:08, 67898.90 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  14%|█▎        | 85000/629183 [00:02<00:05, 96582.64 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  15%|█▌        | 97000/629183 [00:02<00:05, 89095.25 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  19%|█▉        | 118000/629183 [00:02<00:04, 116374.94 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  21%|██▏       | 134000/629183 [00:02<00:03, 124010.62 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  24%|██▎       | 148000/629183 [00:02<00:04, 118576.20 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  27%|██▋       | 172000/629183 [00:02<00:03, 145485.22 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  30%|██▉       | 187730/629183 [00:03<00:03, 129556.93 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  34%|███▍      | 214190/629183 [00:03<00:02, 161417.79 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  37%|███▋      | 231920/629183 [00:03<00:02, 161196.14 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  40%|███▉      | 250920/629183 [00:03<00:02, 151803.95 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  45%|████▍     | 280380/629183 [00:03<00:01, 184827.47 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  48%|████▊     | 299840/629183 [00:03<00:02, 161435.61 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  52%|█████▏    | 326300/629183 [00:03<00:01, 184565.31 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  55%|█████▍    | 346030/629183 [00:03<00:01, 162136.67 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  59%|█████▉    | 373760/629183 [00:04<00:01, 188921.68 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  63%|██████▎   | 394950/629183 [00:04<00:01, 185633.24 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  66%|██████▌   | 414950/629183 [00:04<00:01, 182730.39 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  69%|██████▉   | 434410/629183 [00:04<00:01, 178501.07 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  72%|███████▏  | 453140/629183 [00:04<00:00, 180780.78 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  75%|███████▍  | 471870/629183 [00:04<00:00, 171939.12 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  78%|███████▊  | 489600/629183 [00:04<00:00, 165668.26 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  81%|████████  | 507330/629183 [00:04<00:00, 158657.04 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  83%|████████▎ | 524060/629183 [00:05<00:00, 151695.53 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  86%|████████▌ | 539519/629183 [00:05<00:00, 151646.06 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  88%|████████▊ | 555248/629183 [00:05<00:00, 141902.43 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  91%|█████████ | 569706/629183 [00:05<00:00, 133707.76 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  93%|█████████▎| 584164/629183 [00:05<00:00, 112534.51 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  95%|█████████▍| 596622/629183 [00:05<00:00, 104672.53 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  97%|█████████▋| 608080/629183 [00:05<00:00, 91033.74 examples/s] 
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40):  98%|█████████▊| 618267/629183 [00:06<00:00, 76660.30 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40): 100%|█████████▉| 626725/629183 [00:06<00:00, 53345.20 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=40): 100%|██████████| 629183/629183 [00:06<00:00, 94542.16 examples/s]
[36m(TaskRunner pid=3050306)[0m dataset len: 2271293
[36m(TaskRunner pid=3050306)[0m Using dataset class: RLHFDataset
[36m(TaskRunner pid=3050306)[0m num_proc must be <= 10. Reducing num_proc to 10 for dataset of size 10.
[36m(TaskRunner pid=3050306)[0m WARNING:2025-08-23 21:25:40,670:num_proc must be <= 10. Reducing num_proc to 10 for dataset of size 10.
[36m(TaskRunner pid=3050306)[0m Setting TOKENIZERS_PARALLELISM=false for forked processes.
[36m(TaskRunner pid=3050306)[0m WARNING:2025-08-23 21:25:40,671:Setting TOKENIZERS_PARALLELISM=false for forked processes.
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=10):   0%|          | 0/10 [00:00<?, ? examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=10):  10%|█         | 1/10 [00:00<00:04,  1.92 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=10):  30%|███       | 3/10 [00:00<00:01,  5.17 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=10):  50%|█████     | 5/10 [00:00<00:00,  7.26 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=10):  70%|███████   | 7/10 [00:01<00:00,  8.41 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=10):  90%|█████████ | 9/10 [00:01<00:00,  9.68 examples/s]
[36m(TaskRunner pid=3050306)[0m Filter (num_proc=10): 100%|██████████| 10/10 [00:01<00:00,  7.13 examples/s]
[36m(TaskRunner pid=3050306)[0m dataset len: 9
[36m(TaskRunner pid=3050306)[0m [validate_config] All configuration checks passed successfully!
[36m(TaskRunner pid=3050306)[0m DeprecationWarning: `ray.state.available_resources_per_node` is a private attribute and access will be removed in a future Ray version.
[36m(TaskRunner pid=3050306)[0m Size of train dataloader: 2218, Size of val dataloader: 1
[36m(TaskRunner pid=3050306)[0m Total training steps: 2218
[36m(TaskRunner pid=3050306)[0m colocated worker base class <class 'verl.single_controller.base.worker.Worker'>
[36m(TaskRunner pid=3050306)[0m WARNING:2025-08-23 21:25:42,936:Waiting for register center actor fhph1w_register_center to be ready. Elapsed time: 0 seconds out of 300 seconds.
[36m(pid=3062288)[0m 2025-08-23 21:25:49.082664: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
[36m(pid=3062288)[0m 2025-08-23 21:25:49.098009: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:485] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered
[36m(pid=3062288)[0m 2025-08-23 21:25:49.115339: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:8454] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered
[36m(pid=3062288)[0m 2025-08-23 21:25:49.120352: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1452] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered
[36m(pid=3062288)[0m 2025-08-23 21:25:49.133706: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
[36m(pid=3062288)[0m To enable the following instructions: AVX2 AVX512F AVX512_VNNI AVX512_BF16 AVX512_FP16 AVX_VNNI AMX_TILE AMX_INT8 AMX_BF16 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
[36m(pid=3062288)[0m 2025-08-23 21:25:50.066596: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT
[36m(pid=3062566)[0m 2025-08-23 21:26:00.483711: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
[36m(pid=3062566)[0m 2025-08-23 21:26:00.499056: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:485] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered
[36m(pid=3062566)[0m 2025-08-23 21:26:00.516463: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:8454] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered
[36m(pid=3062566)[0m 2025-08-23 21:26:00.521528: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1452] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered
[36m(pid=3062566)[0m 2025-08-23 21:26:00.534917: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
[36m(pid=3062566)[0m To enable the following instructions: AVX2 AVX512F AVX512_VNNI AVX512_BF16 AVX512_FP16 AVX_VNNI AMX_TILE AMX_INT8 AMX_BF16 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
[36m(pid=3062568)[0m 2025-08-23 21:26:00.516154: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
[36m(pid=3062568)[0m 2025-08-23 21:26:00.531006: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:485] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered
[36m(pid=3062568)[0m 2025-08-23 21:26:00.548005: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:8454] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered
[36m(pid=3062568)[0m 2025-08-23 21:26:00.552912: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1452] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered
[36m(pid=3062568)[0m 2025-08-23 21:26:00.565734: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
[36m(pid=3062568)[0m To enable the following instructions: AVX2 AVX512F AVX512_VNNI AVX512_BF16 AVX512_FP16 AVX_VNNI AMX_TILE AMX_INT8 AMX_BF16 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
[36m(pid=3062566)[0m 2025-08-23 21:26:01.520914: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT
[36m(WorkerDict pid=3062569)[0m You are attempting to use Flash Attention 2.0 with a model not initialized on GPU. Make sure to move the model to GPU after initializing it on CPU with `model.to('cuda')`.
[36m(WorkerDict pid=3062569)[0m Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s]
[36m(pid=3062564)[0m 2025-08-23 21:26:02.285332: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.[32m [repeated 5x across cluster] (Ray deduplicates logs by default. Set RAY_DEDUP_LOGS=0 to disable log deduplication, or see https://docs.ray.io/en/master/ray-observability/user-guides/configure-logging.html#log-deduplication for more options.)[0m
[36m(pid=3062564)[0m 2025-08-23 21:26:02.299838: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:485] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered[32m [repeated 5x across cluster][0m
[36m(pid=3062564)[0m 2025-08-23 21:26:02.316703: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:8454] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered[32m [repeated 5x across cluster][0m
[36m(pid=3062564)[0m 2025-08-23 21:26:02.321680: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1452] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered[32m [repeated 5x across cluster][0m
[36m(pid=3062564)[0m 2025-08-23 21:26:02.334420: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.[32m [repeated 5x across cluster][0m
[36m(pid=3062564)[0m To enable the following instructions: AVX2 AVX512F AVX512_VNNI AVX512_BF16 AVX512_FP16 AVX_VNNI AMX_TILE AMX_INT8 AMX_BF16 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.[32m [repeated 5x across cluster][0m
[36m(WorkerDict pid=3062288)[0m Model config after override: Olmo2Config {
[36m(WorkerDict pid=3062288)[0m   "architectures": [
[36m(WorkerDict pid=3062288)[0m     "Olmo2ForCausalLM"
[36m(WorkerDict pid=3062288)[0m   ],
[36m(WorkerDict pid=3062288)[0m   "attention_bias": false,
[36m(WorkerDict pid=3062288)[0m   "attention_dropout": 0.0,
[36m(WorkerDict pid=3062288)[0m   "bos_token_id": 100257,
[36m(WorkerDict pid=3062288)[0m   "eos_token_id": 100257,
[36m(WorkerDict pid=3062288)[0m   "hidden_act": "silu",
[36m(WorkerDict pid=3062288)[0m   "hidden_size": 2048,
[36m(WorkerDict pid=3062288)[0m   "initializer_range": 0.02,
[36m(WorkerDict pid=3062288)[0m   "intermediate_size": 8192,
[36m(WorkerDict pid=3062288)[0m   "max_position_embeddings": 4096,
[36m(WorkerDict pid=3062288)[0m   "model_type": "olmo2",
[36m(WorkerDict pid=3062288)[0m   "num_attention_heads": 16,
[36m(WorkerDict pid=3062288)[0m   "num_hidden_layers": 16,
[36m(WorkerDict pid=3062288)[0m   "num_key_value_heads": 16,
[36m(WorkerDict pid=3062288)[0m   "pad_token_id": 100277,
[36m(WorkerDict pid=3062288)[0m   "rms_norm_eps": 1e-06,
[36m(WorkerDict pid=3062288)[0m   "rope_scaling": null,
[36m(WorkerDict pid=3062288)[0m   "rope_theta": 500000,
[36m(WorkerDict pid=3062288)[0m   "tie_word_embeddings": false,
[36m(WorkerDict pid=3062288)[0m   "torch_dtype": "float32",
[36m(WorkerDict pid=3062288)[0m   "transformers_version": "4.51.1",
[36m(WorkerDict pid=3062288)[0m   "use_cache": true,
[36m(WorkerDict pid=3062288)[0m   "vocab_size": 100352
[36m(WorkerDict pid=3062288)[0m }
[36m(WorkerDict pid=3062288)[0m 
[36m(pid=3062563)[0m 2025-08-23 21:26:03.387404: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT[32m [repeated 6x across cluster][0m
[36m(WorkerDict pid=3062569)[0m Loading checkpoint shards:  50%|█████     | 1/2 [00:01<00:01,  1.86s/it]
[36m(WorkerDict pid=3062569)[0m Loading checkpoint shards: 100%|██████████| 2/2 [00:02<00:00,  1.02it/s]Loading checkpoint shards: 100%|██████████| 2/2 [00:02<00:00,  1.11s/it]
[36m(WorkerDict pid=3062569)[0m Monkey patch _flash_attention_forward in transformers.integrations.flash_attention
[36m(WorkerDict pid=3062569)[0m Skipping monkey patch for Olmo2ForCausalLM as use_fused_kernels is False or fused_kernels_backend is torch
[36m(WorkerDict pid=3062288)[0m Olmo2ForCausalLM contains 1.48B parameters
[36m(WorkerDict pid=3062288)[0m wrap_policy: functools.partial(<function _or_policy at 0x78b80a5deb90>, policies=[functools.partial(<function transformer_auto_wrap_policy at 0x78b80a5dea70>, transformer_layer_cls={<class 'transformers.models.olmo2.modeling_olmo2.Olmo2DecoderLayer'>})])
[36m(WorkerDict pid=3062288)[0m NCCL version 2.21.5+cuda12.4
[36m(WorkerDict pid=3062288)[0m 
[36m(WorkerDict pid=3062288)[0m bolt-f4pdfx26wb-c5cg2sruft:3062288:3064031 [0] /nccl-shim-net/src/guest_config_checker.cc:101 NCCL WARN NCCL/NET (shim) mismatch recommended: NCCL_FASTRAK_LLCM_DEVICE_DIRECTORY=/dev/aperture_devices (expected unset)
[36m(WorkerDict pid=3062288)[0m 
[36m(WorkerDict pid=3062288)[0m bolt-f4pdfx26wb-c5cg2sruft:3062288:3064031 [0] /nccl-shim-net/src/guest_config_checker.cc:101 NCCL WARN NCCL/NET (shim) mismatch recommended: NCCL_LIB_DIR=/usr/local/nvidia/lib64 (expected unset)
[36m(WorkerDict pid=3062288)[0m 
[36m(WorkerDict pid=3062288)[0m bolt-f4pdfx26wb-c5cg2sruft:3062288:3064031 [0] /nccl-shim-net/src/guest_config_checker.cc:101 NCCL WARN NCCL/NET (shim) mismatch recommended: NCCL_DYNAMIC_CHUNK_SIZE=524288 (expected unset)
[36m(WorkerDict pid=3062288)[0m 
[36m(WorkerDict pid=3062288)[0m bolt-f4pdfx26wb-c5cg2sruft:3062288:3064031 [0] /nccl-shim-net/src/guest_config_checker.cc:101 NCCL WARN NCCL/NET (shim) mismatch recommended: NCCL_TESTS_VERSION=2.13.6 (expected unset)
[36m(WorkerDict pid=3062288)[0m 
[36m(WorkerDict pid=3062288)[0m bolt-f4pdfx26wb-c5cg2sruft:3062288:3064031 [0] /nccl-shim-net/src/guest_config_checker.cc:101 NCCL WARN NCCL/NET (shim) mismatch recommended: cpu affinity settings not subset, curr=0xffff,ffffffff,ffffffff,ffffffff,ffffffff,ffffffff,ffffffff (expected 0xffffffff,00000000)
[36m(WorkerDict pid=3062569)[0m 
[36m(WorkerDict pid=3062569)[0m 
[36m(WorkerDict pid=3062569)[0m 
[36m(WorkerDict pid=3062569)[0m 
[36m(WorkerDict pid=3062569)[0m 
[36m(WorkerDict pid=3062563)[0m 
[36m(WorkerDict pid=3062563)[0m 
[36m(WorkerDict pid=3062563)[0m 
[36m(WorkerDict pid=3062563)[0m 
[36m(WorkerDict pid=3062563)[0m 
[36m(WorkerDict pid=3062565)[0m 
[36m(WorkerDict pid=3062565)[0m 
[36m(WorkerDict pid=3062565)[0m 
[36m(WorkerDict pid=3062565)[0m 
[36m(WorkerDict pid=3062565)[0m 
[36m(WorkerDict pid=3062568)[0m 
[36m(WorkerDict pid=3062568)[0m 
[36m(WorkerDict pid=3062568)[0m 
[36m(WorkerDict pid=3062568)[0m 
[36m(WorkerDict pid=3062568)[0m 
[36m(WorkerDict pid=3062566)[0m 
[36m(WorkerDict pid=3062566)[0m 
[36m(WorkerDict pid=3062566)[0m 
[36m(WorkerDict pid=3062566)[0m 
[36m(WorkerDict pid=3062566)[0m 
[36m(WorkerDict pid=3062567)[0m 
[36m(WorkerDict pid=3062567)[0m 
[36m(WorkerDict pid=3062567)[0m 
[36m(WorkerDict pid=3062567)[0m 
[36m(WorkerDict pid=3062567)[0m 
[36m(WorkerDict pid=3062564)[0m 
[36m(WorkerDict pid=3062564)[0m 
[36m(WorkerDict pid=3062564)[0m 
[36m(WorkerDict pid=3062564)[0m 
[36m(WorkerDict pid=3062564)[0m 
[36m(WorkerDict pid=3062288)[0m 
[36m(WorkerDict pid=3062288)[0m bolt-f4pdfx26wb-c5cg2sruft:3062288:3064031 [0] /nccl-tuner-config-based/src/config_based_tuner.cc:155 NCCL WARN Cannot find communicatorTunerConfig for communicator(num_node:1, num_rank:8) with config:communicator_configs {
[36m(WorkerDict pid=3062288)[0m   node_range {
[36m(WorkerDict pid=3062288)[0m     min: 2
[36m(WorkerDict pid=3062288)[0m     max: 3
[36m(WorkerDict pid=3062288)[0m   }
[36m(WorkerDict pid=3062288)[0m   rank_per_node_range {
[36m(WorkerDict pid=3062288)[0m     min: 1
[36m(WorkerDict pid=3062288)[0m     max: 2
[36m(WorkerDict pid=3062288)[0m   }
[36m(WorkerDict pid=3062288)[0m   coll_configs {
[36m(WorkerDict pid=3062288)[0m     coll_type: COLL_ALL_REDUCE
[36m(WorkerDict pid=3062288)[0m     msg_size_tuning_rules {
[36m(WorkerDict pid=3062288)[0m       per_rank_message_size {
[36m(WorkerDict pid=3062288)[0m         min: 0
[36m(WorkerDict pid=3062288)[0m       }
[36m(WorkerDict pid=3062288)[0m       coll_tuning_spec {
[36m(WorkerDict pid=3062288)[0m         num_channel: 2
[36m(WorkerDict pid=3062288)[0m         protocol: PROTO_SIMPLE
[36m(WorkerDict pid=3062288)[0m         algorithm: ALGO_TREE
[36m(WorkerDict pid=3062288)[0m       }
[36m(WorkerDict pid=3062288)[0m     }
[36m(WorkerDict pid=3062288)[0m   }
[36m(WorkerDict pid=3062288)[0m   coll_configs {
[36m(WorkerDict pid=3062288)[0m     coll_type: COLL_DEFAULT
[36m(WorkerDict pid=3062288)[0m     msg_size_tuning_rules {
[36m(WorkerDict pid=3062288)[0m       per_rank_message_size {
[36m(WorkerDict pid=3062288)[0m         min: 0
[36m(WorkerDict pid=3062288)[0m         max: 65536
[36m(WorkerDict pid=3062288)[0m       }
[36m(WorkerDict pid=3062288)[0m       coll_tuning_spec {
[36m(WorkerDict pid=3062288)[0m         num_channel: 2
[36m(WorkerDict pid=3062288)[0m         protocol: PROTO_SIMPLE
[36m(WorkerDict pid=3062288)[0m         algorithm: ALGO_RING
[36m(WorkerDict pid=3062288)[0m       }
[36m(WorkerDict pid=3062288)[0m     }
[36m(WorkerDict pid=3062288)[0m     msg_size_tuning_rules {
[36m(WorkerDict pid=3062288)[0m       per_rank_message_size {
[36m(WorkerDict pid=3062288)[0m         min: 65536
[36m(WorkerDict pid=3062288)[0m       }
[36m(WorkerDict pid=3062288)[0m       coll_tuning_spec {
[36m(WorkerDict pid=3062288)[0m         num_channel: 4
[36m(WorkerDict pid=3062288)[0m         protocol: PROTO_SIMPLE
[36m(WorkerDict pid=3062288)[0m         algorithm: AL
[36m(WorkerDict pid=3062288)[0m 
[36m(WorkerDict pid=3062288)[0m bolt-f4pdfx26wb-c5cg2sruft:3062288:3064031 [0] /nccl-tuner-config-based/src/config_based_tuner.cc:271 NCCL WARN No communicator config selected from config:communicator_configs {
[36m(WorkerDict pid=3062288)[0m   node_range {
[36m(WorkerDict pid=3062288)[0m     min: 2
[36m(WorkerDict pid=3062288)[0m     max: 3
[36m(WorkerDict pid=3062288)[0m   }
[36m(WorkerDict pid=3062288)[0m   rank_per_node_range {
[36m(WorkerDict pid=3062288)[0m     min: 1
[36m(WorkerDict pid=3062288)[0m     max: 2
[36m(WorkerDict pid=3062288)[0m   }
[36m(WorkerDict pid=3062288)[0m   coll_configs {
[36m(WorkerDict pid=3062288)[0m     coll_type: COLL_ALL_REDUCE
[36m(WorkerDict pid=3062288)[0m     msg_size_tuning_rules {
[36m(WorkerDict pid=3062288)[0m       per_rank_message_size {
[36m(WorkerDict pid=3062288)[0m         min: 0
[36m(WorkerDict pid=3062288)[0m       }
[36m(WorkerDict pid=3062288)[0m       coll_tuning_spec {
[36m(WorkerDict pid=3062288)[0m         num_channel: 2
[36m(WorkerDict pid=3062288)[0m         protocol: PROTO_SIMPLE
[36m(WorkerDict pid=3062288)[0m         algorithm: ALGO_TREE
[36m(WorkerDict pid=3062288)[0m       }
[36m(WorkerDict pid=3062288)[0m     }
[36m(WorkerDict pid=3062288)[0m   }
[36m(WorkerDict pid=3062288)[0m   coll_configs {
[36m(WorkerDict pid=3062288)[0m     coll_type: COLL_DEFAULT
[36m(WorkerDict pid=3062288)[0m     msg_size_tuning_rules {
[36m(WorkerDict pid=3062288)[0m       per_rank_message_size {
[36m(WorkerDict pid=3062288)[0m         min: 0
[36m(WorkerDict pid=3062288)[0m         max: 65536
[36m(WorkerDict pid=3062288)[0m       }
[36m(WorkerDict pid=3062288)[0m       coll_tuning_spec {
[36m(WorkerDict pid=3062288)[0m         num_channel: 2
[36m(WorkerDict pid=3062288)[0m         protocol: PROTO_SIMPLE
[36m(WorkerDict pid=3062288)[0m         algorithm: ALGO_RING
[36m(WorkerDict pid=3062288)[0m       }
[36m(WorkerDict pid=3062288)[0m     }
[36m(WorkerDict pid=3062288)[0m     msg_size_tuning_rules {
[36m(WorkerDict pid=3062288)[0m       per_rank_message_size {
[36m(WorkerDict pid=3062288)[0m         min: 65536
[36m(WorkerDict pid=3062288)[0m       }
[36m(WorkerDict pid=3062288)[0m       coll_tuning_spec {
[36m(WorkerDict pid=3062288)[0m         num_channel: 4
[36m(WorkerDict pid=3062288)[0m         protocol: PROTO_SIMPLE
[36m(WorkerDict pid=3062288)[0m         algorithm: ALGO_RING
[36m(WorkerDict pid=3062288)[0m       }
[36m(WorkerDict pid=3062288)[0m     }
[36m(WorkerDict pid=3062288)[0m   }
[36m(WorkerDict pid=3062288)[0m }
[36m(WorkerDict pid=3062288)[0m communicator_conf
[36m(WorkerDict pid=3062288)[0m 
[36m(WorkerDict pid=3062288)[0m bolt-f4pdfx26wb-c5cg2sruft:3062288:3064031 [0] /nccl-tuner-config-based/src/tuner_tcpx.cc:70 NCCL WARN No communicator found for nRanks:8, nNodes:1 from config_path:/usr/local/nvidia/lib64/a3plus_tuner_config.textproto
[36m(WorkerDict pid=3062288)[0m Monkey patch _flash_attention_forward in transformers.integrations.flash_attention[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=3062288)[0m Skipping monkey patch for Olmo2ForCausalLM as use_fused_kernels is False or fused_kernels_backend is torch[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=3062564)[0m bolt-f4pdfx26wb-c5cg2sruft:3062564:3064041 [0] /nccl-shim-net/src/guest_config_checker.cc:101 NCCL WARN NCCL/NET (shim) mismatch recommended: NCCL_FASTRAK_LLCM_DEVICE_DIRECTORY=/dev/aperture_devices (expected unset)[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=3062564)[0m bolt-f4pdfx26wb-c5cg2sruft:3062564:3064041 [0] /nccl-shim-net/src/guest_config_checker.cc:101 NCCL WARN NCCL/NET (shim) mismatch recommended: NCCL_TESTS_VERSION=2.13.6 (expected unset)[32m [repeated 21x across cluster][0m
[36m(WorkerDict pid=3062564)[0m bolt-f4pdfx26wb-c5cg2sruft:3062564:3064041 [0] /nccl-shim-net/src/guest_config_checker.cc:101 NCCL WARN NCCL/NET (shim) mismatch recommended: cpu affinity settings not subset, curr=0xffff,ffffffff,ffffffff,ffffffff,ffffffff,ffffffff,ffffffff (expected 0xffffffff,00000000)[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=3062565)[0m 
[36m(WorkerDict pid=3062565)[0m   }
[36m(WorkerDict pid=3062565)[0m   }
[36m(WorkerDict pid=3062565)[0m       }
[36m(WorkerDict pid=3062565)[0m       }
[36m(WorkerDict pid=3062565)[0m     }
[36m(WorkerDict pid=3062565)[0m   }
[36m(WorkerDict pid=3062565)[0m       }
[36m(WorkerDict pid=3062565)[0m       }
[36m(WorkerDict pid=3062565)[0m     }
[36m(WorkerDict pid=3062565)[0m       }
[36m(WorkerDict pid=3062565)[0m 
[36m(WorkerDict pid=3062565)[0m   }
[36m(WorkerDict pid=3062565)[0m   }
[36m(WorkerDict pid=3062565)[0m       }
[36m(WorkerDict pid=3062565)[0m       }
[36m(WorkerDict pid=3062565)[0m     }
[36m(WorkerDict pid=3062565)[0m   }
[36m(WorkerDict pid=3062565)[0m       }
[36m(WorkerDict pid=3062565)[0m       }
[36m(WorkerDict pid=3062565)[0m     }
[36m(WorkerDict pid=3062565)[0m       }
[36m(WorkerDict pid=3062565)[0m       }
[36m(WorkerDict pid=3062565)[0m     }
[36m(WorkerDict pid=3062565)[0m   }
[36m(WorkerDict pid=3062565)[0m }
[36m(WorkerDict pid=3062565)[0m 
[36m(WorkerDict pid=3062568)[0m 
[36m(WorkerDict pid=3062568)[0m 
[36m(WorkerDict pid=3062568)[0m 
[36m(WorkerDict pid=3062569)[0m 
[36m(WorkerDict pid=3062569)[0m 
[36m(WorkerDict pid=3062569)[0m 
[36m(WorkerDict pid=3062563)[0m 
[36m(WorkerDict pid=3062563)[0m 
[36m(WorkerDict pid=3062563)[0m 
[36m(WorkerDict pid=3062566)[0m 
[36m(WorkerDict pid=3062566)[0m 
[36m(WorkerDict pid=3062566)[0m 
[36m(WorkerDict pid=3062564)[0m 
[36m(WorkerDict pid=3062564)[0m 
[36m(WorkerDict pid=3062564)[0m 
[36m(WorkerDict pid=3062567)[0m 
[36m(WorkerDict pid=3062567)[0m 
[36m(WorkerDict pid=3062567)[0m 
[36m(WorkerDict pid=3062288)[0m Actor use_remove_padding=True
[36m(WorkerDict pid=3062288)[0m Actor use_fused_kernels=False
[36m(WorkerDict pid=3062569)[0m Flash Attention 2.0 only supports torch.float16 and torch.bfloat16 dtypes, but the current dype in Olmo2ForCausalLM is torch.float32. You should run training or inference using Automatic Mixed-Precision via the `with torch.autocast(device_type='torch_device'):` decorator, or load the model with the `torch_dtype` argument. Example: `model = AutoModel.from_pretrained("openai/whisper-tiny", attn_implementation="flash_attention_2", torch_dtype=torch.float16)`
[36m(WorkerDict pid=3062288)[0m You are attempting to use Flash Attention 2.0 with a model not initialized on GPU. Make sure to move the model to GPU after initializing it on CPU with `model.to('cuda')`.[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=3062288)[0m Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s][32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=3062288)[0m Loading checkpoint shards:  50%|█████     | 1/2 [00:02<00:02,  2.01s/it][32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=3062288)[0m Loading checkpoint shards: 100%|██████████| 2/2 [00:02<00:00,  1.03s/it]Loading checkpoint shards: 100%|██████████| 2/2 [00:02<00:00,  1.18s/it][32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=3062288)[0m Model config after override: Olmo2Config {
[36m(WorkerDict pid=3062288)[0m   "architectures": [
[36m(WorkerDict pid=3062288)[0m     "Olmo2ForCausalLM"
[36m(WorkerDict pid=3062288)[0m   ],
[36m(WorkerDict pid=3062288)[0m   "attention_bias": false,
[36m(WorkerDict pid=3062288)[0m   "attention_dropout": 0.0,
[36m(WorkerDict pid=3062288)[0m   "bos_token_id": 100257,
[36m(WorkerDict pid=3062288)[0m   "eos_token_id": 100257,
[36m(WorkerDict pid=3062288)[0m   "hidden_act": "silu",
[36m(WorkerDict pid=3062288)[0m   "hidden_size": 2048,
[36m(WorkerDict pid=3062288)[0m   "initializer_range": 0.02,
[36m(WorkerDict pid=3062288)[0m   "intermediate_size": 8192,
[36m(WorkerDict pid=3062288)[0m   "max_position_embeddings": 4096,
[36m(WorkerDict pid=3062288)[0m   "model_type": "olmo2",
[36m(WorkerDict pid=3062288)[0m   "num_attention_heads": 16,
[36m(WorkerDict pid=3062288)[0m   "num_hidden_layers": 16,
[36m(WorkerDict pid=3062288)[0m   "num_key_value_heads": 16,
[36m(WorkerDict pid=3062288)[0m   "pad_token_id": 100277,
[36m(WorkerDict pid=3062288)[0m   "rms_norm_eps": 1e-06,
[36m(WorkerDict pid=3062288)[0m   "rope_scaling": null,
[36m(WorkerDict pid=3062288)[0m   "rope_theta": 500000,
[36m(WorkerDict pid=3062288)[0m   "tie_word_embeddings": false,
[36m(WorkerDict pid=3062288)[0m   "torch_dtype": "float32",
[36m(WorkerDict pid=3062288)[0m   "transformers_version": "4.51.1",
[36m(WorkerDict pid=3062288)[0m   "use_cache": true,
[36m(WorkerDict pid=3062288)[0m   "vocab_size": 100352
[36m(WorkerDict pid=3062288)[0m 
[36m(WorkerDict pid=3062288)[0m Olmo2ForCausalLM contains 1.48B parameters
[36m(WorkerDict pid=3062288)[0m wrap_policy: functools.partial(<function _or_policy at 0x78b80a5deb90>, policies=[functools.partial(<function transformer_auto_wrap_policy at 0x78b80a5dea70>, transformer_layer_cls={<class 'transformers.models.olmo2.modeling_olmo2.Olmo2DecoderLayer'>})])
[36m(WorkerDict pid=3062288)[0m Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s]Loading checkpoint shards: 100%|██████████| 2/2 [00:00<00:00, 42.73it/s]
[36m(WorkerDict pid=3062569)[0m Loading checkpoint shards: 100%|██████████| 2/2 [00:00<00:00, 47.62it/s]
[36m(WorkerDict pid=3062288)[0m Total steps: 2218, num_warmup_steps: 0
[36m(WorkerDict pid=3062288)[0m Actor use_remove_padding=True
[36m(WorkerDict pid=3062288)[0m Actor use_fused_kernels=False
[36m(WorkerDict pid=3062568)[0m   0%|          | 0/23 [00:00<?, ?it/s]Capturing batches (avail_mem=13.93 GB):   0%|          | 0/23 [00:00<?, ?it/s]
[36m(WorkerDict pid=3062288)[0m Flash Attention 2.0 only supports torch.float16 and torch.bfloat16 dtypes, but the current dype in Olmo2ForCausalLM is torch.float32. You should run training or inference using Automatic Mixed-Precision via the `with torch.autocast(device_type='torch_device'):` decorator, or load the model with the `torch_dtype` argument. Example: `model = AutoModel.from_pretrained("openai/whisper-tiny", attn_implementation="flash_attention_2", torch_dtype=torch.float16)`[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=3062569)[0m Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s][32m [repeated 6x across cluster][0m
[36m(WorkerDict pid=3062566)[0m Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s]Loading checkpoint shards: 100%|██████████| 2/2 [00:00<00:00, 46.49it/s]
[36m(WorkerDict pid=3062565)[0m Loading checkpoint shards: 100%|██████████| 2/2 [00:00<00:00, 49.28it/s][32m [repeated 5x across cluster][0m
[36m(WorkerDict pid=3062567)[0m Capturing batches (avail_mem=13.93 GB):   4%|▍         | 1/23 [00:00<00:21,  1.00it/s]Capturing batches (avail_mem=13.68 GB):   4%|▍         | 1/23 [00:01<00:21,  1.00it/s]
[36m(WorkerDict pid=3062564)[0m   0%|          | 0/23 [00:00<?, ?it/s]Capturing batches (avail_mem=13.93 GB):   0%|          | 0/23 [00:00<?, ?it/s][32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=3062288)[0m Capturing batches (avail_mem=12.52 GB):  48%|████▊     | 11/23 [00:05<00:05,  2.06it/s]Capturing batches (avail_mem=12.47 GB):  48%|████▊     | 11/23 [00:05<00:05,  2.06it/s][32m [repeated 69x across cluster][0m
[36m(WorkerDict pid=3062569)[0m Capturing batches (avail_mem=12.51 GB):  91%|█████████▏| 21/23 [00:09<00:00,  2.29it/s]Capturing batches (avail_mem=12.51 GB):  91%|█████████▏| 21/23 [00:09<00:00,  2.29it/s]
[36m(WorkerDict pid=3062564)[0m Capturing batches (avail_mem=12.45 GB):  83%|████████▎ | 19/23 [00:09<00:01,  2.06it/s]Capturing batches (avail_mem=12.44 GB):  83%|████████▎ | 19/23 [00:09<00:01,  2.06it/s][32m [repeated 73x across cluster][0m
[36m(WorkerDict pid=3062288)[0m Only support config type of {'qwen3', 'minicpmv', 'deepseek_v3', 'minicpmo', 'qwen2', 'qwen2_5_vl', 'llama', 'qwen3_moe', 'qwen2_vl'}, but got olmo2. MFU will always be zero.
[36m(WorkerDict pid=3062567)[0m bolt-f4pdfx26wb-c5cg2sruft:3062567:3064038 [0] /nccl-tuner-config-based/src/config_based_tuner.cc:155 NCCL WARN Cannot find communicatorTunerConfig for communicator(num_node:1, num_rank:8) with config:communicator_configs {[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=3062567)[0m   node_range {[32m [repeated 14x across cluster][0m
[36m(WorkerDict pid=3062567)[0m         min: 65536[32m [repeated 70x across cluster][0m
[36m(WorkerDict pid=3062567)[0m         max: 65536[32m [repeated 42x across cluster][0m
[36m(WorkerDict pid=3062567)[0m   rank_per_node_range {[32m [repeated 14x across cluster][0m
[36m(WorkerDict pid=3062567)[0m   coll_configs {[32m [repeated 28x across cluster][0m
[36m(WorkerDict pid=3062567)[0m     coll_type: COLL_ALL_REDUCE[32m [repeated 14x across cluster][0m
[36m(WorkerDict pid=3062567)[0m     msg_size_tuning_rules {[32m [repeated 42x across cluster][0m
[36m(WorkerDict pid=3062567)[0m       per_rank_message_size {[32m [repeated 42x across cluster][0m
[36m(WorkerDict pid=3062567)[0m       coll_tuning_spec {[32m [repeated 42x across cluster][0m
[36m(WorkerDict pid=3062567)[0m         num_channel: 4[32m [repeated 42x across cluster][0m
[36m(WorkerDict pid=3062567)[0m         protocol: PROTO_SIMPLE[32m [repeated 42x across cluster][0m
[36m(WorkerDict pid=3062567)[0m         algorithm: ALGO_TREE[32m [repeated 14x across cluster][0m
[36m(WorkerDict pid=3062567)[0m     coll_type: COLL_DEFAULT[32m [repeated 14x across cluster][0m
[36m(WorkerDict pid=3062567)[0m         algorithm: ALGO_RING[32m [repeated 21x across cluster][0m
[36m(WorkerDict pid=3062567)[0m         algorithm: AL[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=3062567)[0m bolt-f4pdfx26wb-c5cg2sruft:3062567:3064038 [0] /nccl-tuner-config-based/src/config_based_tuner.cc:271 NCCL WARN No communicator config selected from config:communicator_configs {[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=3062567)[0m communicator_conf[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=3062567)[0m bolt-f4pdfx26wb-c5cg2sruft:3062567:3064038 [0] /nccl-tuner-config-based/src/tuner_tcpx.cc:70 NCCL WARN No communicator found for nRanks:8, nNodes:1 from config_path:/usr/local/nvidia/lib64/a3plus_tuner_config.textproto[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=3062567)[0m Monkey patch _flash_attention_forward in transformers.integrations.flash_attention[32m [repeated 8x across cluster][0m
[36m(WorkerDict pid=3062567)[0m Skipping monkey patch for Olmo2ForCausalLM as use_fused_kernels is False or fused_kernels_backend is torch[32m [repeated 8x across cluster][0m
[36m(WorkerDict pid=3062288)[0m }[32m [repeated 145x across cluster][0m
[36m(WorkerDict pid=3062288)[0m /usr/local/lib/python3.10/dist-packages/torch/distributed/fsdp/fully_sharded_data_parallel.py:690: FutureWarning: FSDP.state_dict_type() and FSDP.set_state_dict_type() are being deprecated. Please use APIs, get_state_dict() and set_state_dict(), which can support different parallelisms, FSDP1, FSDP2, DDP. API doc: https://pytorch.org/docs/stable/distributed.checkpoint.html#torch.distributed.checkpoint.state_dict.get_state_dict .Tutorial: https://pytorch.org/tutorials/recipes/distributed_checkpoint_recipe.html .
[36m(WorkerDict pid=3062288)[0m   warnings.warn(
[36m(WorkerDict pid=3062569)[0m Only support config type of {'minicpmo', 'llama', 'qwen3_moe', 'qwen2', 'deepseek_v3', 'qwen2_5_vl', 'minicpmv', 'qwen2_vl', 'qwen3'}, but got olmo2. MFU will always be zero.
[36m(WorkerDict pid=3062564)[0m Only support config type of {'llama', 'qwen2_5_vl', 'qwen3_moe', 'qwen3', 'qwen2', 'minicpmv', 'qwen2_vl', 'deepseek_v3', 'minicpmo'}, but got olmo2. MFU will always be zero.
[36m(WorkerDict pid=3062563)[0m Only support config type of {'qwen3_moe', 'qwen2_vl', 'minicpmo', 'llama', 'qwen2', 'deepseek_v3', 'qwen3', 'qwen2_5_vl', 'minicpmv'}, but got olmo2. MFU will always be zero.
[36m(WorkerDict pid=3062567)[0m Only support config type of {'qwen3_moe', 'minicpmo', 'qwen3', 'llama', 'deepseek_v3', 'qwen2_vl', 'qwen2_5_vl', 'minicpmv', 'qwen2'}, but got olmo2. MFU will always be zero.
[36m(WorkerDict pid=3062568)[0m Only support config type of {'qwen2', 'qwen2_vl', 'qwen3_moe', 'llama', 'deepseek_v3', 'minicpmo', 'minicpmv', 'qwen2_5_vl', 'qwen3'}, but got olmo2. MFU will always be zero.
[36m(WorkerDict pid=3062565)[0m Only support config type of {'qwen2', 'minicpmv', 'qwen3_moe', 'qwen2_vl', 'qwen3', 'qwen2_5_vl', 'llama', 'deepseek_v3', 'minicpmo'}, but got olmo2. MFU will always be zero.
[36m(WorkerDict pid=3062566)[0m Only support config type of {'minicpmo', 'qwen2_5_vl', 'qwen2', 'deepseek_v3', 'llama', 'qwen2_vl', 'qwen3_moe', 'qwen3', 'minicpmv'}, but got olmo2. MFU will always be zero.
[36m(TaskRunner pid=3050306)[0m wandb: Currently logged in as: shenaozhang (shenaoz) to https://api.wandb.ai. Use `wandb login --relogin` to force relogin
[36m(WorkerDict pid=3062566)[0m Capturing batches (avail_mem=12.42 GB): 100%|██████████| 23/23 [00:13<00:00,  1.82it/s]Capturing batches (avail_mem=12.42 GB): 100%|██████████| 23/23 [00:13<00:00,  1.68it/s][32m [repeated 23x across cluster][0m
[36m(WorkerDict pid=3062566)[0m Capturing batches (avail_mem=12.44 GB):  87%|████████▋ | 20/23 [00:12<00:01,  1.73it/s]Capturing batches (avail_mem=12.44 GB):  87%|████████▋ | 20/23 [00:12<00:01,  1.73it/s][32m [repeated 17x across cluster][0m
[36m(TaskRunner pid=3050306)[0m wandb: Tracking run with wandb version 0.21.1
[36m(TaskRunner pid=3050306)[0m wandb: Run data is saved locally in /mnt/task_runtime/verl/wandb/run-20250823_212719-eep55nvs
[36m(TaskRunner pid=3050306)[0m wandb: Run `wandb offline` to turn off syncing.
[36m(TaskRunner pid=3050306)[0m wandb: Syncing run openandsyn-ours-80-200-olmo-nowarmup-window3-std-0005entropy-12lenpenalty-nopenalty-alreadynextline-mustsharp
[36m(TaskRunner pid=3050306)[0m wandb: ⭐️ View project at https://wandb.ai/shenaoz/em-new
[36m(TaskRunner pid=3050306)[0m wandb: 🚀 View run at https://wandb.ai/shenaoz/em-new/runs/eep55nvs
[36m(WorkerDict pid=3062566)[0m /usr/local/lib/python3.10/dist-packages/torch/distributed/fsdp/fully_sharded_data_parallel.py:690: FutureWarning: FSDP.state_dict_type() and FSDP.set_state_dict_type() are being deprecated. Please use APIs, get_state_dict() and set_state_dict(), which can support different parallelisms, FSDP1, FSDP2, DDP. API doc: https://pytorch.org/docs/stable/distributed.checkpoint.html#torch.distributed.checkpoint.state_dict.get_state_dict .Tutorial: https://pytorch.org/tutorials/recipes/distributed_checkpoint_recipe.html .[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=3062566)[0m   warnings.warn([32m [repeated 7x across cluster][0m
[36m(TaskRunner pid=3050306)[0m Training Progress:   0%|          | 0/2218 [00:00<?, ?it/s]
[36m(TaskRunner pid=3050306)[0m Checkpoint tracker file does not exist: /mnt/task_wrapper/user_output/artifacts/checkpoints/em-new/openandsyn-ours-80-200-olmo-nowarmup-window3-std-0005entropy-12lenpenalty-nopenalty-alreadynextline-mustsharp/latest_checkpointed_iteration.txt
[36m(TaskRunner pid=3050306)[0m Training from scratch
[36m(TaskRunner pid=3050306)[0m global_steps 1
[36m(WorkerDict pid=3062567)[0m sssss
[36m(WorkerDict pid=3062563)[0m sssss[32m [repeated 6x across cluster][0m
[36m(WorkerDict pid=3062288)[0m /mnt/task_runtime/verl/verl/workers/rollout/sglang_rollout/utils.py:49: UserWarning: The given NumPy array is not writable, and PyTorch does not support non-writable tensors. This means writing to this tensor will result in undefined behavior. You may want to copy the array to protect its data or make it writable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at /pytorch/torch/csrc/utils/tensor_numpy.cpp:203.)
[36m(WorkerDict pid=3062288)[0m   tensor_data = torch.ByteTensor(np.frombuffer(serialized_data, dtype=np.uint8)).to(device)
[36m(WorkerDict pid=3062565)[0m NCCL version 2.21.5+cuda12.4
[36m(WorkerDict pid=3062568)[0m 
[36m(WorkerDict pid=3062568)[0m bolt-f4pdfx26wb-c5cg2sruft:3062568:3066967 [0] /nccl-tuner-config-based/src/config_based_tuner.cc:155 NCCL WARN Cannot find communicatorTunerConfig for communicator(num_node:1, num_rank:1) with config:communicator_configs {
[36m(WorkerDict pid=3062568)[0m   node_range {
[36m(WorkerDict pid=3062568)[0m     min: 2
[36m(WorkerDict pid=3062568)[0m     max: 3
[36m(WorkerDict pid=3062568)[0m   }
[36m(WorkerDict pid=3062568)[0m   rank_per_node_range {
[36m(WorkerDict pid=3062568)[0m     min: 1
[36m(WorkerDict pid=3062568)[0m     max: 2
[36m(WorkerDict pid=3062568)[0m   }
[36m(WorkerDict pid=3062568)[0m   coll_configs {
[36m(WorkerDict pid=3062568)[0m     coll_type: COLL_ALL_REDUCE
[36m(WorkerDict pid=3062568)[0m     msg_size_tuning_rules {
[36m(WorkerDict pid=3062568)[0m       per_rank_message_size {
[36m(WorkerDict pid=3062568)[0m         min: 0
[36m(WorkerDict pid=3062568)[0m       }
[36m(WorkerDict pid=3062568)[0m       coll_tuning_spec {
[36m(WorkerDict pid=3062568)[0m         num_channel: 2
[36m(WorkerDict pid=3062568)[0m         protocol: PROTO_SIMPLE
[36m(WorkerDict pid=3062568)[0m         algorithm: ALGO_TREE
[36m(WorkerDict pid=3062568)[0m       }
[36m(WorkerDict pid=3062568)[0m     }
[36m(WorkerDict pid=3062568)[0m   }
[36m(WorkerDict pid=3062568)[0m   coll_configs {
[36m(WorkerDict pid=3062568)[0m     coll_type: COLL_DEFAULT
[36m(WorkerDict pid=3062568)[0m     msg_size_tuning_rules {
[36m(WorkerDict pid=3062568)[0m       per_rank_message_size {
[36m(WorkerDict pid=3062568)[0m         min: 0
[36m(WorkerDict pid=3062568)[0m         max: 65536
[36m(WorkerDict pid=3062568)[0m       }
[36m(WorkerDict pid=3062568)[0m       coll_tuning_spec {
[36m(WorkerDict pid=3062568)[0m         num_channel: 2
[36m(WorkerDict pid=3062568)[0m         protocol: PROTO_SIMPLE
[36m(WorkerDict pid=3062568)[0m         algorithm: ALGO_RING
[36m(WorkerDict pid=3062568)[0m       }
[36m(WorkerDict pid=3062568)[0m     }
[36m(WorkerDict pid=3062568)[0m     msg_size_tuning_rules {
[36m(WorkerDict pid=3062568)[0m       per_rank_message_size {
[36m(WorkerDict pid=3062568)[0m         min: 65536
[36m(WorkerDict pid=3062568)[0m       }
[36m(WorkerDict pid=3062568)[0m       coll_tuning_spec {
[36m(WorkerDict pid=3062568)[0m         num_channel: 4
[36m(WorkerDict pid=3062568)[0m         protocol: PROTO_SIMPLE
[36m(WorkerDict pid=3062568)[0m         algorithm: AL
[36m(WorkerDict pid=3062568)[0m 
[36m(WorkerDict pid=3062568)[0m bolt-f4pdfx26wb-c5cg2sruft:3062568:3066967 [0] /nccl-tuner-config-based/src/config_based_tuner.cc:271 NCCL WARN No communicator config selected from config:communicator_configs {
[36m(WorkerDict pid=3062568)[0m   node_range {
[36m(WorkerDict pid=3062568)[0m     min: 2
[36m(WorkerDict pid=3062568)[0m     max: 3
[36m(WorkerDict pid=3062568)[0m   }
[36m(WorkerDict pid=3062568)[0m   rank_per_node_range {
[36m(WorkerDict pid=3062568)[0m     min: 1
[36m(WorkerDict pid=3062568)[0m     max: 2
[36m(WorkerDict pid=3062568)[0m   }
[36m(WorkerDict pid=3062568)[0m   coll_configs {
[36m(WorkerDict pid=3062568)[0m     coll_type: COLL_ALL_REDUCE
[36m(WorkerDict pid=3062568)[0m     msg_size_tuning_rules {
[36m(WorkerDict pid=3062568)[0m       per_rank_message_size {
[36m(WorkerDict pid=3062568)[0m         min: 0
[36m(WorkerDict pid=3062568)[0m       }
[36m(WorkerDict pid=3062568)[0m       coll_tuning_spec {
[36m(WorkerDict pid=3062568)[0m         num_channel: 2
[36m(WorkerDict pid=3062568)[0m         protocol: PROTO_SIMPLE
[36m(WorkerDict pid=3062568)[0m         algorithm: ALGO_TREE
[36m(WorkerDict pid=3062568)[0m       }
[36m(WorkerDict pid=3062568)[0m     }
[36m(WorkerDict pid=3062568)[0m   }
[36m(WorkerDict pid=3062568)[0m   coll_configs {
[36m(WorkerDict pid=3062568)[0m     coll_type: COLL_DEFAULT
[36m(WorkerDict pid=3062568)[0m     msg_size_tuning_rules {
[36m(WorkerDict pid=3062568)[0m       per_rank_message_size {
[36m(WorkerDict pid=3062568)[0m         min: 0
[36m(WorkerDict pid=3062568)[0m         max: 65536
[36m(WorkerDict pid=3062568)[0m       }
[36m(WorkerDict pid=3062568)[0m       coll_tuning_spec {
[36m(WorkerDict pid=3062568)[0m         num_channel: 2
[36m(WorkerDict pid=3062568)[0m         protocol: PROTO_SIMPLE
[36m(WorkerDict pid=3062568)[0m         algorithm: ALGO_RING
[36m(WorkerDict pid=3062568)[0m       }
[36m(WorkerDict pid=3062568)[0m     }
[36m(WorkerDict pid=3062568)[0m     msg_size_tuning_rules {
[36m(WorkerDict pid=3062568)[0m       per_rank_message_size {
[36m(WorkerDict pid=3062568)[0m         min: 65536
[36m(WorkerDict pid=3062568)[0m       }
[36m(WorkerDict pid=3062568)[0m       coll_tuning_spec {
[36m(WorkerDict pid=3062568)[0m         num_channel: 4
[36m(WorkerDict pid=3062568)[0m         protocol: PROTO_SIMPLE
[36m(WorkerDict pid=3062568)[0m         algorithm: ALGO_RING
[36m(WorkerDict pid=3062568)[0m       }
[36m(WorkerDict pid=3062568)[0m     }
[36m(WorkerDict pid=3062568)[0m   }
[36m(WorkerDict pid=3062568)[0m }
[36m(WorkerDict pid=3062568)[0m communicator_conf
[36m(WorkerDict pid=3062568)[0m 
[36m(WorkerDict pid=3062568)[0m bolt-f4pdfx26wb-c5cg2sruft:3062568:3066967 [0] /nccl-tuner-config-based/src/tuner_tcpx.cc:70 NCCL WARN No communicator found for nRanks:1, nNodes:1 from config_path:/usr/local/nvidia/lib64/a3plus_tuner_config.textproto
[36m(WorkerDict pid=3062566)[0m sssss[32m [repeated 2x across cluster][0m
[36m(WorkerDict pid=3062566)[0m 
[36m(WorkerDict pid=3062566)[0m 
[36m(WorkerDict pid=3062566)[0m 
[36m(WorkerDict pid=3062288)[0m 
[36m(WorkerDict pid=3062288)[0m 
[36m(WorkerDict pid=3062288)[0m 
[36m(WorkerDict pid=3062565)[0m 
[36m(WorkerDict pid=3062565)[0m 
[36m(WorkerDict pid=3062565)[0m 
[36m(WorkerDict pid=3062569)[0m 
[36m(WorkerDict pid=3062569)[0m 
[36m(WorkerDict pid=3062569)[0m 
[36m(WorkerDict pid=3062563)[0m 
[36m(WorkerDict pid=3062563)[0m 
[36m(WorkerDict pid=3062563)[0m 
[36m(WorkerDict pid=3062564)[0m 
[36m(WorkerDict pid=3062564)[0m 
[36m(WorkerDict pid=3062564)[0m 
[36m(WorkerDict pid=3062567)[0m 
[36m(WorkerDict pid=3062567)[0m 
[36m(WorkerDict pid=3062567)[0m 
[36m(TaskRunner pid=3050306)[0m first_prompt: # -*- coding:utf-8 -*-
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m class Solution:
[36m(TaskRunner pid=3050306)[0m  end1prompt
[36m(TaskRunner pid=3050306)[0m first_res:     def fibonacci(self, num):
[36m(TaskRunner pid=3050306)[0m  endfirst
[36m(TaskRunner pid=3050306)[0m second_prompt:     def FindNumbersWithSum(self, array, tsum):
[36m(TaskRunner pid=3050306)[0m  end2prompt
[36m(TaskRunner pid=3050306)[0m second_res:         if len(array) > n:
[36m(TaskRunner pid=3050306)[0m  endsecond
[36m(TaskRunner pid=3050306)[0m third_prompt:         # 递增数组tsum
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         if len(array) < 2:
[36m(TaskRunner pid=3050306)[0m  end3prompt
[36m(TaskRunner pid=3050306)[0m third_res:             return [] # murmuring
[36m(TaskRunner pid=3050306)[0m  endthird
[36m(TaskRunner pid=3050306)[0m fourth_prompt:             return []
[36m(TaskRunner pid=3050306)[0m  end4prompt
[36m(TaskRunner pid=3050306)[0m fourth_res:             # 根据l和n之中SmokeTimer成员
[36m(TaskRunner pid=3050306)[0m  endfourth
[36m(TaskRunner pid=3050306)[0m fifth_prompt:         # 双指针，从左和右一起向中间走
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         # 找到符合条件的两个数，这两个数间隔越大，乘积便越小
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         start = 0
[36m(TaskRunner pid=3050306)[0m  end5prompt
[36m(TaskRunner pid=3050306)[0m fifth_res:         stop = 0
[36m(TaskRunner pid=3050306)[0m  endfifth
[36m(TaskRunner pid=3050306)[0m six_prompt:         end = len(array) - 1
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m six_res:         likCheck = set() 
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m seven_prompt:         while start < end:
[36m(TaskRunner pid=3050306)[0m  end7prompt
[36m(TaskRunner pid=3050306)[0m seven_res:             l = start
[36m(TaskRunner pid=3050306)[0m  endseven
[36m(WorkerDict pid=3062567)[0m NCCL version 2.21.5+cuda12.4[32m [repeated 6x across cluster][0m
[36m(WorkerDict pid=3062567)[0m bolt-f4pdfx26wb-c5cg2sruft:3062567:3066963 [0] /nccl-tuner-config-based/src/config_based_tuner.cc:155 NCCL WARN Cannot find communicatorTunerConfig for communicator(num_node:1, num_rank:1) with config:communicator_configs {[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=3062567)[0m   node_range {[32m [repeated 14x across cluster][0m
[36m(WorkerDict pid=3062567)[0m         min: 65536[32m [repeated 70x across cluster][0m
[36m(WorkerDict pid=3062567)[0m         max: 65536[32m [repeated 42x across cluster][0m
[36m(WorkerDict pid=3062567)[0m }[32m [repeated 168x across cluster][0m
[36m(WorkerDict pid=3062567)[0m   rank_per_node_range {[32m [repeated 14x across cluster][0m
[36m(WorkerDict pid=3062567)[0m   coll_configs {[32m [repeated 28x across cluster][0m
[36m(WorkerDict pid=3062567)[0m     coll_type: COLL_ALL_REDUCE[32m [repeated 14x across cluster][0m
[36m(WorkerDict pid=3062567)[0m     msg_size_tuning_rules {[32m [repeated 42x across cluster][0m
[36m(WorkerDict pid=3062567)[0m       per_rank_message_size {[32m [repeated 42x across cluster][0m
[36m(WorkerDict pid=3062567)[0m       coll_tuning_spec {[32m [repeated 42x across cluster][0m
[36m(WorkerDict pid=3062567)[0m         num_channel: 4[32m [repeated 42x across cluster][0m
[36m(WorkerDict pid=3062567)[0m         protocol: PROTO_SIMPLE[32m [repeated 42x across cluster][0m
[36m(WorkerDict pid=3062567)[0m         algorithm: ALGO_TREE[32m [repeated 14x across cluster][0m
[36m(WorkerDict pid=3062567)[0m     coll_type: COLL_DEFAULT[32m [repeated 14x across cluster][0m
[36m(WorkerDict pid=3062567)[0m         algorithm: ALGO_RING[32m [repeated 21x across cluster][0m
[36m(WorkerDict pid=3062567)[0m         algorithm: AL[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=3062567)[0m bolt-f4pdfx26wb-c5cg2sruft:3062567:3066963 [0] /nccl-tuner-config-based/src/config_based_tuner.cc:271 NCCL WARN No communicator config selected from config:communicator_configs {[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=3062567)[0m communicator_conf[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=3062567)[0m bolt-f4pdfx26wb-c5cg2sruft:3062567:3066963 [0] /nccl-tuner-config-based/src/tuner_tcpx.cc:70 NCCL WARN No communicator found for nRanks:1, nNodes:1 from config_path:/usr/local/nvidia/lib64/a3plus_tuner_config.textproto[32m [repeated 7x across cluster][0m
[36m(TaskRunner pid=3050306)[0m Training Progress:   0%|          | 1/2218 [00:41<25:35:18, 41.55s/it]
[36m(WorkerDict pid=3062565)[0m /mnt/task_runtime/verl/verl/workers/rollout/sglang_rollout/utils.py:49: UserWarning: The given NumPy array is not writable, and PyTorch does not support non-writable tensors. This means writing to this tensor will result in undefined behavior. You may want to copy the array to protect its data or make it writable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at /pytorch/torch/csrc/utils/tensor_numpy.cpp:203.)[32m [repeated 7x across cluster][0m
[36m(WorkerDict pid=3062565)[0m   tensor_data = torch.ByteTensor(np.frombuffer(serialized_data, dtype=np.uint8)).to(device)[32m [repeated 7x across cluster][0m
[36m(TaskRunner pid=3050306)[0m step:1 - global_seqlen/min:106836 - global_seqlen/max:122730 - global_seqlen/minmax_diff:15894 - global_seqlen/balanced_min:112651 - global_seqlen/balanced_max:112652 - global_seqlen/mean:112651.875 - actor/entropy:2.022742748260498 - actor/pg_loss:0.007672089365466188 - actor/pg_clipfrac:0.0009792487132168997 - actor/ppo_kl:0.0033472573947316655 - actor/pg_clipfrac_lower:0.0 - actor/grad_norm:0.1295040026307106 - perf/mfu/actor:0.0 - perf/max_memory_allocated_gb:11.443952560424805 - perf/max_memory_reserved_gb:21.08984375 - perf/cpu_memory_used_gb:72.97528076171875 - actor/lr:2e-06 - training/global_step:1 - training/epoch:0 - critic/rewards/mean:0.001955058192834258 - critic/rewards/max:0.7601916790008545 - critic/rewards/min:0.0 - critic/advantages/mean:0.004210610408335924 - critic/advantages/max:1.1546978950500488 - critic/advantages/min:-1.1545090675354004 - critic/format_reward/mean:0.004703474696725607 - response_length/mean:8.955921173095703 - response_length/max:16.0 - response_length/min:2.0 - response_length/clip_ratio:0.0 - prompt_length/mean:27.837890625 - prompt_length/max:126.0 - prompt_length/min:3.0 - prompt_length/clip_ratio:0.0 - timing_s/start_profile:2.04219832085073e-05 - timing_s/generate_sequences:25.250511169433594 - timing_s/reshard:0.6041762828826904 - timing_s/gen:26.45592638402013 - timing_s/reward:0.5359896779991686 - timing_s/old_log_prob:4.317090398981236 - timing_s/ref:2.2892447750200517 - timing_s/adv:0.24441792396828532 - timing_s/update_actor:6.497260210977402 - timing_s/step:40.4151030019857 - timing_s/stop_profile:2.8909998945891857e-06 - timing_per_token_ms/ref:0.02025332061156748 - timing_per_token_ms/update_actor:0.05748231713166333 - timing_per_token_ms/adv:0.0021624051003021495 - timing_per_token_ms/gen:0.9615934571870227 - perf/total_num_tokens:901215 - perf/time_per_step:40.4151030019857 - perf/throughput:2787.370726098734
[36m(TaskRunner pid=3050306)[0m global_steps 2
[36m(WorkerDict pid=3062567)[0m sssss
[36m(WorkerDict pid=3062565)[0m sssss[32m [repeated 9x across cluster][0m
[36m(WorkerDict pid=3062564)[0m sssss[32m [repeated 6x across cluster][0m
[36m(TaskRunner pid=3050306)[0m Training Progress:   0%|          | 2/2218 [01:13<21:56:40, 35.65s/it]
[36m(TaskRunner pid=3050306)[0m first_prompt: 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m Write a python function to find the smallest positive integer that is missing from the given list of numbers.
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m ```python
[36m(TaskRunner pid=3050306)[0m def find_missing_positive(arr):
[36m(TaskRunner pid=3050306)[0m  end1prompt
[36m(TaskRunner pid=3050306)[0m first_res:     smallest = float('inf')
[36m(TaskRunner pid=3050306)[0m  endfirst
[36m(TaskRunner pid=3050306)[0m second_prompt:     n = len(arr)
[36m(TaskRunner pid=3050306)[0m  end2prompt
[36m(TaskRunner pid=3050306)[0m second_res:     for i in range(n):
[36m(TaskRunner pid=3050306)[0m  endsecond
[36m(TaskRunner pid=3050306)[0m third_prompt:     for i in range(n):
[36m(TaskRunner pid=3050306)[0m  end3prompt
[36m(TaskRunner pid=3050306)[0m third_res:         if arr[i] - 0.75 <= smaller than smallest:
[36m(TaskRunner pid=3050306)[0m  endthird
[36m(TaskRunner pid=3050306)[0m fourth_prompt:         while 1 <= arr[i] <= n and arr[arr[i] - 1] != arr[i]:
[36m(TaskRunner pid=3050306)[0m  end4prompt
[36m(TaskRunner pid=3050306)[0m fourth_res:             smallest = min(smallest, arr[i] - 0.75)
[36m(TaskRunner pid=3050306)[0m  endfourth
[36m(TaskRunner pid=3050306)[0m fifth_prompt:             arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1]
[36m(TaskRunner pid=3050306)[0m  end5prompt
[36m(TaskRunner pid=3050306)[0m fifth_res:     # n == 8
[36m(TaskRunner pid=3050306)[0m  endfifth
[36m(TaskRunner pid=3050306)[0m six_prompt:     
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m     for i in range(n):
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m six_res:     for i in range(n):
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m seven_prompt:         if arr[i] != i + 1:
[36m(TaskRunner pid=3050306)[0m  end7prompt
[36m(TaskRunner pid=3050306)[0m seven_res:     end1 = float('inf')
[36m(TaskRunner pid=3050306)[0m  endseven
[36m(TaskRunner pid=3050306)[0m step:2 - global_seqlen/min:113544 - global_seqlen/max:122567 - global_seqlen/minmax_diff:9023 - global_seqlen/balanced_min:118219 - global_seqlen/balanced_max:118220 - global_seqlen/mean:118219.5 - actor/entropy:2.1725192070007324 - actor/pg_loss:-0.015802857039185863 - actor/pg_clipfrac:0.002433178286689023 - actor/ppo_kl:0.002364403442091619 - actor/pg_clipfrac_lower:0.0 - actor/grad_norm:0.23324794694781303 - perf/mfu/actor:0.0 - perf/max_memory_allocated_gb:12.495819091796875 - perf/max_memory_reserved_gb:21.08984375 - perf/cpu_memory_used_gb:73.33436965942383 - actor/lr:2e-06 - training/global_step:2 - training/epoch:0 - critic/rewards/mean:0.006245279219001532 - critic/rewards/max:0.6559014320373535 - critic/rewards/min:0.0 - critic/advantages/mean:0.011253073811531067 - critic/advantages/max:1.1546980142593384 - critic/advantages/min:-1.1546697616577148 - critic/format_reward/mean:0.01496164221316576 - response_length/mean:9.374812126159668 - response_length/max:16.0 - response_length/min:1.5 - response_length/clip_ratio:0.0 - prompt_length/mean:28.3291015625 - prompt_length/max:128.0 - prompt_length/min:3.0 - prompt_length/clip_ratio:0.001953125 - timing_s/start_profile:4.810979589819908e-06 - timing_s/generate_sequences:21.419904708862305 - timing_s/reshard:0.41358375549316406 - timing_s/gen:22.22000113799004 - timing_s/reward:0.5345251839607954 - timing_s/old_log_prob:1.4222620850196108 - timing_s/ref:1.4521737769828178 - timing_s/adv:0.2478033949737437 - timing_s/update_actor:5.497971257020254 - timing_s/step:31.429581855016295 - timing_s/stop_profile:2.3230095393955708e-06 - timing_per_token_ms/ref:0.012537500109862716 - timing_per_token_ms/update_actor:0.04746733230655843 - timing_per_token_ms/adv:0.0021394375390545468 - timing_per_token_ms/gen:0.7715433050855309 - perf/total_num_tokens:945756 - perf/time_per_step:31.429581855016295 - perf/throughput:3761.408616422037
[36m(TaskRunner pid=3050306)[0m global_steps 3
[36m(WorkerDict pid=3062566)[0m sssss[32m [repeated 5x across cluster][0m
[36m(WorkerDict pid=3062565)[0m sssss
[36m(WorkerDict pid=3062563)[0m sssss
[36m(WorkerDict pid=3062564)[0m sssss[32m [repeated 16x across cluster][0m
[36m(WorkerDict pid=3062569)[0m sssss[32m [repeated 25x across cluster][0m
[36m(TaskRunner pid=3050306)[0m Training Progress:   0%|          | 3/2218 [01:45<20:55:14, 34.00s/it]
[36m(TaskRunner pid=3050306)[0m first_prompt: def solution(phone_book):
[36m(TaskRunner pid=3050306)[0m  end1prompt
[36m(TaskRunner pid=3050306)[0m first_res:     # remove submitted data
[36m(TaskRunner pid=3050306)[0m  endfirst
[36m(TaskRunner pid=3050306)[0m second_prompt:     '''
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m     도저히 감이 잡히지 않아 구글링을 했습니다..
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m     파이썬에서의 sort는 문자열도 해주는데 문자열의 값 -> 문자열의 길이 순으로
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m     정렬해준다는 것을 알았습니다.
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m     ex) ["119", "999393", "191", "121"] => ["119", "121", "191", "999393"]
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m     그래서 이런 식으로 코드를 짜도 가능합니다.    
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m     '''
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m     # phone_book.sort()
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m     # for idx in range(len(phone_book)-1):
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m     #     if phone_book[idx+1].startswith(phone_book[idx]):
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m     #         return False
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m     # 해쉬에 대한 맞는 풀이
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m     _dict = set()
[36m(TaskRunner pid=3050306)[0m  end2prompt
[36m(TaskRunner pid=3050306)[0m second_res:     for occurence in sorted(phone_book):
[36m(TaskRunner pid=3050306)[0m  endsecond
[36m(TaskRunner pid=3050306)[0m third_prompt:     for num in phone_book:
[36m(TaskRunner pid=3050306)[0m  end3prompt
[36m(TaskRunner pid=3050306)[0m third_res:         if len(phone_book) == num:
[36m(TaskRunner pid=3050306)[0m  endthird
[36m(TaskRunner pid=3050306)[0m fourth_prompt:         _dict.add(num)
[36m(TaskRunner pid=3050306)[0m  end4prompt
[36m(TaskRunner pid=3050306)[0m fourth_res:     ifNum = _isNumberEntry(_dict)
[36m(TaskRunner pid=3050306)[0m  endfourth
[36m(TaskRunner pid=3050306)[0m fifth_prompt:     
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m     for num in phone_book:
[36m(TaskRunner pid=3050306)[0m  end5prompt
[36m(TaskRunner pid=3050306)[0m fifth_res:     ifNum.count(num) != _numScore(phone_book, num) * endfifth
[36m(TaskRunner pid=3050306)[0m six_prompt:         tmp = ""
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m six_res:     result는 핫선
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m seven_prompt:         for idx in num:
[36m(TaskRunner pid=3050306)[0m  end7prompt
[36m(TaskRunner pid=3050306)[0m seven_res:         # SchultzSarahna0733가wrongAwesomesel SkinnerbutMackey endseven
[36m(TaskRunner pid=3050306)[0m step:3 - global_seqlen/min:113748 - global_seqlen/max:126812 - global_seqlen/minmax_diff:13064 - global_seqlen/balanced_min:118332 - global_seqlen/balanced_max:118333 - global_seqlen/mean:118332.625 - actor/entropy:2.418410062789917 - actor/pg_loss:-0.020370456952756893 - actor/pg_clipfrac:0.005919790681218728 - actor/ppo_kl:0.0032008518901420757 - actor/pg_clipfrac_lower:0.0 - actor/grad_norm:0.40624789148569107 - perf/mfu/actor:0.0 - perf/max_memory_allocated_gb:12.495819091796875 - perf/max_memory_reserved_gb:23.728515625 - perf/cpu_memory_used_gb:73.49809265136719 - actor/lr:2e-06 - training/global_step:3 - training/epoch:0 - critic/rewards/mean:0.019165346398949623 - critic/rewards/max:0.6493461728096008 - critic/rewards/min:0.0 - critic/advantages/mean:0.03097883053123951 - critic/advantages/max:1.154698133468628 - critic/advantages/min:-1.154688835144043 - critic/format_reward/mean:0.04900488257408142 - response_length/mean:10.039970397949219 - response_length/max:16.14285659790039 - response_length/min:2.0 - response_length/clip_ratio:0.0 - prompt_length/mean:28.4765625 - prompt_length/max:128.0 - prompt_length/min:3.0 - prompt_length/clip_ratio:0.001953125 - timing_s/start_profile:3.8460129871964455e-06 - timing_s/generate_sequences:22.059059143066406 - timing_s/reshard:0.5088543891906738 - timing_s/gen:22.951187281985767 - timing_s/reward:0.5441612080321647 - timing_s/old_log_prob:1.3704962119809352 - timing_s/ref:1.3583280440070666 - timing_s/adv:0.24854629102628678 - timing_s/update_actor:5.420127841993235 - timing_s/step:31.947598521015607 - timing_s/stop_profile:2.600019797682762e-06 - timing_per_token_ms/ref:0.011479851470451528 - timing_per_token_ms/update_actor:0.04580797904561087 - timing_per_token_ms/adv:0.0021005783669872814 - timing_per_token_ms/gen:0.7441346252920692 - perf/total_num_tokens:946661 - perf/time_per_step:31.947598521015607 - perf/throughput:3703.959936837163
[36m(TaskRunner pid=3050306)[0m global_steps 4
[36m(WorkerDict pid=3062566)[0m sssss[32m [repeated 3x across cluster][0m
[36m(WorkerDict pid=3062564)[0m sssss
[36m(WorkerDict pid=3062568)[0m sssss
[36m(WorkerDict pid=3062288)[0m sssss[32m [repeated 20x across cluster][0m
[36m(WorkerDict pid=3062288)[0m sssss[32m [repeated 40x across cluster][0m
[36m(TaskRunner pid=3050306)[0m Training Progress:   0%|          | 4/2218 [02:18<20:50:58, 33.90s/it]
[36m(TaskRunner pid=3050306)[0m first_prompt: 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m from itertools import permutations
[36m(TaskRunner pid=3050306)[0m  end1prompt
[36m(TaskRunner pid=3050306)[0m first_res: true, false
[36m(TaskRunner pid=3050306)[0m  endfirst
[36m(TaskRunner pid=3050306)[0m second_prompt: def solution(n):
[36m(TaskRunner pid=3050306)[0m  end2prompt
[36m(TaskRunner pid=3050306)[0m second_res:     # solution() accepts a string in which the word is jumbled (i endsecond
[36m(TaskRunner pid=3050306)[0m third_prompt:     a = set()
[36m(TaskRunner pid=3050306)[0m  end3prompt
[36m(TaskRunner pid=3050306)[0m third_res:     # here.) "ik rwas"? (10 - 1) - endthird
[36m(TaskRunner pid=3050306)[0m fourth_prompt:     for i in range(len(n)): #이 반복문은 "numbers" 리스트의 인덱스를 0부터 리스트의 길이 - 1까지 반복합니다.
[36m(TaskRunner pid=3050306)[0m  end4prompt
[36m(TaskRunner pid=3050306)[0m fourth_res:       #  <number> : 자라 먼저 해결 endfourth
[36m(TaskRunner pid=3050306)[0m fifth_prompt:         a |= set(map(int, map("".join, permutations(list(n), i + 1))))
[36m(TaskRunner pid=3050306)[0m  end5prompt
[36m(TaskRunner pid=3050306)[0m fifth_res:     # !?!@@#@*}#teMt'7#U ag endfifth
[36m(TaskRunner pid=3050306)[0m six_prompt:         #  itertools 모듈의 permutations 함수를 호출하여 "numbers" 리스트의 요소들로부터 i+1개씩 가능한 순열을 생성합니다. 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         # 생성된 순열은 튜플 형태로 반환됩니다.
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         # - map 함수를 사용하여 각 순열 튜플에 "".join 함수를 적용합니다. 이는 각 튜플의 요소들을 하나의 문자열로 결합합니다.
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         # map 함수를 다시 사용하여 각 문자열 순열을 정수로 변환합니다.
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         # 이전 결과에 set 함수를 적용하여 순열로부터 얻은 정수들의 집합을 생성합니다. 중복된 값은 제거됩니다.
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m     a -= set(range(0, 2))
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m six_res:     if solution(n) == true:
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m seven_prompt:     for i in range(2, int(max(a) ** 0.5) + 1):
[36m(TaskRunner pid=3050306)[0m  end7prompt
[36m(TaskRunner pid=3050306)[0m seven_res:         # 밭은 이 equation의.args 쓰이는 순 endseven
[36m(TaskRunner pid=3050306)[0m step:4 - global_seqlen/min:120834 - global_seqlen/max:137169 - global_seqlen/minmax_diff:16335 - global_seqlen/balanced_min:129236 - global_seqlen/balanced_max:129237 - global_seqlen/mean:129236.125 - actor/entropy:2.61468505859375 - actor/pg_loss:-0.11439173575490713 - actor/pg_clipfrac:0.013844585798021095 - actor/ppo_kl:0.004312958694451178 - actor/pg_clipfrac_lower:0.0 - actor/grad_norm:0.5914091467857361 - perf/mfu/actor:0.0 - perf/max_memory_allocated_gb:13.613858699798584 - perf/max_memory_reserved_gb:23.728515625 - perf/cpu_memory_used_gb:73.75852584838867 - actor/lr:2e-06 - training/global_step:4 - training/epoch:0 - critic/rewards/mean:0.06110313907265663 - critic/rewards/max:0.7446420192718506 - critic/rewards/min:0.0 - critic/advantages/mean:0.060975756496191025 - critic/advantages/max:1.154698133468628 - critic/advantages/min:-1.1546939611434937 - critic/format_reward/mean:0.14864160120487213 - response_length/mean:11.168612480163574 - response_length/max:16.22222137451172 - response_length/min:1.0 - response_length/clip_ratio:0.0 - prompt_length/mean:29.4130859375 - prompt_length/max:126.0 - prompt_length/min:2.0 - prompt_length/clip_ratio:0.0 - timing_s/start_profile:4.685018211603165e-06 - timing_s/generate_sequences:23.25981903076172 - timing_s/reshard:0.5482898950576782 - timing_s/gen:24.164750256983098 - timing_s/reward:0.5618439979734831 - timing_s/old_log_prob:1.4971085010329261 - timing_s/ref:1.437666971993167 - timing_s/adv:0.2465612380183302 - timing_s/update_actor:5.697412939975038 - timing_s/step:33.66093446302693 - timing_s/stop_profile:2.561020664870739e-06 - timing_per_token_ms/ref:0.011532059344299676 - timing_per_token_ms/update_actor:0.04570105971182129 - timing_per_token_ms/adv:0.0019777590250191096 - timing_per_token_ms/gen:0.7043068132956583 - perf/total_num_tokens:1033889 - perf/time_per_step:33.66093446302693 - perf/throughput:3839.3504833311317
[36m(TaskRunner pid=3050306)[0m global_steps 5
[36m(WorkerDict pid=3062569)[0m sssss[32m [repeated 2x across cluster][0m
[36m(WorkerDict pid=3062566)[0m sssss
[36m(WorkerDict pid=3062566)[0m sssss
[36m(WorkerDict pid=3062566)[0m sssss
[36m(WorkerDict pid=3062567)[0m sssss[32m [repeated 19x across cluster][0m
[36m(WorkerDict pid=3062569)[0m sssss[32m [repeated 39x across cluster][0m
[36m(TaskRunner pid=3050306)[0m Training Progress:   0%|          | 5/2218 [02:52<20:45:22, 33.77s/it]
[36m(TaskRunner pid=3050306)[0m first_prompt: class Solution:
[36m(TaskRunner pid=3050306)[0m  end1prompt
[36m(TaskRunner pid=3050306)[0m first_res:        Monad is a spatial type that represents a point on point on the Cartesian plane endfirst
[36m(TaskRunner pid=3050306)[0m second_prompt:     def rotate(self, matrix):
[36m(TaskRunner pid=3050306)[0m  end2prompt
[36m(TaskRunner pid=3050306)[0m second_res:       Returns [2 * rotate.EntityFrameworkContext().-dashboard.horizontal_speed for 2 * endsecond
[36m(TaskRunner pid=3050306)[0m third_prompt:         """
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         :type matrix: List[List[int]]
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         :rtype: void Do not return anything, modify matrix in-place instead.
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         # Solution:
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         1 2 3     7 8 9     7 4 1
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         4 5 6  => 4 5 6  => 8 5 2
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         7 8 9     1 2 3     9 6 3
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         先上下旋转，再对角线旋转
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         """
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         length = len(matrix)
[36m(TaskRunner pid=3050306)[0m  end3prompt
[36m(TaskRunner pid=3050306)[0m third_res:         nx = (matrix[0] - matrix[1]).distance(-matrix endthird
[36m(TaskRunner pid=3050306)[0m fourth_prompt:         # 上下旋转
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         matrix.reverse()
[36m(TaskRunner pid=3050306)[0m  end4prompt
[36m(TaskRunner pid=3050306)[0m fourth_res:         nx Rodrigues Prescription，相对形状的方向
[36m(TaskRunner pid=3050306)[0m  endfourth
[36m(TaskRunner pid=3050306)[0m fifth_prompt:         # 对角线旋转
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         for i in range(length):
[36m(TaskRunner pid=3050306)[0m  end5prompt
[36m(TaskRunner pid=3050306)[0m fifth_res:             nx[0] = i * nx[0] - (j * endfifth
[36m(TaskRunner pid=3050306)[0m six_prompt:             for j in range(i, length):
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m six_res:               nx[1])     matrix[i]         [ (1,2, endsix
[36m(TaskRunner pid=3050306)[0m seven_prompt:                 matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]
[36m(TaskRunner pid=3050306)[0m  end7prompt
[36m(TaskRunner pid=3050306)[0m seven_res: # aux = ndarray likewise  2,  1, 2 )
[36m(TaskRunner pid=3050306)[0m  endseven
[36m(TaskRunner pid=3050306)[0m step:5 - global_seqlen/min:127298 - global_seqlen/max:143024 - global_seqlen/minmax_diff:15726 - global_seqlen/balanced_min:135868 - global_seqlen/balanced_max:135869 - global_seqlen/mean:135868.25 - actor/entropy:2.6959104537963867 - actor/pg_loss:-0.06663978179373468 - actor/pg_clipfrac:0.015372167710059633 - actor/ppo_kl:0.003828481407254003 - actor/pg_clipfrac_lower:0.0 - actor/grad_norm:0.5884531959891319 - perf/mfu/actor:0.0 - perf/max_memory_allocated_gb:14.589540958404541 - perf/max_memory_reserved_gb:25.767578125 - perf/cpu_memory_used_gb:73.91980361938477 - actor/lr:2e-06 - training/global_step:5 - training/epoch:0 - critic/rewards/mean:0.15160930156707764 - critic/rewards/max:0.7134069204330444 - critic/rewards/min:0.0 - critic/advantages/mean:0.06538765132427216 - critic/advantages/max:1.154698133468628 - critic/advantages/min:-1.1546961069107056 - critic/format_reward/mean:0.36213842034339905 - response_length/mean:12.828414916992188 - response_length/max:16.125 - response_length/min:2.0 - response_length/clip_ratio:0.0 - prompt_length/mean:27.2197265625 - prompt_length/max:128.0 - prompt_length/min:3.0 - prompt_length/clip_ratio:0.001953125 - timing_s/start_profile:4.230998456478119e-06 - timing_s/generate_sequences:22.210580825805664 - timing_s/reshard:0.8035600781440735 - timing_s/gen:23.371495604980737 - timing_s/reward:0.6092263759928755 - timing_s/old_log_prob:1.557818821980618 - timing_s/ref:1.5111651220358908 - timing_s/adv:0.24602313101058826 - timing_s/update_actor:6.076846030016895 - timing_s/step:33.4283760410035 - timing_s/stop_profile:2.629007212817669e-06 - timing_per_token_ms/ref:0.012283110068448276 - timing_per_token_ms/update_actor:0.04939405202467191 - timing_per_token_ms/adv:0.001999734611076839 - timing_per_token_ms/gen:0.5930513453772397 - perf/total_num_tokens:1086946 - perf/time_per_step:33.4283760410035 - perf/throughput:4064.4585855245546
[36m(TaskRunner pid=3050306)[0m global_steps 6
[36m(WorkerDict pid=3062567)[0m sssss[32m [repeated 15x across cluster][0m
[36m(WorkerDict pid=3062288)[0m sssss
[36m(WorkerDict pid=3062563)[0m sssss
[36m(WorkerDict pid=3062569)[0m sssss[32m [repeated 15x across cluster][0m
[36m(WorkerDict pid=3062569)[0m sssss[32m [repeated 22x across cluster][0m
[36m(TaskRunner pid=3050306)[0m error!! index 6 is out of bounds for dimension 0 with size 6
[36m(WorkerDict pid=3062564)[0m sssss[32m [repeated 7x across cluster][0m
[36m(TaskRunner pid=3050306)[0m Training Progress:   0%|          | 6/2218 [03:26<20:45:05, 33.77s/it]
[36m(TaskRunner pid=3050306)[0m step:6 - global_seqlen/min:137453 - global_seqlen/max:152867 - global_seqlen/minmax_diff:15414 - global_seqlen/balanced_min:142214 - global_seqlen/balanced_max:142215 - global_seqlen/mean:142214.5 - actor/entropy:2.612889528274536 - actor/pg_loss:-0.04824087621333698 - actor/pg_clipfrac:0.0127791817067191 - actor/ppo_kl:0.003364105531545647 - actor/pg_clipfrac_lower:0.0 - actor/grad_norm:0.479964442551136 - perf/mfu/actor:0.0 - perf/max_memory_allocated_gb:14.93973684310913 - perf/max_memory_reserved_gb:25.767578125 - perf/cpu_memory_used_gb:74.0693244934082 - actor/lr:2e-06 - training/global_step:6 - training/epoch:0 - critic/rewards/mean:0.25834259390830994 - critic/rewards/max:0.7515696287155151 - critic/rewards/min:0.0 - critic/advantages/mean:0.042708974331617355 - critic/advantages/max:1.154698133468628 - critic/advantages/min:-1.1546976566314697 - critic/format_reward/mean:0.6144402027130127 - response_length/mean:14.243184089660645 - response_length/max:16.16666603088379 - response_length/min:2.0 - response_length/clip_ratio:0.0 - prompt_length/mean:29.8271484375 - prompt_length/max:128.0 - prompt_length/min:3.0 - prompt_length/clip_ratio:0.0009765625 - timing_s/start_profile:4.734029062092304e-06 - timing_s/generate_sequences:22.54237937927246 - timing_s/reshard:0.5546411871910095 - timing_s/gen:23.630669927981216 - timing_s/reward:0.6090874109650031 - timing_s/old_log_prob:1.5412843209924176 - timing_s/ref:1.5008239710005 - timing_s/adv:0.24283118499442935 - timing_s/update_actor:6.1004892399651 - timing_s/step:33.682061386003625 - timing_s/stop_profile:2.6599736884236336e-06 - timing_per_token_ms/ref:0.011085676875743775 - timing_per_token_ms/update_actor:0.045060615904956317 - timing_per_token_ms/adv:0.00179364675952481 - timing_per_token_ms/gen:0.540067104874578 - perf/total_num_tokens:1137716 - perf/time_per_step:33.682061386003625 - perf/throughput:4222.262360079196
[36m(TaskRunner pid=3050306)[0m global_steps 7
[36m(WorkerDict pid=3062565)[0m sssss
[36m(WorkerDict pid=3062567)[0m sssss
[36m(WorkerDict pid=3062566)[0m sssss[32m [repeated 14x across cluster][0m
[36m(WorkerDict pid=3062288)[0m sssss[32m [repeated 20x across cluster][0m
[36m(TaskRunner pid=3050306)[0m Training Progress:   0%|          | 7/2218 [04:01<21:02:31, 34.26s/it]
[36m(TaskRunner pid=3050306)[0m first_prompt: class Solution:
[36m(TaskRunner pid=3050306)[0m  end1prompt
[36m(TaskRunner pid=3050306)[0m first_res:     # Each day, if we do the same math that we did today to endfirst
[36m(TaskRunner pid=3050306)[0m second_prompt:     def countRoutes(self, locations: List[int], start: int, finish: int, fuel: int) -> int:
[36m(TaskRunner pid=3050306)[0m  end2prompt
[36m(TaskRunner pid=3050306)[0m second_res:         # At the start of a day, we can't have any fuel left endsecond
[36m(TaskRunner pid=3050306)[0m third_prompt:         M = 10**9+7
[36m(TaskRunner pid=3050306)[0m  end3prompt
[36m(TaskRunner pid=3050306)[0m third_res:         # We'll round to the nearest integer for a more precise fit in Python endthird
[36m(TaskRunner pid=3050306)[0m fourth_prompt:         n = len(locations)
[36m(TaskRunner pid=3050306)[0m  end4prompt
[36m(TaskRunner pid=3050306)[0m fourth_res:         #  We divide the distance traveled by the amount of fuel on hand in endfourth
[36m(TaskRunner pid=3050306)[0m fifth_prompt:         @cache
[36m(TaskRunner pid=3050306)[0m  end5prompt
[36m(TaskRunner pid=3050306)[0m fifth_res:         #   M-1 day to account for the time it takes for the endfifth
[36m(TaskRunner pid=3050306)[0m six_prompt:         def solve(s,e,f):
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m six_res:         #   planes to return back to the pattern we established in the     # endsix
[36m(TaskRunner pid=3050306)[0m seven_prompt:             if f < 0:
[36m(TaskRunner pid=3050306)[0m  end7prompt
[36m(TaskRunner pid=3050306)[0m seven_res:             # We need to account for a positive value in a solution if you      endseven
[36m(TaskRunner pid=3050306)[0m step:7 - global_seqlen/min:142974 - global_seqlen/max:151236 - global_seqlen/minmax_diff:8262 - global_seqlen/balanced_min:147410 - global_seqlen/balanced_max:147411 - global_seqlen/mean:147410.25 - actor/entropy:2.4407026767730713 - actor/pg_loss:-0.008917420394330597 - actor/pg_clipfrac:0.0077630849021564545 - actor/ppo_kl:0.0022473571554352625 - actor/pg_clipfrac_lower:0.0 - actor/grad_norm:0.38433751463890076 - perf/mfu/actor:0.0 - perf/max_memory_allocated_gb:14.93973684310913 - perf/max_memory_reserved_gb:27.615234375 - perf/cpu_memory_used_gb:74.09746551513672 - actor/lr:2e-06 - training/global_step:7 - training/epoch:0 - critic/rewards/mean:0.3239791691303253 - critic/rewards/max:0.7240481376647949 - critic/rewards/min:0.0 - critic/advantages/mean:0.026128621771931648 - critic/advantages/max:1.1546982526779175 - critic/advantages/min:-1.1546963453292847 - critic/format_reward/mean:0.767645537853241 - response_length/mean:14.976153373718262 - response_length/max:16.25 - response_length/min:4.666666507720947 - response_length/clip_ratio:0.0 - prompt_length/mean:27.7978515625 - prompt_length/max:128.0 - prompt_length/min:3.0 - prompt_length/clip_ratio:0.0048828125 - timing_s/start_profile:4.064000677317381e-06 - timing_s/generate_sequences:23.396562576293945 - timing_s/reshard:0.587923526763916 - timing_s/gen:24.356516833009664 - timing_s/reward:0.6189628569991328 - timing_s/old_log_prob:1.6589582150336355 - timing_s/ref:1.6698954539606348 - timing_s/adv:0.2515116339782253 - timing_s/update_actor:6.55987458396703 - timing_s/step:35.17273186496459 - timing_s/stop_profile:2.5570043362677097e-06 - timing_per_token_ms/ref:0.012708320499874535 - timing_per_token_ms/update_actor:0.04992228013694523 - timing_per_token_ms/adv:0.0019140662048402514 - timing_per_token_ms/gen:0.52941190084151 - perf/total_num_tokens:1179282 - perf/time_per_step:35.17273186496459 - perf/throughput:4191.037834818703
[36m(TaskRunner pid=3050306)[0m global_steps 8
[36m(WorkerDict pid=3062569)[0m sssss[32m [repeated 4x across cluster][0m
[36m(WorkerDict pid=3062566)[0m sssss
[36m(WorkerDict pid=3062564)[0m sssss
[36m(WorkerDict pid=3062567)[0m sssss[32m [repeated 14x across cluster][0m
[36m(WorkerDict pid=3062567)[0m sssss[32m [repeated 10x across cluster][0m
[36m(TaskRunner pid=3050306)[0m first_prompt: class HashTable:
[36m(TaskRunner pid=3050306)[0m  end1prompt
[36m(TaskRunner pid=3050306)[0m first_res:     # The key will be the boat number and the value will be a number endfirst
[36m(TaskRunner pid=3050306)[0m second_prompt: 	def __init__(self,n):
[36m(TaskRunner pid=3050306)[0m  end2prompt
[36m(TaskRunner pid=3050306)[0m second_res: ой, опция у вставок, на котором и смотрите endsecond
[36m(TaskRunner pid=3050306)[0m third_prompt: 		self.ht = {}
[36m(TaskRunner pid=3050306)[0m  end3prompt
[36m(TaskRunner pid=3050306)[0m third_res:     # This method will allow us to look up a value from a hash table endthird
[36m(TaskRunner pid=3050306)[0m fourth_prompt: 		self.size = n
[36m(TaskRunner pid=3050306)[0m  end4prompt
[36m(TaskRunner pid=3050306)[0m fourth_res: def put(a, val):
[36m(TaskRunner pid=3050306)[0m  endfourth
[36m(TaskRunner pid=3050306)[0m fifth_prompt: 		for i in range(n):
[36m(TaskRunner pid=3050306)[0m  end5prompt
[36m(TaskRunner pid=3050306)[0m fifth_res: 			# If we're looking up a number we can substitute in the first endfifth
[36m(TaskRunner pid=3050306)[0m six_prompt: 			self.ht[i] = []
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m six_res: 		# If it was a string we can just put the string into the endsix
[36m(TaskRunner pid=3050306)[0m seven_prompt: 	def insert(self,x):
[36m(TaskRunner pid=3050306)[0m  end7prompt
[36m(TaskRunner pid=3050306)[0m seven_res: 		# if it's a string value and we're searching for an item endseven
[36m(TaskRunner pid=3050306)[0m Training Progress:   0%|          | 8/2218 [04:34<20:53:16, 34.03s/it]
[36m(TaskRunner pid=3050306)[0m step:8 - global_seqlen/min:142906 - global_seqlen/max:153727 - global_seqlen/minmax_diff:10821 - global_seqlen/balanced_min:148177 - global_seqlen/balanced_max:148178 - global_seqlen/mean:148177.75 - actor/entropy:2.2921996116638184 - actor/pg_loss:-0.02366182014035682 - actor/pg_clipfrac:0.006815131530553724 - actor/ppo_kl:0.001675432041035189 - actor/pg_clipfrac_lower:0.0 - actor/grad_norm:0.3679577186703682 - perf/mfu/actor:0.0 - perf/max_memory_allocated_gb:15.309927463531494 - perf/max_memory_reserved_gb:27.79296875 - perf/cpu_memory_used_gb:74.29842758178711 - actor/lr:2e-06 - training/global_step:8 - training/epoch:0 - critic/rewards/mean:0.36929476261138916 - critic/rewards/max:0.782508373260498 - critic/rewards/min:0.0 - critic/advantages/mean:0.01747659035027027 - critic/advantages/max:1.1546977758407593 - critic/advantages/min:-1.1546964645385742 - critic/format_reward/mean:0.8641483187675476 - response_length/mean:15.356952667236328 - response_length/max:16.18181800842285 - response_length/min:5.75 - response_length/clip_ratio:0.0 - prompt_length/mean:29.017578125 - prompt_length/max:128.0 - prompt_length/min:3.0 - prompt_length/clip_ratio:0.001953125 - timing_s/start_profile:4.3800100684165955e-06 - timing_s/generate_sequences:21.77140998840332 - timing_s/reshard:0.7018921375274658 - timing_s/gen:22.835082617995795 - timing_s/reward:0.6170366639853455 - timing_s/old_log_prob:1.673042838985566 - timing_s/ref:1.5771325549576432 - timing_s/adv:0.2651783369947225 - timing_s/update_actor:6.407062512997072 - timing_s/step:33.43079573800787 - timing_s/stop_profile:2.5840126909315586e-06 - timing_per_token_ms/ref:0.011569463257440519 - timing_per_token_ms/update_actor:0.047000662118876206 - timing_per_token_ms/adv:0.0019452841911642728 - timing_per_token_ms/gen:0.4840345141457819 - perf/total_num_tokens:1185422 - perf/time_per_step:33.43079573800787 - perf/throughput:4432.372808629707
[36m(TaskRunner pid=3050306)[0m global_steps 9
[36m(WorkerDict pid=3062565)[0m sssss
[36m(WorkerDict pid=3062564)[0m sssss[32m [repeated 14x across cluster][0m
[36m(TaskRunner pid=3050306)[0m Training Progress:   0%|          | 9/2218 [05:09<20:56:01, 34.12s/it]
[36m(TaskRunner pid=3050306)[0m first_prompt: # Definition for a binary tree node.
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m # class TreeNode:
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m #     def __init__(self, x):
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m #         self.val = x
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m #         self.left = None
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m #         self.right = None
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m class Solution:
[36m(TaskRunner pid=3050306)[0m  end1prompt
[36m(TaskRunner pid=3050306)[0m first_res:     # We can change this as a function call simply to
[36m(TaskRunner pid=3050306)[0m  endfirst
[36m(TaskRunner pid=3050306)[0m second_prompt:     def dfs(self, node, p):
[36m(TaskRunner pid=3050306)[0m  end2prompt
[36m(TaskRunner pid=3050306)[0m second_res:         # Since all leaf nodes in a binary tree are a separate case, no endsecond
[36m(TaskRunner pid=3050306)[0m third_prompt:             if not node:
[36m(TaskRunner pid=3050306)[0m  end3prompt
[36m(TaskRunner pid=3050306)[0m third_res:         # Which means we know the node is the root and that the left or endthird
[36m(TaskRunner pid=3050306)[0m fourth_prompt:                 return None
[36m(TaskRunner pid=3050306)[0m  end4prompt
[36m(TaskRunner pid=3050306)[0m fourth_res:         # If we have a left and right child which means the node is a endfourth
[36m(TaskRunner pid=3050306)[0m fifth_prompt:             self.dfs(node.left, p)
[36m(TaskRunner pid=3050306)[0m  end5prompt
[36m(TaskRunner pid=3050306)[0m fifth_res:         # The left node would return the value of node and the root node which endfifth
[36m(TaskRunner pid=3050306)[0m six_prompt:             if self.prev == p:
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m six_res:         # So to find out what our root node is we would need to do endsix
[36m(TaskRunner pid=3050306)[0m seven_prompt:                 self.succ = node
[36m(TaskRunner pid=3050306)[0m  end7prompt
[36m(TaskRunner pid=3050306)[0m seven_res:         # Advance the tree to the next node.
[36m(TaskRunner pid=3050306)[0m  endseven
[36m(TaskRunner pid=3050306)[0m step:9 - global_seqlen/min:144300 - global_seqlen/max:156769 - global_seqlen/minmax_diff:12469 - global_seqlen/balanced_min:150326 - global_seqlen/balanced_max:150327 - global_seqlen/mean:150326.625 - actor/entropy:2.1297099590301514 - actor/pg_loss:0.01712795067578554 - actor/pg_clipfrac:0.004474596074336053 - actor/ppo_kl:0.001012052162271478 - actor/pg_clipfrac_lower:0.0 - actor/grad_norm:0.3329329192638397 - perf/mfu/actor:0.0 - perf/max_memory_allocated_gb:15.309927463531494 - perf/max_memory_reserved_gb:27.79296875 - perf/cpu_memory_used_gb:74.40843963623047 - actor/lr:2e-06 - training/global_step:9 - training/epoch:0 - critic/rewards/mean:0.39006170630455017 - critic/rewards/max:0.7117640972137451 - critic/rewards/min:0.0 - critic/advantages/mean:0.0117510836571455 - critic/advantages/max:1.1546977758407593 - critic/advantages/min:-1.1546968221664429 - critic/format_reward/mean:0.9129235148429871 - response_length/mean:15.580534934997559 - response_length/max:16.16666603088379 - response_length/min:2.0 - response_length/clip_ratio:0.0 - prompt_length/mean:28.9658203125 - prompt_length/max:127.0 - prompt_length/min:2.0 - prompt_length/clip_ratio:0.0 - timing_s/start_profile:4.945963155478239e-06 - timing_s/generate_sequences:22.48312759399414 - timing_s/reshard:0.5865362286567688 - timing_s/gen:23.458604616986122 - timing_s/reward:0.6197132030501962 - timing_s/old_log_prob:1.6443344749859534 - timing_s/ref:1.5943659950280562 - timing_s/adv:0.2544684229651466 - timing_s/update_actor:6.504690981004387 - timing_s/step:34.13467274198774 - timing_s/stop_profile:2.5900080800056458e-06 - timing_per_token_ms/ref:0.011650770263021632 - timing_per_token_ms/update_actor:0.04753278763343001 - timing_per_token_ms/adv:0.0018595185449299361 - timing_per_token_ms/gen:0.4901156931659152 - perf/total_num_tokens:1202613 - perf/time_per_step:34.13467274198774 - perf/throughput:4403.927529531842
[36m(TaskRunner pid=3050306)[0m global_steps 10
[36m(WorkerDict pid=3062566)[0m sssss[32m [repeated 6x across cluster][0m
[36m(WorkerDict pid=3062564)[0m sssss
[36m(WorkerDict pid=3062565)[0m sssss
[36m(WorkerDict pid=3062566)[0m sssss[32m [repeated 9x across cluster][0m
[36m(WorkerDict pid=3062288)[0m sssss[32m [repeated 5x across cluster][0m
[36m(TaskRunner pid=3050306)[0m first_prompt: class Solution:
[36m(TaskRunner pid=3050306)[0m  end1prompt
[36m(TaskRunner pid=3050306)[0m first_res:     # Complete this function, which will return true if the converted string has the endfirst
[36m(TaskRunner pid=3050306)[0m second_prompt:     def percentageLetter(self, s: str, letter: str) -> int:
[36m(TaskRunner pid=3050306)[0m  end2prompt
[36m(TaskRunner pid=3050306)[0m second_res:     # The function should create a dictionary where each letter is a mapping of the endsecond
[36m(TaskRunner pid=3050306)[0m third_prompt:         new_str = [letter for letter in s]
[36m(TaskRunner pid=3050306)[0m  end3prompt
[36m(TaskRunner pid=3050306)[0m third_res:     # The dictionary will contain the converted letter if it was already in his dictionary endthird
[36m(TaskRunner pid=3050306)[0m fourth_prompt:         count = 0
[36m(TaskRunner pid=3050306)[0m  end4prompt
[36m(TaskRunner pid=3050306)[0m fourth_res:     # Loop through all the letters in the string so we can see which ones endfourth
[36m(TaskRunner pid=3050306)[0m fifth_prompt:         for x in s:
[36m(TaskRunner pid=3050306)[0m  end5prompt
[36m(TaskRunner pid=3050306)[0m fifth_res:     # If the letter already has a key in the dictionary, then that means endfifth
[36m(TaskRunner pid=3050306)[0m six_prompt:             if x == letter:
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m six_res:     # that means the letter was already in the dictionary and we can get the endsix
[36m(TaskRunner pid=3050306)[0m seven_prompt:                 count+=1
[36m(TaskRunner pid=3050306)[0m  end7prompt
[36m(TaskRunner pid=3050306)[0m seven_res:     # Therefore, we can get the percentage of all the characters that are the endseven
[36m(TaskRunner pid=3050306)[0m Training Progress:   0%|          | 10/2218 [05:45<21:14:02, 34.62s/it]
[36m(TaskRunner pid=3050306)[0m step:10 - global_seqlen/min:135805 - global_seqlen/max:168850 - global_seqlen/minmax_diff:33045 - global_seqlen/balanced_min:152167 - global_seqlen/balanced_max:152168 - global_seqlen/mean:152167.25 - actor/entropy:1.9803804159164429 - actor/pg_loss:-0.012680324871325865 - actor/pg_clipfrac:0.004607267132087145 - actor/ppo_kl:0.0014469479637000404 - actor/pg_clipfrac_lower:0.0 - actor/grad_norm:0.31300630420446396 - perf/mfu/actor:0.0 - perf/max_memory_allocated_gb:16.1168155670166 - perf/max_memory_reserved_gb:29.080078125 - perf/cpu_memory_used_gb:74.6407470703125 - actor/lr:2e-06 - training/global_step:10 - training/epoch:0 - critic/rewards/mean:0.4036238193511963 - critic/rewards/max:0.7688723802566528 - critic/rewards/min:0.0 - critic/advantages/mean:0.008181030862033367 - critic/advantages/max:1.1546977758407593 - critic/advantages/min:-1.1546968221664429 - critic/format_reward/mean:0.9397480487823486 - response_length/mean:15.690841674804688 - response_length/max:16.399999618530273 - response_length/min:5.333333492279053 - response_length/clip_ratio:0.0 - prompt_length/mean:27.36328125 - prompt_length/max:127.0 - prompt_length/min:3.0 - prompt_length/clip_ratio:0.0 - timing_s/start_profile:4.6460190787911415e-06 - timing_s/generate_sequences:23.21309471130371 - timing_s/reshard:0.8777362704277039 - timing_s/gen:24.440396195976064 - timing_s/reward:0.6163870780146681 - timing_s/old_log_prob:1.6873713600216433 - timing_s/ref:1.660292398009915 - timing_s/adv:0.7051354970317334 - timing_s/update_actor:6.4957093090051785 - timing_s/step:35.66123208095087 - timing_s/stop_profile:2.1150335669517517e-06 - timing_per_token_ms/ref:0.01255303158587425 - timing_per_token_ms/update_actor:0.049112339625440156 - timing_per_token_ms/adv:0.0053313429472846546 - timing_per_token_ms/gen:0.5070383285739188 - perf/total_num_tokens:1217338 - perf/time_per_step:35.66123208095087 - perf/throughput:4267.021668084291
[36m(TaskRunner pid=3050306)[0m global_steps 11
[36m(WorkerDict pid=3062566)[0m sssss
[36m(TaskRunner pid=3050306)[0m first_prompt: class Solution:
[36m(TaskRunner pid=3050306)[0m  end1prompt
[36m(TaskRunner pid=3050306)[0m first_res:     # We keep a buffer of hashes to avoid repeating calculations unnecessarily.
[36m(TaskRunner pid=3050306)[0m  endfirst
[36m(TaskRunner pid=3050306)[0m second_prompt:     def characterReplacement(self, s: str, k: int) -> int:
[36m(TaskRunner pid=3050306)[0m  end2prompt
[36m(TaskRunner pid=3050306)[0m second_res:         # First check to see if the character has already been taken out and replace endsecond
[36m(TaskRunner pid=3050306)[0m third_prompt:         length = len(s)
[36m(TaskRunner pid=3050306)[0m  end3prompt
[36m(TaskRunner pid=3050306)[0m third_res:         # If the character has been taken out, we add one to the number endthird
[36m(TaskRunner pid=3050306)[0m fourth_prompt:         maxcount = 0
[36m(TaskRunner pid=3050306)[0m  end4prompt
[36m(TaskRunner pid=3050306)[0m fourth_res:         # If we don't use the character in the string, we can simply endfourth
[36m(TaskRunner pid=3050306)[0m fifth_prompt:         left = 0
[36m(TaskRunner pid=3050306)[0m  end5prompt
[36m(TaskRunner pid=3050306)[0m fifth_res:         # We now search through the character's hash to see if it is higher endfifth
[36m(TaskRunner pid=3050306)[0m six_prompt:         window = defaultdict(int)
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m six_res:         # This will keep track of how many times we have searched every character in endsix
[36m(TaskRunner pid=3050306)[0m seven_prompt:         
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         for i in range(length):
[36m(TaskRunner pid=3050306)[0m  end7prompt
[36m(TaskRunner pid=3050306)[0m seven_res:             # If it is not the actual current character being used, we can add endseven
[36m(WorkerDict pid=3062565)[0m sssss[32m [repeated 4x across cluster][0m
[36m(TaskRunner pid=3050306)[0m Training Progress:   0%|          | 11/2218 [06:19<21:11:05, 34.56s/it]
[36m(TaskRunner pid=3050306)[0m step:11 - global_seqlen/min:129986 - global_seqlen/max:160065 - global_seqlen/minmax_diff:30079 - global_seqlen/balanced_min:149929 - global_seqlen/balanced_max:149929 - global_seqlen/mean:149929.0 - actor/entropy:1.8174477815628052 - actor/pg_loss:-0.009039501620767018 - actor/pg_clipfrac:0.0025145441735124527 - actor/ppo_kl:0.0005321388329093679 - actor/pg_clipfrac_lower:0.0 - actor/grad_norm:0.31403227150440216 - perf/mfu/actor:0.0 - perf/max_memory_allocated_gb:16.1168155670166 - perf/max_memory_reserved_gb:29.080078125 - perf/cpu_memory_used_gb:74.74388122558594 - actor/lr:2e-06 - training/global_step:11 - training/epoch:0 - critic/rewards/mean:0.4207736551761627 - critic/rewards/max:0.7632776498794556 - critic/rewards/min:0.0 - critic/advantages/mean:0.006414507981389761 - critic/advantages/max:1.1546974182128906 - critic/advantages/min:-1.1546953916549683 - critic/format_reward/mean:0.9573923945426941 - response_length/mean:15.774200439453125 - response_length/max:16.047618865966797 - response_length/min:7.176470756530762 - response_length/clip_ratio:0.0 - prompt_length/mean:27.806640625 - prompt_length/max:127.0 - prompt_length/min:2.0 - prompt_length/clip_ratio:0.0 - timing_s/start_profile:4.181987605988979e-06 - timing_s/generate_sequences:22.322961807250977 - timing_s/reshard:0.5742843151092529 - timing_s/gen:23.26239806599915 - timing_s/reward:0.6176811319892295 - timing_s/old_log_prob:1.6884593050344847 - timing_s/ref:1.609480477985926 - timing_s/adv:0.24381761299446225 - timing_s/update_actor:6.838141713989899 - timing_s/step:34.31628902000375 - timing_s/stop_profile:2.455024514347315e-06 - timing_per_token_ms/ref:0.012021783279787299 - timing_per_token_ms/update_actor:0.05107651745172561 - timing_per_token_ms/adv:0.0018211606436397594 - timing_per_token_ms/gen:0.48004938398248803 - perf/total_num_tokens:1199432 - perf/time_per_step:34.31628902000375 - perf/throughput:4369.0330243052495
[36m(TaskRunner pid=3050306)[0m global_steps 12
[36m(WorkerDict pid=3062566)[0m sssss
[36m(WorkerDict pid=3062564)[0m sssss
[36m(WorkerDict pid=3062564)[0m sssss
[36m(WorkerDict pid=3062563)[0m sssss[32m [repeated 4x across cluster][0m
[36m(TaskRunner pid=3050306)[0m Training Progress:   1%|          | 12/2218 [06:54<21:10:47, 34.56s/it]
[36m(TaskRunner pid=3050306)[0m first_prompt: class Solution:
[36m(TaskRunner pid=3050306)[0m  end1prompt
[36m(TaskRunner pid=3050306)[0m first_res:     # We iterate through the rows list and for each row, check if the endfirst
[36m(TaskRunner pid=3050306)[0m second_prompt:     def mergeAlternately(self, word1: str, word2: str) -> str:
[36m(TaskRunner pid=3050306)[0m  end2prompt
[36m(TaskRunner pid=3050306)[0m second_res:         # If the words are equal, then the same element will be the result endsecond
[36m(TaskRunner pid=3050306)[0m third_prompt: 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         res = ''
[36m(TaskRunner pid=3050306)[0m  end3prompt
[36m(TaskRunner pid=3050306)[0m third_res:         # If the elements are not equal, we loop through the words to get endthird
[36m(TaskRunner pid=3050306)[0m fourth_prompt: 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         a1 = 0
[36m(TaskRunner pid=3050306)[0m  end4prompt
[36m(TaskRunner pid=3050306)[0m fourth_res:         # If a specific word is present of the same element and is greater than endfourth
[36m(TaskRunner pid=3050306)[0m fifth_prompt: 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         a2 = 0
[36m(TaskRunner pid=3050306)[0m  end5prompt
[36m(TaskRunner pid=3050306)[0m fifth_res:         # the element a1 if the first word of the current element is greater endfifth
[36m(TaskRunner pid=3050306)[0m six_prompt: 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         while a1 < min(len(word1),len(word2)) :
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m six_res:             # If the word is present, we check to see if it is the endsix
[36m(TaskRunner pid=3050306)[0m seven_prompt:             res = res + word1[a1] + word2[a1]
[36m(TaskRunner pid=3050306)[0m  end7prompt
[36m(TaskRunner pid=3050306)[0m seven_res:             # If yes, we add the second word of the first to the end endseven
[36m(TaskRunner pid=3050306)[0m step:12 - global_seqlen/min:139145 - global_seqlen/max:163491 - global_seqlen/minmax_diff:24346 - global_seqlen/balanced_min:150373 - global_seqlen/balanced_max:150374 - global_seqlen/mean:150373.25 - actor/entropy:1.672004222869873 - actor/pg_loss:-0.0321042629754326 - actor/pg_clipfrac:0.004016111510281917 - actor/ppo_kl:0.0009816497301168663 - actor/pg_clipfrac_lower:0.0 - actor/grad_norm:0.3109878972172737 - perf/mfu/actor:0.0 - perf/max_memory_allocated_gb:16.1168155670166 - perf/max_memory_reserved_gb:32.89453125 - perf/cpu_memory_used_gb:74.89681243896484 - actor/lr:2e-06 - training/global_step:12 - training/epoch:0 - critic/rewards/mean:0.4256629943847656 - critic/rewards/max:0.7520875334739685 - critic/rewards/min:0.0 - critic/advantages/mean:0.005086104851216078 - critic/advantages/max:1.1546977758407593 - critic/advantages/min:-1.1546916961669922 - critic/format_reward/mean:0.9679043889045715 - response_length/mean:15.824320793151855 - response_length/max:16.090909957885742 - response_length/min:9.857142448425293 - response_length/clip_ratio:0.0 - prompt_length/mean:27.9091796875 - prompt_length/max:127.0 - prompt_length/min:3.0 - prompt_length/clip_ratio:0.0 - timing_s/start_profile:5.128968041390181e-06 - timing_s/generate_sequences:22.16791534423828 - timing_s/reshard:0.7384568452835083 - timing_s/gen:23.24986749101663 - timing_s/reward:0.6084304290125147 - timing_s/old_log_prob:1.6669797010254115 - timing_s/ref:1.6200594460242428 - timing_s/adv:0.246266926988028 - timing_s/update_actor:7.039213199983351 - timing_s/step:34.48980299499817 - timing_s/stop_profile:2.6259804144501686e-06 - timing_per_token_ms/ref:0.012058561490772368 - timing_per_token_ms/update_actor:0.05239485836582417 - timing_per_token_ms/adv:0.0018330345158113703 - timing_per_token_ms/gen:0.47827116825632665 - perf/total_num_tokens:1202986 - perf/time_per_step:34.48980299499817 - perf/throughput:4359.933572882618
[36m(TaskRunner pid=3050306)[0m global_steps 13
[36m(WorkerDict pid=3062563)[0m sssss[32m [repeated 4x across cluster][0m
[36m(WorkerDict pid=3062566)[0m sssss
[36m(WorkerDict pid=3062569)[0m sssss
[36m(TaskRunner pid=3050306)[0m Training Progress:   1%|          | 13/2218 [07:29<21:19:24, 34.81s/it]
[36m(TaskRunner pid=3050306)[0m first_prompt: #
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m # @lc app=leetcode.cn id=92 lang=python3
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m #
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m # [92] 反转链表 II
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m #
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m # @lc code=start
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m # Definition for singly-linked list.
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m class ListNode:
[36m(TaskRunner pid=3050306)[0m  end1prompt
[36m(TaskRunner pid=3050306)[0m first_res:     # The data member is the value that we want to hold in this node endfirst
[36m(TaskRunner pid=3050306)[0m second_prompt:     def __init__(self, val=0, next=None):
[36m(TaskRunner pid=3050306)[0m  end2prompt
[36m(TaskRunner pid=3050306)[0m second_res:         # If the next node is not specified, this will be the next node endsecond
[36m(TaskRunner pid=3050306)[0m third_prompt:         self.val = val
[36m(TaskRunner pid=3050306)[0m  end3prompt
[36m(TaskRunner pid=3050306)[0m third_res:         # We also need to set a variable to point to the next node of endthird
[36m(TaskRunner pid=3050306)[0m fourth_prompt:         self.next = next
[36m(TaskRunner pid=3050306)[0m  end4prompt
[36m(TaskRunner pid=3050306)[0m fourth_res:         # This is so that we can return the contents of this node as the endfourth
[36m(TaskRunner pid=3050306)[0m fifth_prompt: class Solution:
[36m(TaskRunner pid=3050306)[0m  end5prompt
[36m(TaskRunner pid=3050306)[0m fifth_res:         # In Python, we can use a list as a value because a list endfifth
[36m(TaskRunner pid=3050306)[0m six_prompt:     def reverseBetween(self, head: ListNode, left: int, right: int) -> ListNode:
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m six_res:         # We are able to reverse the list by passing in a list that represents endsix
[36m(TaskRunner pid=3050306)[0m seven_prompt:         dummy = ListNode()
[36m(TaskRunner pid=3050306)[0m  end7prompt
[36m(TaskRunner pid=3050306)[0m seven_res:         # This will be the list that we will use to pass in the values endseven
[36m(TaskRunner pid=3050306)[0m step:13 - global_seqlen/min:141026 - global_seqlen/max:164246 - global_seqlen/minmax_diff:23220 - global_seqlen/balanced_min:151963 - global_seqlen/balanced_max:151964 - global_seqlen/mean:151963.875 - actor/entropy:1.5503612756729126 - actor/pg_loss:-0.005630882448410072 - actor/pg_clipfrac:0.0022378865081312447 - actor/ppo_kl:0.000896333738675518 - actor/pg_clipfrac_lower:0.0 - actor/grad_norm:0.2962804138660431 - perf/mfu/actor:0.0 - perf/max_memory_allocated_gb:16.1168155670166 - perf/max_memory_reserved_gb:34.173828125 - perf/cpu_memory_used_gb:74.87718200683594 - actor/lr:2e-06 - training/global_step:13 - training/epoch:0 - critic/rewards/mean:0.4299643039703369 - critic/rewards/max:0.7136114835739136 - critic/rewards/min:0.0 - critic/advantages/mean:0.00445830961689353 - critic/advantages/max:1.1546982526779175 - critic/advantages/min:-1.154697299003601 - critic/format_reward/mean:0.9709844589233398 - response_length/mean:15.84307861328125 - response_length/max:16.076923370361328 - response_length/min:9.399999618530273 - response_length/clip_ratio:0.0 - prompt_length/mean:28.92578125 - prompt_length/max:126.0 - prompt_length/min:2.0 - prompt_length/clip_ratio:0.0 - timing_s/start_profile:3.931985702365637e-06 - timing_s/generate_sequences:22.056243896484375 - timing_s/reshard:0.5099425315856934 - timing_s/gen:23.244690984021872 - timing_s/reward:0.6175287350197323 - timing_s/old_log_prob:1.7147703259834088 - timing_s/ref:1.7615459610242397 - timing_s/adv:0.27783461997751147 - timing_s/update_actor:7.626362869981676 - timing_s/step:35.29868937598076 - timing_s/stop_profile:2.3480388335883617e-06 - timing_per_token_ms/ref:0.012808454603014996 - timing_per_token_ms/update_actor:0.05545238373995245 - timing_per_token_ms/adv:0.0020201755707008264 - timing_per_token_ms/gen:0.4775985377836549 - perf/total_num_tokens:1215711 - perf/time_per_step:35.29868937598076 - perf/throughput:4305.085477292675
[36m(WorkerDict pid=3062566)[0m sssss[32m [repeated 2x across cluster][0m
[36m(TaskRunner pid=3050306)[0m global_steps 14
[36m(WorkerDict pid=3062563)[0m sssss
[36m(WorkerDict pid=3062568)[0m sssss
[36m(TaskRunner pid=3050306)[0m first_prompt: # Power of two
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m # return n > 0 and (n & n-1 == 0)
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m class Solution:
[36m(TaskRunner pid=3050306)[0m  end1prompt
[36m(TaskRunner pid=3050306)[0m first_res:     # You may assume that the number of characters in the string is at least endfirst
[36m(TaskRunner pid=3050306)[0m second_prompt:     def isPowerOfTwo(self, n: int) -> bool:
[36m(TaskRunner pid=3050306)[0m  end2prompt
[36m(TaskRunner pid=3050306)[0m second_res:         # Begin by using a bit mask to determine if the number is zero or endsecond
[36m(TaskRunner pid=3050306)[0m third_prompt:         # n = abs(n)
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         if n < 0:
[36m(TaskRunner pid=3050306)[0m  end3prompt
[36m(TaskRunner pid=3050306)[0m third_res:             # If there is not a square root, then there is no solution, endthird
[36m(TaskRunner pid=3050306)[0m fourth_prompt:             return False
[36m(TaskRunner pid=3050306)[0m  end4prompt
[36m(TaskRunner pid=3050306)[0m fourth_res:             # Otherwise, we know that we have a way to solve the problem, endfourth
[36m(TaskRunner pid=3050306)[0m fifth_prompt:         bin_n = bin(n)[2:]
[36m(TaskRunner pid=3050306)[0m  end5prompt
[36m(TaskRunner pid=3050306)[0m fifth_res:             # Because the square root of a number can only be expressed as this number endfifth
[36m(TaskRunner pid=3050306)[0m six_prompt:         if '1' in bin_n[1:] or bin_n[0] == '0':
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m six_res:                 # If we know that a number is the square root of another number, endsix
[36m(TaskRunner pid=3050306)[0m seven_prompt:             return False
[36m(TaskRunner pid=3050306)[0m  end7prompt
[36m(TaskRunner pid=3050306)[0m seven_res:                 # So the next step is to iterate through each character and if it is endseven
[36m(WorkerDict pid=3062564)[0m sssss
[36m(TaskRunner pid=3050306)[0m step:14 - global_seqlen/min:141581 - global_seqlen/max:162604 - global_seqlen/minmax_diff:21023 - global_seqlen/balanced_min:150110 - global_seqlen/balanced_max:150111 - global_seqlen/mean:150110.75 - actor/entropy:1.427675485610962 - actor/pg_loss:0.0192362213274464 - actor/pg_clipfrac:0.002410493561910698 - actor/ppo_kl:0.0007620593681470685 - actor/pg_clipfrac_lower:0.0 - actor/grad_norm:0.2970968410372734 - perf/mfu/actor:0.0 - perf/max_memory_allocated_gb:16.1168155670166 - perf/max_memory_reserved_gb:34.173828125 - perf/cpu_memory_used_gb:74.9820556640625 - actor/lr:2e-06 - training/global_step:14 - training/epoch:0 - critic/rewards/mean:0.4345923364162445 - critic/rewards/max:0.7546781301498413 - critic/rewards/min:0.0 - critic/advantages/mean:0.003546798834577203 - critic/advantages/max:1.154695987701416 - critic/advantages/min:-1.1546969413757324 - critic/format_reward/mean:0.9789910912513733 - response_length/mean:15.876051902770996 - response_length/max:16.100000381469727 - response_length/min:4.538461685180664 - response_length/clip_ratio:0.0 - prompt_length/mean:29.77734375 - prompt_length/max:128.0 - prompt_length/min:3.0 - prompt_length/clip_ratio:0.0009765625 - timing_s/start_profile:5.3209951147437096e-06 - timing_s/generate_sequences:21.854106903076172 - timing_s/reshard:0.7769675850868225 - timing_s/gen:23.28710337902885 - timing_s/reward:0.7403581070248038 - timing_s/old_log_prob:1.7279591920087114 - timing_s/ref:1.6333688030135818 - timing_s/adv:0.2625703699886799 - timing_s/update_actor:6.840537154988851 - timing_s/step:34.55503572104499 - timing_s/stop_profile:2.9130023904144764e-06 - timing_per_token_ms/ref:0.011646353354389629 - timing_per_token_ms/update_actor:0.048774846619969905 - timing_per_token_ms/adv:0.0018721964712678303 - timing_per_token_ms/gen:0.4774762325086299 - perf/total_num_tokens:1200886 - perf/time_per_step:34.55503572104499 - perf/throughput:4344.1063470983
[36m(TaskRunner pid=3050306)[0m Training Progress:   1%|          | 14/2218 [08:04<21:17:16, 34.77s/it]
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m global_steps 15
[36m(WorkerDict pid=3062564)[0m sssss
[36m(TaskRunner pid=3050306)[0m first_prompt: 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m Write a function to find the minimum element in a list that is not present in another list. The elements in the lists are integers.
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m ```python
[36m(TaskRunner pid=3050306)[0m def find_min_unique(fronts, backs):
[36m(TaskRunner pid=3050306)[0m  end1prompt
[36m(TaskRunner pid=3050306)[0m first_res:     # To find the min element of each list, we need to check each endfirst
[36m(TaskRunner pid=3050306)[0m second_prompt:     cannot = set([i for i, j in zip(fronts, backs) if i == j])
[36m(TaskRunner pid=3050306)[0m  end2prompt
[36m(TaskRunner pid=3050306)[0m second_res:     # If we found the min element in the other list, we can ignore endsecond
[36m(TaskRunner pid=3050306)[0m third_prompt:     cans = set(fronts + backs)
[36m(TaskRunner pid=3050306)[0m  end3prompt
[36m(TaskRunner pid=3050306)[0m third_res:     # The set will contain only the unique elements of each list and do not endthird
[36m(TaskRunner pid=3050306)[0m fourth_prompt:     res = float('inf')
[36m(TaskRunner pid=3050306)[0m  end4prompt
[36m(TaskRunner pid=3050306)[0m fourth_res:     # We will keep track of the minimum element that is in both lists and endfourth
[36m(TaskRunner pid=3050306)[0m fifth_prompt:     for i in range(len(fronts)):
[36m(TaskRunner pid=3050306)[0m  end5prompt
[36m(TaskRunner pid=3050306)[0m fifth_res:         # If the minimum element that is in only this list has not been found endfifth
[36m(TaskRunner pid=3050306)[0m six_prompt:         if fronts[i] not in cannot:
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m six_res:             # If we found the minimum in this list then we have found the unique endsix
[36m(TaskRunner pid=3050306)[0m seven_prompt:             res = min(res, fronts[i])
[36m(TaskRunner pid=3050306)[0m  end7prompt
[36m(TaskRunner pid=3050306)[0m seven_res:             # We will know that this is the minimum element in this list and thus endseven
[36m(WorkerDict pid=3062288)[0m sssss[32m [repeated 3x across cluster][0m
[36m(TaskRunner pid=3050306)[0m Training Progress:   1%|          | 15/2218 [08:37<21:06:31, 34.49s/it]
[36m(TaskRunner pid=3050306)[0m step:15 - global_seqlen/min:139566 - global_seqlen/max:168158 - global_seqlen/minmax_diff:28592 - global_seqlen/balanced_min:152830 - global_seqlen/balanced_max:152831 - global_seqlen/mean:152830.625 - actor/entropy:1.3387542963027954 - actor/pg_loss:0.004409097018651664 - actor/pg_clipfrac:0.0025334428840627274 - actor/ppo_kl:0.0005118540114684341 - actor/pg_clipfrac_lower:0.0 - actor/grad_norm:0.29126545786857605 - perf/mfu/actor:0.0 - perf/max_memory_allocated_gb:16.1168155670166 - perf/max_memory_reserved_gb:34.173828125 - perf/cpu_memory_used_gb:74.95917129516602 - actor/lr:2e-06 - training/global_step:15 - training/epoch:0 - critic/rewards/mean:0.4401532709598541 - critic/rewards/max:0.6936492919921875 - critic/rewards/min:0.0 - critic/advantages/mean:0.0035431073047220707 - critic/advantages/max:1.1546977758407593 - critic/advantages/min:-1.154691219329834 - critic/format_reward/mean:0.9807946085929871 - response_length/mean:15.890957832336426 - response_length/max:16.08333396911621 - response_length/min:9.600000381469727 - response_length/clip_ratio:0.0 - prompt_length/mean:27.884765625 - prompt_length/max:128.0 - prompt_length/min:2.0 - prompt_length/clip_ratio:0.0009765625 - timing_s/start_profile:5.042995326220989e-06 - timing_s/generate_sequences:21.149730682373047 - timing_s/reshard:0.6845470666885376 - timing_s/gen:22.205248017970007 - timing_s/reward:0.6237852289923467 - timing_s/old_log_prob:1.7096848610090092 - timing_s/ref:1.667966190027073 - timing_s/adv:0.2623925529769622 - timing_s/update_actor:7.203117614961229 - timing_s/step:33.75866052496713 - timing_s/stop_profile:3.3609685488045216e-06 - timing_per_token_ms/ref:0.012403170006675956 - timing_per_token_ms/update_actor:0.05356313148949156 - timing_per_token_ms/adv:0.001951178304762979 - timing_per_token_ms/gen:0.4548668979459427 - perf/total_num_tokens:1222645 - perf/time_per_step:33.75866052496713 - perf/throughput:4527.153110443171
[36m(TaskRunner pid=3050306)[0m global_steps 16
[36m(TaskRunner pid=3050306)[0m error!! index 3 is out of bounds for dimension 0 with size 3
[36m(TaskRunner pid=3050306)[0m Training Progress:   1%|          | 16/2218 [09:12<21:11:11, 34.64s/it]
[36m(TaskRunner pid=3050306)[0m step:16 - global_seqlen/min:141362 - global_seqlen/max:166894 - global_seqlen/minmax_diff:25532 - global_seqlen/balanced_min:155631 - global_seqlen/balanced_max:155632 - global_seqlen/mean:155631.25 - actor/entropy:1.2188549041748047 - actor/pg_loss:-0.0397584109644716 - actor/pg_clipfrac:0.0035884829485439695 - actor/ppo_kl:0.0008539123482478317 - actor/pg_clipfrac_lower:0.0 - actor/grad_norm:0.28985537588596344 - perf/mfu/actor:0.0 - perf/max_memory_allocated_gb:16.1168155670166 - perf/max_memory_reserved_gb:34.173828125 - perf/cpu_memory_used_gb:74.94754028320312 - actor/lr:2e-06 - training/global_step:16 - training/epoch:0 - critic/rewards/mean:0.4472569525241852 - critic/rewards/max:0.7317593097686768 - critic/rewards/min:0.0 - critic/advantages/mean:0.0030819245148450136 - critic/advantages/max:1.1546982526779175 - critic/advantages/min:-1.1546963453292847 - critic/format_reward/mean:0.9838907122612 - response_length/mean:15.902850151062012 - response_length/max:16.153846740722656 - response_length/min:6.666666507720947 - response_length/clip_ratio:0.0 - prompt_length/mean:30.455078125 - prompt_length/max:128.0 - prompt_length/min:3.0 - prompt_length/clip_ratio:0.0009765625 - timing_s/start_profile:4.536996129900217e-06 - timing_s/generate_sequences:22.346162796020508 - timing_s/reshard:0.5972994565963745 - timing_s/gen:23.459638004016597 - timing_s/reward:0.6186230299645104 - timing_s/old_log_prob:1.6747450529946946 - timing_s/ref:1.6494585759937763 - timing_s/adv:0.2487903640139848 - timing_s/update_actor:7.175786493986379 - timing_s/step:34.88322038302431 - timing_s/stop_profile:2.6780180633068085e-06 - timing_per_token_ms/ref:0.01158233669742077 - timing_per_token_ms/update_actor:0.05038767050702119 - timing_per_token_ms/adv:0.0017469815883965072 - timing_per_token_ms/gen:0.4802032964454711 - perf/total_num_tokens:1245050 - perf/time_per_step:34.88322038302431 - perf/throughput:4461.493184721469
[36m(TaskRunner pid=3050306)[0m global_steps 17
[36m(WorkerDict pid=3062565)[0m sssss
[36m(WorkerDict pid=3062566)[0m sssss[32m [repeated 2x across cluster][0m
[36m(TaskRunner pid=3050306)[0m Training Progress:   1%|          | 17/2218 [09:46<20:59:39, 34.34s/it]
[36m(TaskRunner pid=3050306)[0m first_prompt: class Solution(object):
[36m(TaskRunner pid=3050306)[0m  end1prompt
[36m(TaskRunner pid=3050306)[0m first_res:     # This will return an integer which will be the final number of players after endfirst
[36m(TaskRunner pid=3050306)[0m second_prompt:     def dp(self, nums, i, summ, S, data):
[36m(TaskRunner pid=3050306)[0m  end2prompt
[36m(TaskRunner pid=3050306)[0m second_res:         # If the current player has already finished then there is no need to add endsecond
[36m(TaskRunner pid=3050306)[0m third_prompt:         if i == len(nums):
[36m(TaskRunner pid=3050306)[0m  end3prompt
[36m(TaskRunner pid=3050306)[0m third_res:         # If this player has finished the previous player has to be added to the endthird
[36m(TaskRunner pid=3050306)[0m fourth_prompt:             if S == summ:
[36m(TaskRunner pid=3050306)[0m  end4prompt
[36m(TaskRunner pid=3050306)[0m fourth_res:         # If the current number of players is equal to the total number of players endfourth
[36m(TaskRunner pid=3050306)[0m fifth_prompt:                 return 1
[36m(TaskRunner pid=3050306)[0m  end5prompt
[36m(TaskRunner pid=3050306)[0m fifth_res:         # If it is still higher then we have to add the final player to endfifth
[36m(TaskRunner pid=3050306)[0m six_prompt:             else:
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m six_res:         # If it is higher then we have to add this new player to the endsix
[36m(TaskRunner pid=3050306)[0m seven_prompt:                 return 0
[36m(TaskRunner pid=3050306)[0m  end7prompt
[36m(TaskRunner pid=3050306)[0m seven_res:         # If this player finishes then we just return the number of players we have endseven
[36m(TaskRunner pid=3050306)[0m step:17 - global_seqlen/min:140882 - global_seqlen/max:162828 - global_seqlen/minmax_diff:21946 - global_seqlen/balanced_min:152158 - global_seqlen/balanced_max:152159 - global_seqlen/mean:152158.5 - actor/entropy:1.1295166015625 - actor/pg_loss:-0.004449651469864572 - actor/pg_clipfrac:0.002537601963316168 - actor/ppo_kl:0.0005066072138409557 - actor/pg_clipfrac_lower:0.0 - actor/grad_norm:0.2830907478928566 - perf/mfu/actor:0.0 - perf/max_memory_allocated_gb:16.1168155670166 - perf/max_memory_reserved_gb:34.173828125 - perf/cpu_memory_used_gb:75.04317092895508 - actor/lr:2e-06 - training/global_step:17 - training/epoch:0 - critic/rewards/mean:0.4450240433216095 - critic/rewards/max:0.7168488502502441 - critic/rewards/min:0.0 - critic/advantages/mean:0.003120626322925091 - critic/advantages/max:1.1546971797943115 - critic/advantages/min:-1.1546969413757324 - critic/format_reward/mean:0.9828612804412842 - response_length/mean:15.900507926940918 - response_length/max:16.04166603088379 - response_length/min:8.5 - response_length/clip_ratio:0.0 - prompt_length/mean:26.94921875 - prompt_length/max:127.0 - prompt_length/min:3.0 - prompt_length/clip_ratio:0.0 - timing_s/start_profile:4.558998625725508e-06 - timing_s/generate_sequences:21.70936393737793 - timing_s/reshard:0.6316447257995605 - timing_s/gen:22.750457576010376 - timing_s/reward:0.6034856719779782 - timing_s/old_log_prob:1.6560676739900373 - timing_s/ref:1.634895706025418 - timing_s/adv:0.24546640901826322 - timing_s/update_actor:6.518343900970649 - timing_s/step:33.464421098004095 - timing_s/stop_profile:2.3090397007763386e-06 - timing_per_token_ms/ref:0.012419976925385616 - timing_per_token_ms/update_actor:0.04951855983437568 - timing_per_token_ms/adv:0.0018647594000816949 - timing_per_token_ms/gen:0.465755439445386 - perf/total_num_tokens:1217268 - perf/time_per_step:33.464421098004095 - perf/throughput:4546.873814263446
[36m(TaskRunner pid=3050306)[0m global_steps 18
[36m(TaskRunner pid=3050306)[0m Training Progress:   1%|          | 18/2218 [10:19<20:38:42, 33.78s/it]
[36m(TaskRunner pid=3050306)[0m first_prompt: 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m Write a python function to find the number of unique binary search trees that can be created with a given number of nodes.
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m ```python
[36m(TaskRunner pid=3050306)[0m def count_unique_bst(n):
[36m(TaskRunner pid=3050306)[0m  end1prompt
[36m(TaskRunner pid=3050306)[0m first_res:     # The number of unique binary search trees that can be created
[36m(TaskRunner pid=3050306)[0m  endfirst
[36m(TaskRunner pid=3050306)[0m second_prompt:     dp = [0] * (n + 1)
[36m(TaskRunner pid=3050306)[0m  end2prompt
[36m(TaskRunner pid=3050306)[0m second_res:     # Initialize to 0 to keep track of how many we have already allocated endsecond
[36m(TaskRunner pid=3050306)[0m third_prompt:     dp[0] = 1
[36m(TaskRunner pid=3050306)[0m  end3prompt
[36m(TaskRunner pid=3050306)[0m third_res:     # This will keep track of how many nodes we have already allocated to the endthird
[36m(TaskRunner pid=3050306)[0m fourth_prompt:     dp[1] = 1
[36m(TaskRunner pid=3050306)[0m  end4prompt
[36m(TaskRunner pid=3050306)[0m fourth_res:     # We will keep track of how many nodes we have not allocated yet to endfourth
[36m(TaskRunner pid=3050306)[0m fifth_prompt:     for i in range(2, n + 1):
[36m(TaskRunner pid=3050306)[0m  end5prompt
[36m(TaskRunner pid=3050306)[0m fifth_res:         # If we have allocated the node to the tree, we will add that endfifth
[36m(TaskRunner pid=3050306)[0m six_prompt:         for j in range(i):
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m six_res:             # If the node is not already allocated to the tree, we will add endsix
[36m(TaskRunner pid=3050306)[0m seven_prompt:             dp[i] += dp[j] * dp[i - j - 1]
[36m(TaskRunner pid=3050306)[0m  end7prompt
[36m(TaskRunner pid=3050306)[0m seven_res:             # This will increase the value we have allocated to the node and add it endseven
[36m(TaskRunner pid=3050306)[0m step:18 - global_seqlen/min:142373 - global_seqlen/max:162258 - global_seqlen/minmax_diff:19885 - global_seqlen/balanced_min:149556 - global_seqlen/balanced_max:149557 - global_seqlen/mean:149556.25 - actor/entropy:1.0111033916473389 - actor/pg_loss:0.007902736905331645 - actor/pg_clipfrac:0.004231160683654404 - actor/ppo_kl:0.0006667922279272412 - actor/pg_clipfrac_lower:0.0 - actor/grad_norm:0.2931657135486603 - perf/mfu/actor:0.0 - perf/max_memory_allocated_gb:16.1168155670166 - perf/max_memory_reserved_gb:34.173828125 - perf/cpu_memory_used_gb:75.0265884399414 - actor/lr:2e-06 - training/global_step:18 - training/epoch:0 - critic/rewards/mean:0.45323237776756287 - critic/rewards/max:0.7907119989395142 - critic/rewards/min:0.0 - critic/advantages/mean:0.001849521417170763 - critic/advantages/max:1.1546974182128906 - critic/advantages/min:-1.1546977758407593 - critic/format_reward/mean:0.9843117594718933 - response_length/mean:15.909599304199219 - response_length/max:16.068965911865234 - response_length/min:7.75 - response_length/clip_ratio:0.0 - prompt_length/mean:28.7255859375 - prompt_length/max:128.0 - prompt_length/min:3.0 - prompt_length/clip_ratio:0.0009765625 - timing_s/start_profile:2.7501024305820465e-05 - timing_s/generate_sequences:20.65375518798828 - timing_s/reshard:0.7052973508834839 - timing_s/gen:21.769207642006222 - timing_s/reward:0.6223076120368205 - timing_s/old_log_prob:1.6196069750003517 - timing_s/ref:1.5973062430275604 - timing_s/adv:0.2406090369913727 - timing_s/update_actor:6.495284006989095 - timing_s/step:32.400747023988515 - timing_s/stop_profile:2.6430352590978146e-06 - timing_per_token_ms/ref:0.011649026580786138 - timing_per_token_ms/update_actor:0.04736958637546973 - timing_per_token_ms/adv:0.00175474244824666 - timing_per_token_ms/gen:0.44541226193935946 - perf/total_num_tokens:1196450 - perf/time_per_step:32.400747023988515 - perf/throughput:4615.827218096952
[36m(TaskRunner pid=3050306)[0m global_steps 19
[36m(WorkerDict pid=3062564)[0m sssss
[36m(WorkerDict pid=3062563)[0m sssss
[36m(WorkerDict pid=3062568)[0m sssss
[36m(TaskRunner pid=3050306)[0m Training Progress:   1%|          | 19/2218 [10:52<20:37:18, 33.76s/it]
[36m(TaskRunner pid=3050306)[0m first_prompt: """
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m URL of problem:
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m https://leetcode.com/explore/challenge/card/august-leetcoding-challenge/550/week-2-august-8th-august-14th/3419/
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m https://leetcode.com/problems/excel-sheet-column-number/
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m """
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m class Solution(object):
[36m(TaskRunner pid=3050306)[0m  end1prompt
[36m(TaskRunner pid=3050306)[0m first_res:     # We can use a binary search method to find the number of sum values endfirst
[36m(TaskRunner pid=3050306)[0m second_prompt:     def titleToNumber(self, s):
[36m(TaskRunner pid=3050306)[0m  end2prompt
[36m(TaskRunner pid=3050306)[0m second_res:         # If the string starts with a number, this is obviously the number we endsecond
[36m(TaskRunner pid=3050306)[0m third_prompt:         """
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         :type s: str
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         :rtype: int
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         """
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         alphabet_dict = {}
[36m(TaskRunner pid=3050306)[0m  end3prompt
[36m(TaskRunner pid=3050306)[0m third_res:         # Now we save values that we have seen to be able to use them endthird
[36m(TaskRunner pid=3050306)[0m fourth_prompt:         # integer for "A"
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         num_value = 65
[36m(TaskRunner pid=3050306)[0m  end4prompt
[36m(TaskRunner pid=3050306)[0m fourth_res:         # We can then iterate through each character of the string to see if we endfourth
[36m(TaskRunner pid=3050306)[0m fifth_prompt:         for x in range(26):
[36m(TaskRunner pid=3050306)[0m  end5prompt
[36m(TaskRunner pid=3050306)[0m fifth_res:             # If we see a number, we save it in the dictionary we have endfifth
[36m(TaskRunner pid=3050306)[0m six_prompt:             alphabet_dict[chr(num_value)] = num_value - 64
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m six_res:             # This saves us from having to check each character once again.
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m seven_prompt:             num_value += 1
[36m(TaskRunner pid=3050306)[0m  end7prompt
[36m(TaskRunner pid=3050306)[0m seven_res:         # If we see a letter, we continue to save it in the dictionary endseven
[36m(TaskRunner pid=3050306)[0m step:19 - global_seqlen/min:146624 - global_seqlen/max:155165 - global_seqlen/minmax_diff:8541 - global_seqlen/balanced_min:151210 - global_seqlen/balanced_max:151211 - global_seqlen/mean:151210.875 - actor/entropy:0.9061713218688965 - actor/pg_loss:-0.007584018904405336 - actor/pg_clipfrac:0.0031670308417233173 - actor/ppo_kl:0.00048442918523505796 - actor/pg_clipfrac_lower:0.0 - actor/grad_norm:0.28232182562351227 - perf/mfu/actor:0.0 - perf/max_memory_allocated_gb:16.1168155670166 - perf/max_memory_reserved_gb:34.173828125 - perf/cpu_memory_used_gb:75.0635757446289 - actor/lr:2e-06 - training/global_step:19 - training/epoch:0 - critic/rewards/mean:0.4594055116176605 - critic/rewards/max:0.8293696641921997 - critic/rewards/min:0.0 - critic/advantages/mean:0.0014824391109868884 - critic/advantages/max:1.1546982526779175 - critic/advantages/min:-1.1546926498413086 - critic/format_reward/mean:0.9837050437927246 - response_length/mean:15.905773162841797 - response_length/max:16.034482955932617 - response_length/min:12.0 - response_length/clip_ratio:0.0 - prompt_length/mean:29.0751953125 - prompt_length/max:126.0 - prompt_length/min:3.0 - prompt_length/clip_ratio:0.0 - timing_s/start_profile:3.997993189841509e-06 - timing_s/generate_sequences:21.431005477905273 - timing_s/reshard:0.8056938648223877 - timing_s/gen:22.612111361988354 - timing_s/reward:0.6199151009786874 - timing_s/old_log_prob:1.6286419150419533 - timing_s/ref:1.5744970410014503 - timing_s/adv:0.2483143449644558 - timing_s/update_actor:6.872703710978385 - timing_s/step:33.612408593005966 - timing_s/stop_profile:2.4399487301707268e-06 - timing_per_token_ms/ref:0.011394409819091051 - timing_per_token_ms/update_actor:0.04973677346403059 - timing_per_token_ms/adv:0.001797015387646925 - timing_per_token_ms/gen:0.4627699174772769 - perf/total_num_tokens:1209687 - perf/time_per_step:33.612408593005966 - perf/throughput:4498.662289600507
[36m(TaskRunner pid=3050306)[0m global_steps 20
[36m(WorkerDict pid=3062563)[0m sssss
[36m(WorkerDict pid=3062564)[0m sssss[32m [repeated 2x across cluster][0m
[36m(TaskRunner pid=3050306)[0m Training Progress:   1%|          | 20/2218 [11:26<20:38:54, 33.82s/it]
[36m(TaskRunner pid=3050306)[0m first_prompt: 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m Write a function to count the number of occurrences of each character in a string, including spaces and special characters.
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m ```python
[36m(TaskRunner pid=3050306)[0m def count_characters(str1):
[36m(TaskRunner pid=3050306)[0m  end1prompt
[36m(TaskRunner pid=3050306)[0m first_res:     # A string is a sequence of characters separated by white spaces
[36m(TaskRunner pid=3050306)[0m  endfirst
[36m(TaskRunner pid=3050306)[0m second_prompt:     result={}
[36m(TaskRunner pid=3050306)[0m  end2prompt
[36m(TaskRunner pid=3050306)[0m second_res:     # We will keep track of the characters we have already counted
[36m(TaskRunner pid=3050306)[0m  endsecond
[36m(TaskRunner pid=3050306)[0m third_prompt:     for char in str1:
[36m(TaskRunner pid=3050306)[0m  end3prompt
[36m(TaskRunner pid=3050306)[0m third_res:         # If we have not seen this character before, we will add it to endthird
[36m(TaskRunner pid=3050306)[0m fourth_prompt:         if char in result:
[36m(TaskRunner pid=3050306)[0m  end4prompt
[36m(TaskRunner pid=3050306)[0m fourth_res:         # This will only occur if we have already seen this character and we haven endfourth
[36m(TaskRunner pid=3050306)[0m fifth_prompt:             result[char] += 1
[36m(TaskRunner pid=3050306)[0m  end5prompt
[36m(TaskRunner pid=3050306)[0m fifth_res:         # This will increment the counter for this character
[36m(TaskRunner pid=3050306)[0m  endfifth
[36m(TaskRunner pid=3050306)[0m six_prompt:         else:
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m six_res:             # If we have already seen this character before, we will not add it endsix
[36m(TaskRunner pid=3050306)[0m seven_prompt:             result[char] = 1
[36m(TaskRunner pid=3050306)[0m  end7prompt
[36m(TaskRunner pid=3050306)[0m seven_res:             # This will increment the counter for this character
[36m(TaskRunner pid=3050306)[0m  endseven
[36m(TaskRunner pid=3050306)[0m step:20 - global_seqlen/min:145792 - global_seqlen/max:158885 - global_seqlen/minmax_diff:13093 - global_seqlen/balanced_min:151632 - global_seqlen/balanced_max:151633 - global_seqlen/mean:151632.375 - actor/entropy:0.8323211669921875 - actor/pg_loss:-0.027616831474006176 - actor/pg_clipfrac:0.004955695828054256 - actor/ppo_kl:0.0004911843311295646 - actor/pg_clipfrac_lower:0.0 - actor/grad_norm:0.2889871522784233 - perf/mfu/actor:0.0 - perf/max_memory_allocated_gb:16.1168155670166 - perf/max_memory_reserved_gb:34.173828125 - perf/cpu_memory_used_gb:75.02779388427734 - actor/lr:2e-06 - training/global_step:20 - training/epoch:0 - critic/rewards/mean:0.4550091028213501 - critic/rewards/max:0.7920773029327393 - critic/rewards/min:0.0 - critic/advantages/mean:0.001649188343435526 - critic/advantages/max:1.1546971797943115 - critic/advantages/min:-1.15469491481781 - critic/format_reward/mean:0.9804577827453613 - response_length/mean:15.87051010131836 - response_length/max:16.095237731933594 - response_length/min:10.166666984558105 - response_length/clip_ratio:0.0 - prompt_length/mean:27.6357421875 - prompt_length/max:127.0 - prompt_length/min:3.0 - prompt_length/clip_ratio:0.0 - timing_s/start_profile:4.116969648748636e-06 - timing_s/generate_sequences:21.873685836791992 - timing_s/reshard:0.6487668752670288 - timing_s/gen:23.10859777702717 - timing_s/reward:0.6242411300190724 - timing_s/old_log_prob:1.7088996170205064 - timing_s/ref:1.6558063410338946 - timing_s/adv:0.2540576899773441 - timing_s/update_actor:6.453332217992283 - timing_s/step:33.86117007496068 - timing_s/stop_profile:2.4380278773605824e-06 - timing_per_token_ms/ref:0.012389011501009026 - timing_per_token_ms/update_actor:0.04828487793966112 - timing_per_token_ms/adv:0.0019009008270156585 - timing_per_token_ms/gen:0.4739816148012672 - perf/total_num_tokens:1213059 - perf/time_per_step:33.86117007496068 - perf/throughput:4478.060700924437
[36m(TaskRunner pid=3050306)[0m global_steps 21
[36m(WorkerDict pid=3062564)[0m sssss
[36m(WorkerDict pid=3062566)[0m sssss
[36m(TaskRunner pid=3050306)[0m Training Progress:   1%|          | 21/2218 [12:01<20:44:06, 33.98s/it]
[36m(TaskRunner pid=3050306)[0m error!! index 5 is out of bounds for dimension 0 with size 5
[36m(TaskRunner pid=3050306)[0m step:21 - global_seqlen/min:140327 - global_seqlen/max:160842 - global_seqlen/minmax_diff:20515 - global_seqlen/balanced_min:153041 - global_seqlen/balanced_max:153042 - global_seqlen/mean:153041.25 - actor/entropy:0.7399491667747498 - actor/pg_loss:-0.010742484359070659 - actor/pg_clipfrac:0.0033506486458160603 - actor/ppo_kl:0.0004714919003466396 - actor/pg_clipfrac_lower:0.0 - actor/grad_norm:0.28834017366170883 - perf/mfu/actor:0.0 - perf/max_memory_allocated_gb:16.1168155670166 - perf/max_memory_reserved_gb:34.173828125 - perf/cpu_memory_used_gb:75.12566757202148 - actor/lr:2e-06 - training/global_step:21 - training/epoch:0 - critic/rewards/mean:0.46249786019325256 - critic/rewards/max:0.8030120134353638 - critic/rewards/min:0.0 - critic/advantages/mean:0.001684395712800324 - critic/advantages/max:1.1546962261199951 - critic/advantages/min:-1.1546915769577026 - critic/format_reward/mean:0.9793040752410889 - response_length/mean:15.852890968322754 - response_length/max:16.058822631835938 - response_length/min:12.0 - response_length/clip_ratio:0.0 - prompt_length/mean:26.2880859375 - prompt_length/max:127.0 - prompt_length/min:3.0 - prompt_length/clip_ratio:0.0 - timing_s/start_profile:4.5790220610797405e-06 - timing_s/generate_sequences:22.83887481689453 - timing_s/reshard:0.57701176404953 - timing_s/gen:23.773854303988628 - timing_s/reward:0.6252447350416332 - timing_s/old_log_prob:1.6482978479471058 - timing_s/ref:1.5950918160378933 - timing_s/adv:0.24912728398339823 - timing_s/update_actor:6.306624512013514 - timing_s/step:34.25504798500333 - timing_s/stop_profile:2.626038622111082e-06 - timing_per_token_ms/ref:0.012321394789763991 - timing_per_token_ms/update_actor:0.04871594827458833 - timing_per_token_ms/adv:0.0019244005818334505 - timing_per_token_ms/gen:0.48816867061401165 - perf/total_num_tokens:1224330 - perf/time_per_step:34.25504798500333 - perf/throughput:4467.699186029476
[36m(TaskRunner pid=3050306)[0m global_steps 22
[36m(WorkerDict pid=3062563)[0m sssss
[36m(WorkerDict pid=3062563)[0m sssss
[36m(WorkerDict pid=3062566)[0m sssss[32m [repeated 2x across cluster][0m
[36m(TaskRunner pid=3050306)[0m Training Progress:   1%|          | 22/2218 [12:35<20:43:35, 33.98s/it]
[36m(TaskRunner pid=3050306)[0m first_prompt: # Definition for singly-linked list.
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m # class ListNode:
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m #     def __init__(self, val=0, next=None):
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m #         self.val = val
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m #         self.next = next
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m class Solution:
[36m(TaskRunner pid=3050306)[0m  end1prompt
[36m(TaskRunner pid=3050306)[0m first_res:     # This function finds the first node of the given list that contains
[36m(TaskRunner pid=3050306)[0m  endfirst
[36m(TaskRunner pid=3050306)[0m second_prompt:     def swapNodes(self, head: ListNode, k: int) -> ListNode:
[36m(TaskRunner pid=3050306)[0m  end2prompt
[36m(TaskRunner pid=3050306)[0m second_res:         # If there is no node found in the list to swap with, then endsecond
[36m(TaskRunner pid=3050306)[0m third_prompt:         temp = head
[36m(TaskRunner pid=3050306)[0m  end3prompt
[36m(TaskRunner pid=3050306)[0m third_res:         # we will just return that as the first element of the new list. endthird
[36m(TaskRunner pid=3050306)[0m fourth_prompt:         n = 0
[36m(TaskRunner pid=3050306)[0m  end4prompt
[36m(TaskRunner pid=3050306)[0m fourth_res:         # This loop will loop through each item in the list and will swap with endfourth
[36m(TaskRunner pid=3050306)[0m fifth_prompt:         a = []
[36m(TaskRunner pid=3050306)[0m  end5prompt
[36m(TaskRunner pid=3050306)[0m fifth_res:         # the current node we are looping through in the list. We first save endfifth
[36m(TaskRunner pid=3050306)[0m six_prompt:         
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         while temp:
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m six_res:             # We have found a node that we can swap with, so we will endsix
[36m(TaskRunner pid=3050306)[0m seven_prompt:             a.append(temp.val)
[36m(TaskRunner pid=3050306)[0m  end7prompt
[36m(TaskRunner pid=3050306)[0m seven_res:             # we will now continue looping through the rest of the list. We will endseven
[36m(TaskRunner pid=3050306)[0m step:22 - global_seqlen/min:145360 - global_seqlen/max:169853 - global_seqlen/minmax_diff:24493 - global_seqlen/balanced_min:152331 - global_seqlen/balanced_max:152332 - global_seqlen/mean:152331.375 - actor/entropy:0.6812607049942017 - actor/pg_loss:0.007323663293694456 - actor/pg_clipfrac:0.004450099896833611 - actor/ppo_kl:0.0004036195684703851 - actor/pg_clipfrac_lower:0.0 - actor/grad_norm:0.28182924911379814 - perf/mfu/actor:0.0 - perf/max_memory_allocated_gb:16.1168155670166 - perf/max_memory_reserved_gb:34.173828125 - perf/cpu_memory_used_gb:75.05322265625 - actor/lr:2e-06 - training/global_step:22 - training/epoch:0 - critic/rewards/mean:0.4628795385360718 - critic/rewards/max:0.7990033626556396 - critic/rewards/min:0.0 - critic/advantages/mean:0.0011363065568730235 - critic/advantages/max:1.1546982526779175 - critic/advantages/min:-1.1546975374221802 - critic/format_reward/mean:0.9744958877563477 - response_length/mean:15.805503845214844 - response_length/max:16.05555534362793 - response_length/min:10.5 - response_length/clip_ratio:0.0 - prompt_length/mean:27.951171875 - prompt_length/max:128.0 - prompt_length/min:3.0 - prompt_length/clip_ratio:0.0009765625 - timing_s/start_profile:5.356036126613617e-06 - timing_s/generate_sequences:22.588069915771484 - timing_s/reshard:0.6201412677764893 - timing_s/gen:23.578219556016847 - timing_s/reward:0.6141907049459405 - timing_s/old_log_prob:1.6225103189935908 - timing_s/ref:1.5788615809869952 - timing_s/adv:0.2544399910257198 - timing_s/update_actor:6.16916340100579 - timing_s/step:33.87465297197923 - timing_s/stop_profile:2.641987521201372e-06 - timing_per_token_ms/ref:0.011745689751368237 - timing_per_token_ms/update_actor:0.04589451045379928 - timing_per_token_ms/adv:0.0018928658667220046 - timing_per_token_ms/gen:0.48560310089162945 - perf/total_num_tokens:1218651 - perf/time_per_step:33.87465297197923 - perf/throughput:4496.913226712816
[36m(TaskRunner pid=3050306)[0m global_steps 23
[36m(WorkerDict pid=3062565)[0m sssss
[36m(TaskRunner pid=3050306)[0m first_prompt: 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m Write a function to find the maximum area of a histogram.
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m ```python
[36m(TaskRunner pid=3050306)[0m def max_histogram_area(heights):
[36m(TaskRunner pid=3050306)[0m  end1prompt
[36m(TaskRunner pid=3050306)[0m first_res:     # Initialize a variable to store the maximum area found
[36m(TaskRunner pid=3050306)[0m  endfirst
[36m(TaskRunner pid=3050306)[0m second_prompt:     stack = []
[36m(TaskRunner pid=3050306)[0m  end2prompt
[36m(TaskRunner pid=3050306)[0m second_res:     # To keep track of the area of each shape being added to the stack endsecond
[36m(TaskRunner pid=3050306)[0m third_prompt:     max_area = 0
[36m(TaskRunner pid=3050306)[0m  end3prompt
[36m(TaskRunner pid=3050306)[0m third_res:     # This will keep track of the largest area this function has found so far endthird
[36m(TaskRunner pid=3050306)[0m fourth_prompt:     index = 0
[36m(TaskRunner pid=3050306)[0m  end4prompt
[36m(TaskRunner pid=3050306)[0m fourth_res:     # This will keep track of the current index in the list where we found endfourth
[36m(TaskRunner pid=3050306)[0m fifth_prompt:     while index < len(heights):
[36m(TaskRunner pid=3050306)[0m  end5prompt
[36m(TaskRunner pid=3050306)[0m fifth_res:         # This index indicates which shape we have found that has the largest area so endfifth
[36m(TaskRunner pid=3050306)[0m six_prompt:         if (not stack) or (heights[stack[-1]] <= heights[index]):
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m six_res:             # If we haven't found the current shape yet that has the largest area endsix
[36m(TaskRunner pid=3050306)[0m seven_prompt:             stack.append(index)
[36m(TaskRunner pid=3050306)[0m  end7prompt
[36m(TaskRunner pid=3050306)[0m seven_res:             # If we have found the current shape that has the largest area then we endseven
[36m(WorkerDict pid=3062566)[0m sssss
[36m(TaskRunner pid=3050306)[0m Training Progress:   1%|          | 23/2218 [13:09<20:52:07, 34.23s/it]
[36m(TaskRunner pid=3050306)[0m step:23 - global_seqlen/min:136954 - global_seqlen/max:163851 - global_seqlen/minmax_diff:26897 - global_seqlen/balanced_min:149300 - global_seqlen/balanced_max:149301 - global_seqlen/mean:149300.125 - actor/entropy:0.6145545840263367 - actor/pg_loss:-0.026921841432340443 - actor/pg_clipfrac:0.0050148068366979714 - actor/ppo_kl:0.0005008242404566469 - actor/pg_clipfrac_lower:0.0 - actor/grad_norm:0.30913739651441574 - perf/mfu/actor:0.0 - perf/max_memory_allocated_gb:16.159663677215576 - perf/max_memory_reserved_gb:34.173828125 - perf/cpu_memory_used_gb:75.21735382080078 - actor/lr:2e-06 - training/global_step:23 - training/epoch:0 - critic/rewards/mean:0.47595611214637756 - critic/rewards/max:0.8527559041976929 - critic/rewards/min:0.0 - critic/advantages/mean:0.0005988840712234378 - critic/advantages/max:1.1546978950500488 - critic/advantages/min:-1.1546965837478638 - critic/format_reward/mean:0.9692081809043884 - response_length/mean:15.740601539611816 - response_length/max:16.0 - response_length/min:11.0 - response_length/clip_ratio:0.0 - prompt_length/mean:28.2431640625 - prompt_length/max:127.0 - prompt_length/min:3.0 - prompt_length/clip_ratio:0.0 - timing_s/start_profile:3.991008270531893e-06 - timing_s/generate_sequences:22.610754013061523 - timing_s/reshard:0.6454492807388306 - timing_s/gen:23.622280417010188 - timing_s/reward:0.6116004260256886 - timing_s/old_log_prob:1.6711791090201586 - timing_s/ref:1.6331726160133258 - timing_s/adv:0.6136740199872293 - timing_s/update_actor:6.509463638998568 - timing_s/step:34.719315999012906 - timing_s/stop_profile:2.7919886633753777e-06 - timing_per_token_ms/ref:0.01208699846003997 - timing_per_token_ms/update_actor:0.04817609370179391 - timing_per_token_ms/adv:0.004541759310573485 - timing_per_token_ms/gen:0.4885165431532323 - perf/total_num_tokens:1194401 - perf/time_per_step:34.719315999012906 - perf/throughput:4300.203523717019
[36m(TaskRunner pid=3050306)[0m global_steps 24
[36m(TaskRunner pid=3050306)[0m first_prompt: import unittest
[36m(TaskRunner pid=3050306)[0m  end1prompt
[36m(TaskRunner pid=3050306)[0m first_res:     # This is our main unit test, which we'll use to verify that endfirst
[36m(TaskRunner pid=3050306)[0m second_prompt: 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m class Solution:
[36m(TaskRunner pid=3050306)[0m  end2prompt
[36m(TaskRunner pid=3050306)[0m second_res:     # This is the method that we will use to verify that we are handling endsecond
[36m(TaskRunner pid=3050306)[0m third_prompt:     def prefixToPostfix(self, s):
[36m(TaskRunner pid=3050306)[0m  end3prompt
[36m(TaskRunner pid=3050306)[0m third_res:         # The only thing we need to do is change the first character of the endthird
[36m(TaskRunner pid=3050306)[0m fourth_prompt:         if not s:
[36m(TaskRunner pid=3050306)[0m  end4prompt
[36m(TaskRunner pid=3050306)[0m fourth_res:         # if the string is empty we don't need to modify anything so we endfourth
[36m(TaskRunner pid=3050306)[0m fifth_prompt:             return s
[36m(TaskRunner pid=3050306)[0m  end5prompt
[36m(TaskRunner pid=3050306)[0m fifth_res:         # we have modified at least one character so we need to continue the process endfifth
[36m(TaskRunner pid=3050306)[0m six_prompt:         
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         size = len(s)
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m six_res:         # This counts how many characters we have modified so far to see if
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m seven_prompt:         stack = []
[36m(TaskRunner pid=3050306)[0m  end7prompt
[36m(TaskRunner pid=3050306)[0m seven_res:         # This is a list that we will use to store all the characters that endseven
[36m(TaskRunner pid=3050306)[0m Training Progress:   1%|          | 24/2218 [13:45<21:05:25, 34.61s/it]
[36m(TaskRunner pid=3050306)[0m step:24 - global_seqlen/min:148243 - global_seqlen/max:159123 - global_seqlen/minmax_diff:10880 - global_seqlen/balanced_min:152825 - global_seqlen/balanced_max:152826 - global_seqlen/mean:152825.5 - actor/entropy:0.5572599172592163 - actor/pg_loss:-0.008516535259938488 - actor/pg_clipfrac:0.005341147111418347 - actor/ppo_kl:0.00012143734359900311 - actor/pg_clipfrac_lower:0.0 - actor/grad_norm:0.3342839851975441 - perf/mfu/actor:0.0 - perf/max_memory_allocated_gb:16.159663677215576 - perf/max_memory_reserved_gb:34.173828125 - perf/cpu_memory_used_gb:75.05477142333984 - actor/lr:2e-06 - training/global_step:24 - training/epoch:0 - critic/rewards/mean:0.4794541597366333 - critic/rewards/max:0.8271609544754028 - critic/rewards/min:0.0 - critic/advantages/mean:8.785914542386308e-05 - critic/advantages/max:1.1546977758407593 - critic/advantages/min:-1.154698133468628 - critic/format_reward/mean:0.9637001156806946 - response_length/mean:15.661144256591797 - response_length/max:16.0 - response_length/min:11.0 - response_length/clip_ratio:0.0 - prompt_length/mean:27.732421875 - prompt_length/max:128.0 - prompt_length/min:2.0 - prompt_length/clip_ratio:0.0009765625 - timing_s/start_profile:6.109010428190231e-06 - timing_s/generate_sequences:23.540559768676758 - timing_s/reshard:0.6127846240997314 - timing_s/gen:24.52330839895876 - timing_s/reward:0.6025054840138182 - timing_s/old_log_prob:1.7054067580029368 - timing_s/ref:1.6834883250412531 - timing_s/adv:0.24936296098167077 - timing_s/update_actor:6.581447412027046 - timing_s/step:35.40243628202006 - timing_s/stop_profile:2.7390196919441223e-06 - timing_per_token_ms/ref:0.012628842737020371 - timing_per_token_ms/update_actor:0.04937133398084157 - timing_per_token_ms/adv:0.001870619220717256 - timing_per_token_ms/gen:0.5097231501944308 - perf/total_num_tokens:1222604 - perf/time_per_step:35.40243628202006 - perf/throughput:4316.807430499237
[36m(TaskRunner pid=3050306)[0m global_steps 25
[36m(WorkerDict pid=3062565)[0m sssss
[36m(TaskRunner pid=3050306)[0m Training Progress:   1%|          | 25/2218 [14:21<21:18:00, 34.97s/it]
[36m(TaskRunner pid=3050306)[0m first_prompt: #재귀함수를 이용한 dfs 구현풀이
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m class Solution:
[36m(TaskRunner pid=3050306)[0m  end1prompt
[36m(TaskRunner pid=3050306)[0m first_res:     # This function will return the number of nodes that has to be visited
[36m(TaskRunner pid=3050306)[0m  endfirst
[36m(TaskRunner pid=3050306)[0m second_prompt:     def permute(self, nums: List[int]) -> List[List[int]]:
[36m(TaskRunner pid=3050306)[0m  end2prompt
[36m(TaskRunner pid=3050306)[0m second_res:         # Create an empty sequence to keep track of the number of nodes
[36m(TaskRunner pid=3050306)[0m  endsecond
[36m(TaskRunner pid=3050306)[0m third_prompt:         results = []
[36m(TaskRunner pid=3050306)[0m  end3prompt
[36m(TaskRunner pid=3050306)[0m third_res:         # Add the number of nodes to be visited to the sequence to keep track endthird
[36m(TaskRunner pid=3050306)[0m fourth_prompt:         prev_elements = []
[36m(TaskRunner pid=3050306)[0m  end4prompt
[36m(TaskRunner pid=3050306)[0m fourth_res:         # This will keep track of the nodes that have been visited in previous
[36m(TaskRunner pid=3050306)[0m  endfourth
[36m(TaskRunner pid=3050306)[0m fifth_prompt:         
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         def dfs(elements):
[36m(TaskRunner pid=3050306)[0m  end5prompt
[36m(TaskRunner pid=3050306)[0m fifth_res:             # If the element we are currently visiting has already been visited then
[36m(TaskRunner pid=3050306)[0m  endfifth
[36m(TaskRunner pid=3050306)[0m six_prompt:             # 리프 노드일 때 결과 추가
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m             if len(elements) == 0:
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m six_res:                 # If the element we are currently visiting has already been visited then
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m seven_prompt:                 results.append(prev_elements[:])
[36m(TaskRunner pid=3050306)[0m  end7prompt
[36m(TaskRunner pid=3050306)[0m seven_res:                 # the current element does not need to be visited again so we can stop endseven
[36m(TaskRunner pid=3050306)[0m step:25 - global_seqlen/min:147592 - global_seqlen/max:157572 - global_seqlen/minmax_diff:9980 - global_seqlen/balanced_min:151734 - global_seqlen/balanced_max:151734 - global_seqlen/mean:151734.0 - actor/entropy:0.4967166781425476 - actor/pg_loss:-0.011598164943279698 - actor/pg_clipfrac:0.004344391187866374 - actor/ppo_kl:0.0006550478008951662 - actor/pg_clipfrac_lower:0.0 - actor/grad_norm:0.30368059128522873 - perf/mfu/actor:0.0 - perf/max_memory_allocated_gb:16.159663677215576 - perf/max_memory_reserved_gb:34.173828125 - perf/cpu_memory_used_gb:75.1286506652832 - actor/lr:2e-06 - training/global_step:25 - training/epoch:0 - critic/rewards/mean:0.49227380752563477 - critic/rewards/max:0.8514936566352844 - critic/rewards/min:0.0 - critic/advantages/mean:0.00024765441776253283 - critic/advantages/max:1.1546974182128906 - critic/advantages/min:-1.154698133468628 - critic/format_reward/mean:0.9607834815979004 - response_length/mean:15.579094886779785 - response_length/max:16.037036895751953 - response_length/min:9.545454978942871 - response_length/clip_ratio:0.0 - prompt_length/mean:28.2685546875 - prompt_length/max:128.0 - prompt_length/min:3.0 - prompt_length/clip_ratio:0.001953125 - timing_s/start_profile:4.731002263724804e-06 - timing_s/generate_sequences:23.391279220581055 - timing_s/reshard:0.5877878665924072 - timing_s/gen:24.54443634697236 - timing_s/reward:0.6072267579729669 - timing_s/old_log_prob:1.6518955960054882 - timing_s/ref:1.6006026579998434 - timing_s/adv:0.24646520498208702 - timing_s/update_actor:6.918264080013614 - timing_s/step:35.62575070402818 - timing_s/stop_profile:2.634013071656227e-06 - timing_per_token_ms/ref:0.011882723757121691 - timing_per_token_ms/update_actor:0.05136054256235494 - timing_per_token_ms/adv:0.001829734526496581 - timing_per_token_ms/gen:0.5128491268843242 - perf/total_num_tokens:1213872 - perf/time_per_step:35.62575070402818 - perf/throughput:4259.11025035168
[36m(TaskRunner pid=3050306)[0m global_steps 26
[36m(WorkerDict pid=3062565)[0m sssss
[36m(TaskRunner pid=3050306)[0m Training Progress:   1%|          | 26/2218 [14:55<21:08:40, 34.73s/it]
[36m(TaskRunner pid=3050306)[0m first_prompt: from typing import List
[36m(TaskRunner pid=3050306)[0m  end1prompt
[36m(TaskRunner pid=3050306)[0m first_res:     # This function returns an immutable list containing the elements of the given
[36m(TaskRunner pid=3050306)[0m  endfirst
[36m(TaskRunner pid=3050306)[0m second_prompt: 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m def three_sum_closest(nums: List[int], target: int) -> int:
[36m(TaskRunner pid=3050306)[0m  end2prompt
[36m(TaskRunner pid=3050306)[0m second_res:     # Initialize a variable to track the sum of all elements in the list at endsecond
[36m(TaskRunner pid=3050306)[0m third_prompt:     nums = sorted(nums)
[36m(TaskRunner pid=3050306)[0m  end3prompt
[36m(TaskRunner pid=3050306)[0m third_res:     # to make the list in alphabetical order so it's easy to find the endthird
[36m(TaskRunner pid=3050306)[0m fourth_prompt:     closest_diff = float('inf')
[36m(TaskRunner pid=3050306)[0m  end4prompt
[36m(TaskRunner pid=3050306)[0m fourth_res:     # this variable will contain the difference between the current sum and the target
[36m(TaskRunner pid=3050306)[0m  endfourth
[36m(TaskRunner pid=3050306)[0m fifth_prompt:     closest_sum = None
[36m(TaskRunner pid=3050306)[0m  end5prompt
[36m(TaskRunner pid=3050306)[0m fifth_res:     # We will keep track of the closest sum we have found so far as endfifth
[36m(TaskRunner pid=3050306)[0m six_prompt: 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m     for n in nums:
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m six_res:         # If we find a number that is smaller than the current sum we are endsix
[36m(TaskRunner pid=3050306)[0m seven_prompt:         l = 0
[36m(TaskRunner pid=3050306)[0m  end7prompt
[36m(TaskRunner pid=3050306)[0m seven_res:         # this variable will keep track of the sum we have found so far as endseven
[36m(TaskRunner pid=3050306)[0m step:26 - global_seqlen/min:142033 - global_seqlen/max:160511 - global_seqlen/minmax_diff:18478 - global_seqlen/balanced_min:150940 - global_seqlen/balanced_max:150941 - global_seqlen/mean:150940.625 - actor/entropy:0.4530961811542511 - actor/pg_loss:0.017506831131565075 - actor/pg_clipfrac:0.0049348691148528205 - actor/ppo_kl:0.0004464094578603787 - actor/pg_clipfrac_lower:0.0 - actor/grad_norm:0.3135864660143852 - perf/mfu/actor:0.0 - perf/max_memory_allocated_gb:16.159663677215576 - perf/max_memory_reserved_gb:34.173828125 - perf/cpu_memory_used_gb:75.14990615844727 - actor/lr:2e-06 - training/global_step:26 - training/epoch:0 - critic/rewards/mean:0.5019760131835938 - critic/rewards/max:0.809605062007904 - critic/rewards/min:0.0 - critic/advantages/mean:-0.0008334855665452778 - critic/advantages/max:1.1546977758407593 - critic/advantages/min:-1.1546977758407593 - critic/format_reward/mean:0.9579847455024719 - response_length/mean:15.473576545715332 - response_length/max:16.100000381469727 - response_length/min:12.0 - response_length/clip_ratio:0.0 - prompt_length/mean:28.25 - prompt_length/max:128.0 - prompt_length/min:3.0 - prompt_length/clip_ratio:0.0009765625 - timing_s/start_profile:4.915986210107803e-06 - timing_s/generate_sequences:22.45730972290039 - timing_s/reshard:0.7404404878616333 - timing_s/gen:23.558968542027287 - timing_s/reward:0.6068945929873735 - timing_s/old_log_prob:1.634927562030498 - timing_s/ref:1.573509993031621 - timing_s/adv:0.2570827630115673 - timing_s/update_actor:6.386629169981461 - timing_s/step:34.075869683991186 - timing_s/stop_profile:2.702989149838686e-06 - timing_per_token_ms/ref:0.011714738841879105 - timing_per_token_ms/update_actor:0.04754827941201159 - timing_per_token_ms/adv:0.0019139741360185225 - timing_per_token_ms/gen:0.4956148885208005 - perf/total_num_tokens:1207525 - perf/time_per_step:34.075869683991186 - perf/throughput:4429.545787085568
[36m(TaskRunner pid=3050306)[0m global_steps 27
[36m(TaskRunner pid=3050306)[0m Training Progress:   1%|          | 27/2218 [15:28<20:49:03, 34.21s/it]
[36m(TaskRunner pid=3050306)[0m first_prompt: class Solution:
[36m(TaskRunner pid=3050306)[0m  end1prompt
[36m(TaskRunner pid=3050306)[0m first_res:     # This function will return an integer indicating the number of unique
[36m(TaskRunner pid=3050306)[0m  endfirst
[36m(TaskRunner pid=3050306)[0m second_prompt:     def maximalRectangle(self, matrix: List[List[str]]) -> int:
[36m(TaskRunner pid=3050306)[0m  end2prompt
[36m(TaskRunner pid=3050306)[0m second_res:         # The number of unique elements is the sum of the number of unique
[36m(TaskRunner pid=3050306)[0m  endsecond
[36m(TaskRunner pid=3050306)[0m third_prompt:         if(matrix==[]):
[36m(TaskRunner pid=3050306)[0m  end3prompt
[36m(TaskRunner pid=3050306)[0m third_res:             # If the matrix is empty then there are no unique elements
[36m(TaskRunner pid=3050306)[0m  endthird
[36m(TaskRunner pid=3050306)[0m fourth_prompt:             return 0
[36m(TaskRunner pid=3050306)[0m  end4prompt
[36m(TaskRunner pid=3050306)[0m fourth_res:         # Initialize a variable to keep track of the number of unique elements
[36m(TaskRunner pid=3050306)[0m  endfourth
[36m(TaskRunner pid=3050306)[0m fifth_prompt:             
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         m = len(matrix)
[36m(TaskRunner pid=3050306)[0m  end5prompt
[36m(TaskRunner pid=3050306)[0m fifth_res:         # This variable will keep track of the number of unique elements
[36m(TaskRunner pid=3050306)[0m  endfifth
[36m(TaskRunner pid=3050306)[0m six_prompt:         n = len(matrix[0])
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m six_res:         # Since there are no unique elements in the first element we don't
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m seven_prompt: 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         res = 0
[36m(TaskRunner pid=3050306)[0m  end7prompt
[36m(TaskRunner pid=3050306)[0m seven_res:         # This variable will keep track of the number of unique elements we
[36m(TaskRunner pid=3050306)[0m  endseven
[36m(TaskRunner pid=3050306)[0m step:27 - global_seqlen/min:137929 - global_seqlen/max:153843 - global_seqlen/minmax_diff:15914 - global_seqlen/balanced_min:146279 - global_seqlen/balanced_max:146279 - global_seqlen/mean:146279.0 - actor/entropy:0.4106166660785675 - actor/pg_loss:0.0197693333029747 - actor/pg_clipfrac:0.003609006373153534 - actor/ppo_kl:0.0003980684811419148 - actor/pg_clipfrac_lower:0.0 - actor/grad_norm:0.3005969896912575 - perf/mfu/actor:0.0 - perf/max_memory_allocated_gb:16.159663677215576 - perf/max_memory_reserved_gb:34.173828125 - perf/cpu_memory_used_gb:75.2216796875 - actor/lr:2e-06 - training/global_step:27 - training/epoch:0 - critic/rewards/mean:0.5072227120399475 - critic/rewards/max:0.8262147903442383 - critic/rewards/min:0.0 - critic/advantages/mean:0.00014105347509030253 - critic/advantages/max:1.154698371887207 - critic/advantages/min:-1.1546975374221802 - critic/format_reward/mean:0.9521275162696838 - response_length/mean:15.343921661376953 - response_length/max:16.0 - response_length/min:11.5 - response_length/clip_ratio:0.0 - prompt_length/mean:27.6982421875 - prompt_length/max:128.0 - prompt_length/min:3.0 - prompt_length/clip_ratio:0.00390625 - timing_s/start_profile:4.4790212996304035e-06 - timing_s/generate_sequences:21.793010711669922 - timing_s/reshard:0.49003949761390686 - timing_s/gen:22.64980358403409 - timing_s/reward:0.5903719430207275 - timing_s/old_log_prob:1.6337988140294328 - timing_s/ref:1.5344415300060064 - timing_s/adv:0.24410688900388777 - timing_s/update_actor:6.188232793996576 - timing_s/step:32.89740701694973 - timing_s/stop_profile:2.7579953894019127e-06 - timing_per_token_ms/ref:0.011604729894681233 - timing_per_token_ms/update_actor:0.04680059076572161 - timing_per_token_ms/adv:0.0018461404080414594 - timing_per_token_ms/gen:0.4805148970533424 - perf/total_num_tokens:1170232 - perf/time_per_step:32.89740701694973 - perf/throughput:4446.520661176508
[36m(TaskRunner pid=3050306)[0m global_steps 28
[36m(WorkerDict pid=3062565)[0m sssss
[36m(WorkerDict pid=3062565)[0m sssss
[36m(TaskRunner pid=3050306)[0m first_prompt: class Solution:
[36m(TaskRunner pid=3050306)[0m  end1prompt
[36m(TaskRunner pid=3050306)[0m first_res:     # This function will find the number of ways to form a sequence
[36m(TaskRunner pid=3050306)[0m  endfirst
[36m(TaskRunner pid=3050306)[0m second_prompt:     def duplicateZeros(self, arr):
[36m(TaskRunner pid=3050306)[0m  end2prompt
[36m(TaskRunner pid=3050306)[0m second_res:         # The number of times the same number appears in the array
[36m(TaskRunner pid=3050306)[0m  endsecond
[36m(TaskRunner pid=3050306)[0m third_prompt:         """
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         Do not return anything, modify arr in-place instead.
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         """
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         newArr = []
[36m(TaskRunner pid=3050306)[0m  end3prompt
[36m(TaskRunner pid=3050306)[0m third_res:         # This array will store the number of times we already counted a specific number endthird
[36m(TaskRunner pid=3050306)[0m fourth_prompt: 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         n = len(arr)
[36m(TaskRunner pid=3050306)[0m  end4prompt
[36m(TaskRunner pid=3050306)[0m fourth_res:         # This variable will count the number of times the number appears in the array endfourth
[36m(TaskRunner pid=3050306)[0m fifth_prompt:         
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         for i in range(n-1):
[36m(TaskRunner pid=3050306)[0m  end5prompt
[36m(TaskRunner pid=3050306)[0m fifth_res:             # If the number we are currently counting appears in the array then
[36m(TaskRunner pid=3050306)[0m  endfifth
[36m(TaskRunner pid=3050306)[0m six_prompt:             if arr[i] != 0:
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m six_res:                 # If the number we are currently counting appears in the array then
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m seven_prompt:                 newArr[i] = arr[i]
[36m(TaskRunner pid=3050306)[0m  end7prompt
[36m(TaskRunner pid=3050306)[0m seven_res:                 # If the number we are currently counting appears in the array then
[36m(TaskRunner pid=3050306)[0m  endseven
[36m(TaskRunner pid=3050306)[0m Training Progress:   1%|▏         | 28/2218 [16:02<20:50:33, 34.26s/it]
[36m(TaskRunner pid=3050306)[0m step:28 - global_seqlen/min:138621 - global_seqlen/max:155132 - global_seqlen/minmax_diff:16511 - global_seqlen/balanced_min:148111 - global_seqlen/balanced_max:148112 - global_seqlen/mean:148111.5 - actor/entropy:0.37600472569465637 - actor/pg_loss:-0.0038411500475679836 - actor/pg_clipfrac:0.004273986055826147 - actor/ppo_kl:0.000356394443466949 - actor/pg_clipfrac_lower:0.0 - actor/grad_norm:0.2840990126132965 - perf/mfu/actor:0.0 - perf/max_memory_allocated_gb:16.159663677215576 - perf/max_memory_reserved_gb:34.173828125 - perf/cpu_memory_used_gb:75.18178939819336 - actor/lr:2e-06 - training/global_step:28 - training/epoch:0 - critic/rewards/mean:0.5226487517356873 - critic/rewards/max:0.8354843258857727 - critic/rewards/min:0.0 - critic/advantages/mean:0.0010104854591190815 - critic/advantages/max:1.1546984910964966 - critic/advantages/min:-1.1546976566314697 - critic/format_reward/mean:0.9471228718757629 - response_length/mean:15.223891258239746 - response_length/max:16.047618865966797 - response_length/min:7.75 - response_length/clip_ratio:0.0 - prompt_length/mean:26.66796875 - prompt_length/max:127.0 - prompt_length/min:3.0 - prompt_length/clip_ratio:0.0 - timing_s/start_profile:4.6510249376297e-06 - timing_s/generate_sequences:23.032007217407227 - timing_s/reshard:0.609935462474823 - timing_s/gen:24.028316028008703 - timing_s/reward:0.6124515990377404 - timing_s/old_log_prob:1.5971839469857514 - timing_s/ref:1.5424249430070631 - timing_s/adv:0.248346448992379 - timing_s/update_actor:6.184514930995647 - timing_s/step:34.271084721025545 - timing_s/stop_profile:3.879948053508997e-06 - timing_per_token_ms/ref:0.011985418086308017 - timing_per_token_ms/update_actor:0.048056793586654135 - timing_per_token_ms/adv:0.0019297768976820808 - timing_per_token_ms/gen:0.5137791309515995 - perf/total_num_tokens:1184892 - perf/time_per_step:34.271084721025545 - perf/throughput:4321.762827341517
[36m(TaskRunner pid=3050306)[0m global_steps 29
[36m(WorkerDict pid=3062563)[0m sssss
[36m(TaskRunner pid=3050306)[0m first_prompt: class Solution:
[36m(TaskRunner pid=3050306)[0m  end1prompt
[36m(TaskRunner pid=3050306)[0m first_res:     # This function will solve the maximum number of blocks out of given
[36m(TaskRunner pid=3050306)[0m  endfirst
[36m(TaskRunner pid=3050306)[0m second_prompt:     def sortColors(self, nums: List[int]) -> None:
[36m(TaskRunner pid=3050306)[0m  end2prompt
[36m(TaskRunner pid=3050306)[0m second_res:         # Create an empty list to store the sorted elements we found
[36m(TaskRunner pid=3050306)[0m  endsecond
[36m(TaskRunner pid=3050306)[0m third_prompt:         """
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         Do not return anything, modify nums in-place instead.
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         """
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         left = 0
[36m(TaskRunner pid=3050306)[0m  end3prompt
[36m(TaskRunner pid=3050306)[0m third_res:         # The variable will keep track of the first element we found
[36m(TaskRunner pid=3050306)[0m  endthird
[36m(TaskRunner pid=3050306)[0m fourth_prompt:         right = len(nums)-1
[36m(TaskRunner pid=3050306)[0m  end4prompt
[36m(TaskRunner pid=3050306)[0m fourth_res:         # Keep track of the current element we found in the list
[36m(TaskRunner pid=3050306)[0m  endfourth
[36m(TaskRunner pid=3050306)[0m fifth_prompt:         for i in range(len(nums)):
[36m(TaskRunner pid=3050306)[0m  end5prompt
[36m(TaskRunner pid=3050306)[0m fifth_res:             # If the current element we found is smaller than the element
[36m(TaskRunner pid=3050306)[0m  endfifth
[36m(TaskRunner pid=3050306)[0m six_prompt:             while right>i and nums[i]==2:
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m six_res:                 # If the current element we found is smaller than the element
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m seven_prompt:                 nums[i], nums[right] = nums[right], nums[i]
[36m(TaskRunner pid=3050306)[0m  end7prompt
[36m(TaskRunner pid=3050306)[0m seven_res:                 # If the current element we found is smaller than the element
[36m(TaskRunner pid=3050306)[0m  endseven
[36m(TaskRunner pid=3050306)[0m Training Progress:   1%|▏         | 29/2218 [16:37<20:56:34, 34.44s/it]
[36m(TaskRunner pid=3050306)[0m step:29 - global_seqlen/min:141426 - global_seqlen/max:155453 - global_seqlen/minmax_diff:14027 - global_seqlen/balanced_min:148352 - global_seqlen/balanced_max:148353 - global_seqlen/mean:148352.875 - actor/entropy:0.32971861958503723 - actor/pg_loss:-0.008566472330130637 - actor/pg_clipfrac:0.00308934340137057 - actor/ppo_kl:0.0005118985385858347 - actor/pg_clipfrac_lower:0.0 - actor/grad_norm:0.2720969170331955 - perf/mfu/actor:0.0 - perf/max_memory_allocated_gb:16.159663677215576 - perf/max_memory_reserved_gb:34.173828125 - perf/cpu_memory_used_gb:75.24100112915039 - actor/lr:2e-06 - training/global_step:29 - training/epoch:0 - critic/rewards/mean:0.5318582653999329 - critic/rewards/max:0.8761536478996277 - critic/rewards/min:0.0 - critic/advantages/mean:0.001685077091678977 - critic/advantages/max:1.1546982526779175 - critic/advantages/min:-1.154698133468628 - critic/format_reward/mean:0.9489571452140808 - response_length/mean:15.131091117858887 - response_length/max:16.0 - response_length/min:12.199999809265137 - response_length/clip_ratio:0.0 - prompt_length/mean:28.0400390625 - prompt_length/max:128.0 - prompt_length/min:3.0 - prompt_length/clip_ratio:0.0009765625 - timing_s/start_profile:5.564012099057436e-06 - timing_s/generate_sequences:22.66537094116211 - timing_s/reshard:0.48905354738235474 - timing_s/gen:23.52831152098952 - timing_s/reward:0.617740796005819 - timing_s/old_log_prob:1.6808959310292266 - timing_s/ref:1.6558198309503496 - timing_s/adv:0.27871824498288333 - timing_s/update_actor:6.910246714018285 - timing_s/step:34.744747932010796 - timing_s/stop_profile:3.5060220398008823e-06 - timing_per_token_ms/ref:0.012485284794212011 - timing_per_token_ms/update_actor:0.052104943188938685 - timing_per_token_ms/adv:0.002101603447977183 - timing_per_token_ms/gen:0.5061733932133466 - perf/total_num_tokens:1186823 - perf/time_per_step:34.744747932010796 - perf/throughput:4269.792812723806
[36m(TaskRunner pid=3050306)[0m global_steps 30
[36m(WorkerDict pid=3062563)[0m sssss
[36m(TaskRunner pid=3050306)[0m Training Progress:   1%|▏         | 30/2218 [17:11<20:51:36, 34.32s/it]
[36m(TaskRunner pid=3050306)[0m first_prompt: #
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m # @lc app=leetcode.cn id=35 lang=python3
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m #
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m # [35] 搜索插入位置
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m #
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m # @lc code=start
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m class Solution:
[36m(TaskRunner pid=3050306)[0m  end1prompt
[36m(TaskRunner pid=3050306)[0m first_res:     # You can assume that all elements are unique in the array.
[36m(TaskRunner pid=3050306)[0m  endfirst
[36m(TaskRunner pid=3050306)[0m second_prompt:     def searchInsert(self, nums: List[int], target: int) -> int:
[36m(TaskRunner pid=3050306)[0m  end2prompt
[36m(TaskRunner pid=3050306)[0m second_res:         # First, we need to find the position where the target element
[36m(TaskRunner pid=3050306)[0m  endsecond
[36m(TaskRunner pid=3050306)[0m third_prompt: 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         # 二分查找
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         # 二分的核心是找出一个分界点，如果左右两段有不同的性质，二分就能给它找出来
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         # 二分查找有两种情况
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         l, r = 0, len(nums)-1
[36m(TaskRunner pid=3050306)[0m  end3prompt
[36m(TaskRunner pid=3050306)[0m third_res:         # If there is no element that can be inserted into the target position
[36m(TaskRunner pid=3050306)[0m  endthird
[36m(TaskRunner pid=3050306)[0m fourth_prompt: 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         while l < r:
[36m(TaskRunner pid=3050306)[0m  end4prompt
[36m(TaskRunner pid=3050306)[0m fourth_res:             # If there is an element that can be inserted into the target position
[36m(TaskRunner pid=3050306)[0m  endfourth
[36m(TaskRunner pid=3050306)[0m fifth_prompt:             mid = (l+r)//2
[36m(TaskRunner pid=3050306)[0m  end5prompt
[36m(TaskRunner pid=3050306)[0m fifth_res:             # If there is an element that can be inserted into the target position
[36m(TaskRunner pid=3050306)[0m  endfifth
[36m(TaskRunner pid=3050306)[0m six_prompt:             if nums[mid] >= target:
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m six_res:                 # If there is an element that can be inserted into the target position
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m seven_prompt:                 r = mid
[36m(TaskRunner pid=3050306)[0m  end7prompt
[36m(TaskRunner pid=3050306)[0m seven_res:                 # If there is an element that can be inserted into the target position
[36m(TaskRunner pid=3050306)[0m  endseven
[36m(TaskRunner pid=3050306)[0m step:30 - global_seqlen/min:140725 - global_seqlen/max:154049 - global_seqlen/minmax_diff:13324 - global_seqlen/balanced_min:147148 - global_seqlen/balanced_max:147148 - global_seqlen/mean:147148.0 - actor/entropy:0.3107180595397949 - actor/pg_loss:-0.005281713325530291 - actor/pg_clipfrac:0.0033417288990070424 - actor/ppo_kl:0.00028175199592321104 - actor/pg_clipfrac_lower:0.0 - actor/grad_norm:0.2736094146966934 - perf/mfu/actor:0.0 - perf/max_memory_allocated_gb:16.159663677215576 - perf/max_memory_reserved_gb:34.173828125 - perf/cpu_memory_used_gb:75.31519317626953 - actor/lr:2e-06 - training/global_step:30 - training/epoch:0 - critic/rewards/mean:0.5375492572784424 - critic/rewards/max:0.8745610117912292 - critic/rewards/min:0.0 - critic/advantages/mean:0.0013035280862823129 - critic/advantages/max:1.154698133468628 - critic/advantages/min:-1.154698133468628 - critic/format_reward/mean:0.9552974104881287 - response_length/mean:15.112309455871582 - response_length/max:16.047618865966797 - response_length/min:11.956521987915039 - response_length/clip_ratio:0.0 - prompt_length/mean:28.376953125 - prompt_length/max:128.0 - prompt_length/min:3.0 - prompt_length/clip_ratio:0.0009765625 - timing_s/start_profile:5.386013071984053e-06 - timing_s/generate_sequences:22.133358001708984 - timing_s/reshard:0.5033931732177734 - timing_s/gen:23.013202133006416 - timing_s/reward:0.6113543069805019 - timing_s/old_log_prob:1.6426121669937856 - timing_s/ref:1.5891818309901282 - timing_s/adv:0.2661425410187803 - timing_s/update_actor:6.708163560950197 - timing_s/step:33.90063360403292 - timing_s/stop_profile:3.634020686149597e-06 - timing_per_token_ms/ref:0.011895161229711555 - timing_per_token_ms/update_actor:0.05021117505670392 - timing_per_token_ms/adv:0.0019920995658068144 - timing_per_token_ms/gen:0.4957069334967276 - perf/total_num_tokens:1177184 - perf/time_per_step:33.90063360403292 - perf/throughput:4340.567840669941
[36m(TaskRunner pid=3050306)[0m global_steps 31
[36m(WorkerDict pid=3062568)[0m sssss
[36m(TaskRunner pid=3050306)[0m Training Progress:   1%|▏         | 31/2218 [17:46<20:54:33, 34.42s/it]
[36m(TaskRunner pid=3050306)[0m first_prompt: # @Time : 2022-08-20 17:28
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m # @Author : Phalange
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m # @File : 1748. 唯一元素的和.py
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m # @Software: PyCharm
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m # C'est la vie,enjoy it! :D
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m import collections
[36m(TaskRunner pid=3050306)[0m  end1prompt
[36m(TaskRunner pid=3050306)[0m first_res: # Create a collection which will hold all elements of given list once it has
[36m(TaskRunner pid=3050306)[0m  endfirst
[36m(TaskRunner pid=3050306)[0m second_prompt: from typing import List
[36m(TaskRunner pid=3050306)[0m  end2prompt
[36m(TaskRunner pid=3050306)[0m second_res: # This will hold the elements that we have added to the list, one at endsecond
[36m(TaskRunner pid=3050306)[0m third_prompt: 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m class Solution:
[36m(TaskRunner pid=3050306)[0m  end3prompt
[36m(TaskRunner pid=3050306)[0m third_res:     # This function will find the number of elements that exist in the given
[36m(TaskRunner pid=3050306)[0m  endthird
[36m(TaskRunner pid=3050306)[0m fourth_prompt:     def sumOfUnique(self, nums: List[int]) -> int:
[36m(TaskRunner pid=3050306)[0m  end4prompt
[36m(TaskRunner pid=3050306)[0m fourth_res:         # Since this will be counting the unique elements that we have
[36m(TaskRunner pid=3050306)[0m  endfourth
[36m(TaskRunner pid=3050306)[0m fifth_prompt:         mymap = collections.Counter(nums)
[36m(TaskRunner pid=3050306)[0m  end5prompt
[36m(TaskRunner pid=3050306)[0m fifth_res:         # This will keep track of the number of elements we have already
[36m(TaskRunner pid=3050306)[0m  endfifth
[36m(TaskRunner pid=3050306)[0m six_prompt:         ans = 0
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m six_res:         # This will keep track of the number of unique elements that have
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m seven_prompt:         for key,val in mymap.items():
[36m(TaskRunner pid=3050306)[0m  end7prompt
[36m(TaskRunner pid=3050306)[0m seven_res:             # If the element is already accounted for then we can move on
[36m(TaskRunner pid=3050306)[0m  endseven
[36m(TaskRunner pid=3050306)[0m step:31 - global_seqlen/min:134987 - global_seqlen/max:156101 - global_seqlen/minmax_diff:21114 - global_seqlen/balanced_min:145931 - global_seqlen/balanced_max:145932 - global_seqlen/mean:145931.25 - actor/entropy:0.28549784421920776 - actor/pg_loss:-0.018681824207305908 - actor/pg_clipfrac:0.003224369662348181 - actor/ppo_kl:0.0003080316633562082 - actor/pg_clipfrac_lower:0.0 - actor/grad_norm:0.2598305083811283 - perf/mfu/actor:0.0 - perf/max_memory_allocated_gb:16.159663677215576 - perf/max_memory_reserved_gb:34.173828125 - perf/cpu_memory_used_gb:75.32682800292969 - actor/lr:2e-06 - training/global_step:31 - training/epoch:0 - critic/rewards/mean:0.5466045141220093 - critic/rewards/max:0.8789382576942444 - critic/rewards/min:0.0 - critic/advantages/mean:0.0013336280826479197 - critic/advantages/max:1.1546980142593384 - critic/advantages/min:-1.154698371887207 - critic/format_reward/mean:0.9585406184196472 - response_length/mean:15.062729835510254 - response_length/max:16.0 - response_length/min:12.129032135009766 - response_length/clip_ratio:0.0 - prompt_length/mean:28.62109375 - prompt_length/max:128.0 - prompt_length/min:3.0 - prompt_length/clip_ratio:0.001953125 - timing_s/start_profile:6.084970664232969e-06 - timing_s/generate_sequences:21.47968864440918 - timing_s/reshard:0.6724128723144531 - timing_s/gen:22.53593233198626 - timing_s/reward:0.6082350970245898 - timing_s/old_log_prob:1.614407031040173 - timing_s/ref:1.5668305790168233 - timing_s/adv:0.2763026100001298 - timing_s/update_actor:7.84552909102058 - timing_s/step:34.52050762495492 - timing_s/stop_profile:3.268010914325714e-06 - timing_per_token_ms/ref:0.011675626128828632 - timing_per_token_ms/update_actor:0.05846290318579587 - timing_per_token_ms/adv:0.0020589373324621744 - timing_per_token_ms/gen:0.48702429094469774 - perf/total_num_tokens:1167450 - perf/time_per_step:34.52050762495492 - perf/throughput:4227.378449513475
[36m(TaskRunner pid=3050306)[0m global_steps 32
[36m(WorkerDict pid=3062288)[0m sssss[32m [repeated 2x across cluster][0m
[36m(WorkerDict pid=3062568)[0m sssss[32m [repeated 2x across cluster][0m
[36m(TaskRunner pid=3050306)[0m Training Progress:   1%|▏         | 32/2218 [18:20<20:53:06, 34.39s/it]
[36m(TaskRunner pid=3050306)[0m first_prompt: class Solution(object):
[36m(TaskRunner pid=3050306)[0m  end1prompt
[36m(TaskRunner pid=3050306)[0m first_res:     # This functions will return the number of unique values in the given
[36m(TaskRunner pid=3050306)[0m  endfirst
[36m(TaskRunner pid=3050306)[0m second_prompt:     def shortestDistance(self, words, word1, word2):
[36m(TaskRunner pid=3050306)[0m  end2prompt
[36m(TaskRunner pid=3050306)[0m second_res:         # This function will simply check to see if there is a word that
[36m(TaskRunner pid=3050306)[0m  endsecond
[36m(TaskRunner pid=3050306)[0m third_prompt:         """
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         :type words: List[str]
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         :type word1: str
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         :type word2: str
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         :rtype: int
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         """
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         min_dist = len(words)
[36m(TaskRunner pid=3050306)[0m  end3prompt
[36m(TaskRunner pid=3050306)[0m third_res:         # This will simply keep track of the minimal distance we have seen
[36m(TaskRunner pid=3050306)[0m  endthird
[36m(TaskRunner pid=3050306)[0m fourth_prompt:         index1, index2 = len(words), len(words)
[36m(TaskRunner pid=3050306)[0m  end4prompt
[36m(TaskRunner pid=3050306)[0m fourth_res:         # This will keep track of the indices where we have seen each word
[36m(TaskRunner pid=3050306)[0m  endfourth
[36m(TaskRunner pid=3050306)[0m fifth_prompt:         
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         for i in range(len(words)):
[36m(TaskRunner pid=3050306)[0m  end5prompt
[36m(TaskRunner pid=3050306)[0m fifth_res:             # If we have seen this word before we have found the shortest
[36m(TaskRunner pid=3050306)[0m  endfifth
[36m(TaskRunner pid=3050306)[0m six_prompt:             if words[i] == word1:
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m six_res:                 # If we have seen this word before we have found the shortest
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m seven_prompt:                 index1 = i
[36m(TaskRunner pid=3050306)[0m  end7prompt
[36m(TaskRunner pid=3050306)[0m seven_res:                 # If we have seen this word before we have found the shortest
[36m(TaskRunner pid=3050306)[0m  endseven
[36m(TaskRunner pid=3050306)[0m step:32 - global_seqlen/min:137622 - global_seqlen/max:162964 - global_seqlen/minmax_diff:25342 - global_seqlen/balanced_min:150343 - global_seqlen/balanced_max:150344 - global_seqlen/mean:150343.75 - actor/entropy:0.2625078558921814 - actor/pg_loss:0.05142354918643832 - actor/pg_clipfrac:0.0025468044768786058 - actor/ppo_kl:0.0004674576551527328 - actor/pg_clipfrac_lower:0.0 - actor/grad_norm:0.23908262699842453 - perf/mfu/actor:0.0 - perf/max_memory_allocated_gb:16.159663677215576 - perf/max_memory_reserved_gb:34.173828125 - perf/cpu_memory_used_gb:75.29187393188477 - actor/lr:2e-06 - training/global_step:32 - training/epoch:0 - critic/rewards/mean:0.5515514016151428 - critic/rewards/max:0.8762189745903015 - critic/rewards/min:0.0 - critic/advantages/mean:0.0014470352325588465 - critic/advantages/max:1.1546984910964966 - critic/advantages/min:-1.1546977758407593 - critic/format_reward/mean:0.9619228839874268 - response_length/mean:15.041598320007324 - response_length/max:16.0 - response_length/min:11.65217399597168 - response_length/clip_ratio:0.0 - prompt_length/mean:26.84765625 - prompt_length/max:127.0 - prompt_length/min:3.0 - prompt_length/clip_ratio:0.0 - timing_s/start_profile:6.153015419840813e-06 - timing_s/generate_sequences:21.728614807128906 - timing_s/reshard:0.6412938237190247 - timing_s/gen:22.9356213810388 - timing_s/reward:0.605995805002749 - timing_s/old_log_prob:1.6602206190000288 - timing_s/ref:1.641336704022251 - timing_s/adv:0.2721741099958308 - timing_s/update_actor:7.044241302006412 - timing_s/step:34.218376865959726 - timing_s/stop_profile:2.8569484129548073e-06 - timing_per_token_ms/ref:0.012754805527408552 - timing_per_token_ms/update_actor:0.054740704740867695 - timing_per_token_ms/adv:0.002115061360709852 - timing_per_token_ms/gen:0.49635833798532114 - perf/total_num_tokens:1202750 - perf/time_per_step:34.218376865959726 - perf/throughput:4393.655215994807
[36m(WorkerDict pid=3062564)[0m sssss
[36m(TaskRunner pid=3050306)[0m global_steps 33
[36m(TaskRunner pid=3050306)[0m Training Progress:   1%|▏         | 33/2218 [18:55<20:58:13, 34.55s/it]
[36m(TaskRunner pid=3050306)[0m first_prompt: # # Search for the median of two sorted arrays
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m # # O((m + n) / 2)
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m # +
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m def medianOfTwoSortedArrays(list1, list2):
[36m(TaskRunner pid=3050306)[0m  end1prompt
[36m(TaskRunner pid=3050306)[0m first_res:     # First we will find the element that is the middle element of
[36m(TaskRunner pid=3050306)[0m  endfirst
[36m(TaskRunner pid=3050306)[0m second_prompt:     
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m     if list1 == None or list2 == None:
[36m(TaskRunner pid=3050306)[0m  end2prompt
[36m(TaskRunner pid=3050306)[0m second_res:         # If either list is empty then there is no middle element
[36m(TaskRunner pid=3050306)[0m  endsecond
[36m(TaskRunner pid=3050306)[0m third_prompt:         
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         return False
[36m(TaskRunner pid=3050306)[0m  end3prompt
[36m(TaskRunner pid=3050306)[0m third_res:     # If there is a middle element then we can find it easily
[36m(TaskRunner pid=3050306)[0m  endthird
[36m(TaskRunner pid=3050306)[0m fourth_prompt:     
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m     elif list1 == []:
[36m(TaskRunner pid=3050306)[0m  end4prompt
[36m(TaskRunner pid=3050306)[0m fourth_res:         # If the list is empty then there is no middle element
[36m(TaskRunner pid=3050306)[0m  endfourth
[36m(TaskRunner pid=3050306)[0m fifth_prompt:         
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         if len(list2) % 2 == 0:
[36m(TaskRunner pid=3050306)[0m  end5prompt
[36m(TaskRunner pid=3050306)[0m fifth_res:             # If the list is even then there is no middle element
[36m(TaskRunner pid=3050306)[0m  endfifth
[36m(TaskRunner pid=3050306)[0m six_prompt:             
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m             return (list2[len(list2) // 2] + list2[len(list2) // 2 + 1]) / 2
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m six_res:         # If the list is odd then there is no middle element
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m seven_prompt:         else:
[36m(TaskRunner pid=3050306)[0m  end7prompt
[36m(TaskRunner pid=3050306)[0m seven_res:             # If the list is odd then there is no middle element
[36m(TaskRunner pid=3050306)[0m  endseven
[36m(TaskRunner pid=3050306)[0m step:33 - global_seqlen/min:133743 - global_seqlen/max:157869 - global_seqlen/minmax_diff:24126 - global_seqlen/balanced_min:146995 - global_seqlen/balanced_max:146996 - global_seqlen/mean:146995.375 - actor/entropy:0.2386067509651184 - actor/pg_loss:-0.04702791307742397 - actor/pg_clipfrac:0.003952540437846134 - actor/ppo_kl:0.0005986673835044106 - actor/pg_clipfrac_lower:0.0 - actor/grad_norm:0.2695232965052128 - perf/mfu/actor:0.0 - perf/max_memory_allocated_gb:16.159663677215576 - perf/max_memory_reserved_gb:34.173828125 - perf/cpu_memory_used_gb:75.23798751831055 - actor/lr:2e-06 - training/global_step:33 - training/epoch:0 - critic/rewards/mean:0.5637001991271973 - critic/rewards/max:0.8780614733695984 - critic/rewards/min:0.019701918587088585 - critic/advantages/mean:0.0008988296031020582 - critic/advantages/max:1.1546984910964966 - critic/advantages/min:-1.154698371887207 - critic/format_reward/mean:0.9715790152549744 - response_length/mean:15.017723083496094 - response_length/max:16.0 - response_length/min:12.300000190734863 - response_length/clip_ratio:0.0 - prompt_length/mean:27.380859375 - prompt_length/max:128.0 - prompt_length/min:3.0 - prompt_length/clip_ratio:0.0009765625 - timing_s/start_profile:6.634974852204323e-06 - timing_s/generate_sequences:22.58306312561035 - timing_s/reshard:0.6460796594619751 - timing_s/gen:23.57776576699689 - timing_s/reward:0.6183375550317578 - timing_s/old_log_prob:1.6530793760321103 - timing_s/ref:1.602733715029899 - timing_s/adv:0.28269254200858995 - timing_s/update_actor:6.885458531032782 - timing_s/step:34.692001696967054 - timing_s/stop_profile:2.7679488994181156e-06 - timing_per_token_ms/ref:0.012305204190226784 - timing_per_token_ms/update_actor:0.05286403622333281 - timing_per_token_ms/adv:0.0021704101060886893 - timing_per_token_ms/gen:0.5110664191861121 - perf/total_num_tokens:1175963 - perf/time_per_step:34.692001696967054 - perf/throughput:4237.154612293561
[36m(TaskRunner pid=3050306)[0m global_steps 34
[36m(WorkerDict pid=3062565)[0m sssss
[36m(WorkerDict pid=3062563)[0m sssss
[36m(TaskRunner pid=3050306)[0m first_prompt: 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m Write a function to count the number of distinct non-empty substrings in a given string that are palindromes.
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m ```python
[36m(TaskRunner pid=3050306)[0m def count_palindrome_substrings(s):
[36m(TaskRunner pid=3050306)[0m  end1prompt
[36m(TaskRunner pid=3050306)[0m first_res:     # Initialize a variable to keep track of the number of substrings
[36m(TaskRunner pid=3050306)[0m  endfirst
[36m(TaskRunner pid=3050306)[0m second_prompt:     n = len(s)
[36m(TaskRunner pid=3050306)[0m  end2prompt
[36m(TaskRunner pid=3050306)[0m second_res:     # This variable will keep track of the counting of the number
[36m(TaskRunner pid=3050306)[0m  endsecond
[36m(TaskRunner pid=3050306)[0m third_prompt:     palindrome_count = 0
[36m(TaskRunner pid=3050306)[0m  end3prompt
[36m(TaskRunner pid=3050306)[0m third_res:     # This variable will keep track of the number of substrings of
[36m(TaskRunner pid=3050306)[0m  endthird
[36m(TaskRunner pid=3050306)[0m fourth_prompt:     for i in range(n):
[36m(TaskRunner pid=3050306)[0m  end4prompt
[36m(TaskRunner pid=3050306)[0m fourth_res:         # If the substring we are currently checking is a palindrome then
[36m(TaskRunner pid=3050306)[0m  endfourth
[36m(TaskRunner pid=3050306)[0m fifth_prompt:         # Check for odd length palindromes
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         palindrome_count += expand_around_center(s, i, i)
[36m(TaskRunner pid=3050306)[0m  end5prompt
[36m(TaskRunner pid=3050306)[0m fifth_res:         # If the substring we are currently checking is a palindrome then
[36m(TaskRunner pid=3050306)[0m  endfifth
[36m(TaskRunner pid=3050306)[0m six_prompt:         # Check for even length palindromes
[36m(TaskRunner pid=3050306)[0m 
[36m(TaskRunner pid=3050306)[0m         palindrome_count += expand_around_center(s, i, i + 1)
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m six_res:         # If the substring we are currently checking is a palindrome then
[36m(TaskRunner pid=3050306)[0m  endsix
[36m(TaskRunner pid=3050306)[0m seven_prompt:     return palindrome_count
[36m(TaskRunner pid=3050306)[0m  end7prompt
[36m(TaskRunner pid=3050306)[0m seven_res: # This function will return the number of distinct non-empty substrings
[36m(TaskRunner pid=3050306)[0m  endseven
[36m(TaskRunner pid=3050306)[0m Training Progress:   2%|▏         | 34/2218 [19:29<20:49:54, 34.34s/it]
[36m(TaskRunner pid=3050306)[0m step:34 - global_seqlen/min:135010 - global_seqlen/max:157868 - global_seqlen/minmax_diff:22858 - global_seqlen/balanced_min:148809 - global_seqlen/balanced_max:148810 - global_seqlen/mean:148809.875 - actor/entropy:0.21853414177894592 - actor/pg_loss:0.03280674790342649 - actor/pg_clipfrac:0.0027812655995755145 - actor/ppo_kl:0.0005750763836355569 - actor/pg_clipfrac_lower:0.0 - actor/grad_norm:0.2476477548480034 - perf/mfu/actor:0.0 - perf/max_memory_allocated_gb:16.159663677215576 - perf/max_memory_reserved_gb:34.173828125 - perf/cpu_memory_used_gb:75.24436950683594 - actor/lr:2e-06 - training/global_step:34 - training/epoch:0 - critic/rewards/mean:0.5692439079284668 - critic/rewards/max:0.8907524943351746 - critic/rewards/min:0.0 - critic/advantages/mean:-0.00020829866116400808 - critic/advantages/max:1.1546982526779175 - critic/advantages/min:-1.154698371887207 - critic/format_reward/mean:0.9738165736198425 - response_length/mean:14.980700492858887 - response_length/max:16.0 - response_length/min:9.833333015441895 - response_length/clip_ratio:0.0 - prompt_length/mean:27.978515625 - prompt_length/max:126.0 - prompt_length/min:3.0 - prompt_length/clip_ratio:0.0 - timing_s/start_profile:6.22699735686183e-06 - timing_s/generate_sequences:21.78164291381836 - timing_s/reshard:0.634827733039856 - timing_s/gen:22.784411690023262 - timing_s/reward:0.6138851399882697 - timing_s/old_log_prob:1.6610864900285378 - timing_s/ref:1.6058518050122075 - timing_s/adv:0.26822724303929135 - timing_s/update_actor:6.714513028040528 - timing_s/step:33.718471792002674 - timing_s/stop_profile:2.8909998945891857e-06 - timing_per_token_ms/ref:0.01216824395052871 - timing_per_token_ms/update_actor:0.05087881227843392 - timing_per_token_ms/adv:0.002032475548050363 - timing_per_token_ms/gen:0.4950903892155515 - perf/total_num_tokens:1190479 - perf/time_per_step:33.718471792002674 - perf/throughput:4413.304254058591
[36m(TaskRunner pid=3050306)[0m global_steps 35
[36m(WorkerDict pid=3062569)[0m sssss
